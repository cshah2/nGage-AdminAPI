{
	"info": {
		"_postman_id": "85a3e1ca-4d5c-4b2c-8149-99bd20d8e5aa",
		"name": "nGage Admin API",
		"description": "Collection contains happy path tests for all Admin Apis",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "01 SecurityManagement",
			"item": [
				{
					"name": "Categories",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Create new category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"categories_get_id\", id);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"var Name = \"Category_\"+Date.now()",
													"pm.globals.set(\"categories_post_name\", Name);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Name\": \"{{categories_post_name}}\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Categories",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Categories"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "Get Category (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2655cdc8-5c8b-446b-ba30-755ec2a2c9ad",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/Categories({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Categories({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Verify Response status code and Response body.\", function () {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"var Name = \"Category_Patch_\"+Date.now()",
													"pm.globals.set(\"categories_patch_name\", Name);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Name\": \"{{categories_patch_name}}\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Categories({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Categories({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Verify Response status code and Response body.\", function () {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"var Name = \"Categories_Put_\"+Date.now()",
													"pm.globals.set(\"categories_put_name\", Name);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Id\": {{categories_get_id}},\r\n\t\"Name\": \"{{categories_put_name}}\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Categories({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Categories({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Categories",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/Categories",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Categories"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Organizations",
					"item": [
						{
							"name": "Test Happy Path",
							"item": [
								{
									"name": "Create new Organization",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "979a6bd5-817d-4f71-957f-0f5c08819364",
												"exec": [
													"var orgName = \"Organization_\"+Date.now()",
													"pm.globals.set(\"organizations_post_name\", orgName);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0d7d49b2-0d9c-48e4-8092-691f3a909ca3",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"  ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"  ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('IsDisabled');",
													"    pm.expect(jsonData).to.have.property('Address1');",
													"    pm.expect(jsonData).to.have.property('Address2');",
													"    pm.expect(jsonData).to.have.property('Address3');",
													"    pm.expect(jsonData).to.have.property('City');",
													"    pm.expect(jsonData).to.have.property('State');",
													"    pm.expect(jsonData).to.have.property('PostalCode');",
													"    pm.expect(jsonData).to.have.property('Country');",
													"    pm.expect(jsonData).to.have.property('PrimaryContact');",
													"    pm.expect(jsonData).to.have.property('ContactNumber1');",
													"    pm.expect(jsonData).to.have.property('ContactNumber2');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('organizations_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"organizations_get_id\", id);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"IsDisabled\": false,\n    \"Name\": \"{{organizations_post_name}}\",\n    \"Address1\": \"50 Valley Stream Parkway (HQ)1\",\n    \"Address2\": \"\",\n    \"Address3\": \"\",\n    \"City\": \"Malvern\",\n    \"State\": \"PA\",\n    \"PostalCode\": \"19355\",\n    \"Country\": \"USA\",\n    \"PrimaryContact\": \"Support\",\n    \"ContactNumber1\": \"484.323.1360\",\n    \"ContactNumber2\": null\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Organizations",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Organizations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Organizations(Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "89f55150-3536-428e-9817-487bae01795b",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"  ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"  ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('IsDisabled');",
													"    pm.expect(jsonData).to.have.property('Address1');",
													"    pm.expect(jsonData).to.have.property('Address2');",
													"    pm.expect(jsonData).to.have.property('Address3');",
													"    pm.expect(jsonData).to.have.property('City');",
													"    pm.expect(jsonData).to.have.property('State');",
													"    pm.expect(jsonData).to.have.property('PostalCode');",
													"    pm.expect(jsonData).to.have.property('Country');",
													"    pm.expect(jsonData).to.have.property('PrimaryContact');",
													"    pm.expect(jsonData).to.have.property('ContactNumber1');",
													"    pm.expect(jsonData).to.have.property('ContactNumber2');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('organizations_get_id'));",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('organizations_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/Organizations({{organizations_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Organizations({{organizations_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Organisation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "589d8697-1283-4ab2-9e9d-02957f549ce0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fc9c3be9-a162-4372-9f53-6e9d0aa32f1c",
												"exec": [
													"pm.test(\"Verify Response status code and Response body.\", function () {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Address1\": \"Postman patch - Address 1 field - organization\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Organizations({{organizations_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Organizations({{organizations_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Organisation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "71833015-17d3-4ad8-abf8-86590c412982",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0058825-c179-4a77-8c07-cd3836b675d0",
												"exec": [
													"pm.test(\"Verify Response status code and Response body.\", function () {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"IsDisabled\": false,\n    \"Id\": {{organizations_get_id}},\n    \"Name\": \"{{organizations_post_name}}\",\n    \"Address1\": \"Postman put - Address 1 field - organization\",\n    \"Address2\": \"\",\n    \"Address3\": \"\",\n    \"City\": \"Malvern\",\n    \"State\": \"PA\",\n    \"PostalCode\": \"19355\",\n    \"Country\": \"USA\",\n    \"PrimaryContact\": \"Support\",\n    \"ContactNumber1\": \"484.323.1360\",\n    \"ContactNumber2\": null\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Organizations({{organizations_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Organizations({{organizations_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Organizations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"  ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"  ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsDisabled');",
													"    pm.expect(jsonData.value[0]).to.have.property('Address1');",
													"    pm.expect(jsonData.value[0]).to.have.property('Address2');",
													"    pm.expect(jsonData.value[0]).to.have.property('Address3');",
													"    pm.expect(jsonData.value[0]).to.have.property('City');",
													"    pm.expect(jsonData.value[0]).to.have.property('State');",
													"    pm.expect(jsonData.value[0]).to.have.property('PostalCode');",
													"    pm.expect(jsonData.value[0]).to.have.property('Country');",
													"    pm.expect(jsonData.value[0]).to.have.property('PrimaryContact');",
													"    pm.expect(jsonData.value[0]).to.have.property('ContactNumber1');",
													"    pm.expect(jsonData.value[0]).to.have.property('ContactNumber2');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}/api/Organizations",
											"host": [
												"{{SiteURL}}"
											],
											"path": [
												"api",
												"Organizations"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "SecurityCertificates",
					"item": [
						{
							"name": "Test- Happy Path",
							"item": [
								{
									"name": "Create New Security Certificates",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "dea4fa11-d155-4391-b993-1dcd82f366aa",
												"exec": [
													"var secCertName = \"SC_Name\"+Date.now()",
													"pm.globals.set(\"SC_post_name\", secCertName);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a2526aa7-a82b-4dd0-a6f1-815564ea7ec2",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Certificate');",
													"    pm.expect(jsonData).to.have.property('IsEnabled');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('SC_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"SC_get_id\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \t\"Name\": \"{{SC_post_name}}\",\r\n \t\"Certificate\": \"UEsDBBQABgAIAAAAIQDfpNJsWgEAACAFAAATAAgCW0NvbnRlbnRfVHlwZXNdLnhtbCCiBAIooAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC0lMtuwjAQRfeV+g+Rt1Vi6KKqKgKLPpYtUukHGHsCVv2Sx7z+vhMCUVUBkQpsIiUz994zVsaD0dqabAkRtXcl6xc9loGTXmk3K9nX5C1/ZBkm4ZQw3kHJNoBsNLy9GUw2ATAjtcOSzVMKT5yjnIMVWPgAjiqVj1Ykeo0zHoT8FjPg973eA5feJXApT7UHGw5eoBILk7LXNX1uSCIYZNlz01hnlUyEYLQUiep86dSflHyXUJBy24NzHfCOGhg/mFBXjgfsdB90NFEryMYipndhqYuvfFRcebmwpCxO2xzg9FWlJbT62i1ELwGRztyaoq1Yod2e/ygHpo0BvDxF49sdDymR4BoAO+dOhBVMP69G8cu8E6Si3ImYGrg8RmvdCZFoA6F59s/m2NqciqTOcfQBaaPjP8ber2ytzmngADHp039dm0jWZ88H9W2gQB3I5tv7bfgDAAD//wMAUEsDBBQABgAIAAAAIQAekRq37wAAAE4CAAALAAgCX3JlbHMvLnJlbHMgogQCKKAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\r\n \t\"IsEnabled\": true\r\n }"
										},
										"url": {
											"raw": "{{SiteURL}}api/SecurityCertificates",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SecurityCertificates"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Security Certificates",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87fced6e-4bea-4d95-aea3-21e5624c0086",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Certificate');",
													"    pm.expect(jsonData).to.have.property('IsEnabled');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('SC_get_id'));",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('SC_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/SecurityCertificates({{SC_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SecurityCertificates({{SC_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Security Certificates",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d1ca0f17-9d94-47a1-88e5-7796a6ca2e3c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "21954efa-7ec8-4202-8425-eea9dc00ace1",
												"exec": [
													"pm.test(\"Verify Response status code and Response body.\", function () {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"IsEnabled\": false\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/SecurityCertificates({{SC_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SecurityCertificates({{SC_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Security Certificates",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a9bda175-2471-45df-a4e7-c30e1be69aea",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8be2c18c-6495-4aa9-ba65-384e3be7644d",
												"exec": [
													"pm.test(\"Verify Response status code and Response body.\", function () {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \t\"Id\": {{SC_get_id}},\r\n \t\"Name\": \"{{SC_post_name}}\",\r\n \t\"Certificate\": \"UEsDBBQABgAIAAAAIQDfpNJsWgEAACAFAAATAAgCW0NvbnRlbnRfVHlwZXNdLnhtbCCiBAIooAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC0lMtuwjAQRfeV+g+Rt1Vi6KKqKgKLPpYtUukHGHsCVv2Sx7z+vhMCUVUBkQpsIiUz994zVsaD0dqabAkRtXcl6xc9loGTXmk3K9nX5C1/ZBkm4ZQw3kHJNoBsNLy9GUw2ATAjtcOSzVMKT5yjnIMVWPgAjiqVj1Ykeo0zHoT8FjPg973eA5feJXApT7UHGw5eoBILk7LXNX1uSCIYZNlz01hnlUyEYLQUiep86dSflHyXUJBy24NzHfCOGhg/mFBXjgfsdB90NFEryMYipndhqYuvfFRcebmwpCxO2xzg9FWlJbT62i1ELwGRztyaoq1Yod2e/ygHpo0BvDxF49sdDymR4BoAO+dOhBVMP69G8cu8E6Si3ImYGrg8RmvdCZFoA6F59s/m2NqciqTOcfQBaaPjP8ber2ytzmngADHp039dm0jWZ88H9W2gQB3I5tv7bfgDAAD//wMAUEsDBBQABgAIAAAAIQAekRq37wAAAE4CAAALAAgCX3JlbHMvLnJlbHMgogQCKKAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\r\n \t\"IsEnabled\": true\r\n }"
										},
										"url": {
											"raw": "{{SiteURL}}api/SecurityCertificates({{SC_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SecurityCertificates({{SC_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Security Certificates",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e14799e0-bec7-4f80-bec0-5f944d8b9546",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"        ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"  ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('Certificate');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsEnabled');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0)",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/SecurityCertificates",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SecurityCertificates"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "SecurityConfigurations",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "Create new SecurityConfigurations",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "81322ef0-0953-43a1-9b47-da6561ca59b8",
												"exec": [
													"var Name = \"SecurityConfig\"+Date.now()",
													"pm.globals.set(\"SecurityConfigurations_post_name\", Name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e473bd78-7b3c-45f7-aec1-645135d033cc",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('PasswordMin');",
													"    pm.expect(jsonData).to.have.property('PasswordMax');",
													"    pm.expect(jsonData).to.have.property('ElapsedNoOfDays');",
													"    pm.expect(jsonData).to.have.property('StrongPassword');",
													"    pm.expect(jsonData).to.have.property('InvalidAttempts');",
													"    pm.expect(jsonData).to.have.property('PasswordHistoryCount');",
													"    pm.expect(jsonData).to.have.property('DefaultConfig');",
													"    pm.expect(jsonData).to.have.property('TrackPasswordChanges');",
													"    pm.expect(jsonData).to.have.property('MaxChangesPeriod');",
													"    pm.expect(jsonData).to.have.property('HourMCP');",
													"    pm.expect(jsonData).to.have.property('FirstCharType');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('LockInactiveUserPeriod');",
													"    pm.expect(jsonData).to.have.property('WarningPwdExpiredPeriod');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('SecurityConfigurations_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"SecurityConfigurations_get_id\", id);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"PasswordMin\": 6,\n    \"PasswordMax\": 15,\n    \"ElapsedNoOfDays\": 30,\n    \"StrongPassword\": 1,\n    \"InvalidAttempts\": 10,\n    \"PasswordHistoryCount\": 5,\n    \"DefaultConfig\": false,\n    \"TrackPasswordChanges\": \"None\",\n    \"MaxChangesPeriod\": null,\n    \"HourMCP\": null,\n    \"FirstCharType\": null,\n    \"Description\": \"Create new Security Configuration\",\n    \"Name\": \"{{SecurityConfigurations_post_name}}\",\n    \"LockInactiveUserPeriod\": 30,\n    \"WarningPwdExpiredPeriod\": 7\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/SecurityConfigurations",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SecurityConfigurations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get SecurityConfigurations with Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec355bb3-c3ad-4e76-a567-a0b2197bfd53",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('PasswordMin');",
													"    pm.expect(jsonData).to.have.property('PasswordMax');",
													"    pm.expect(jsonData).to.have.property('ElapsedNoOfDays');",
													"    pm.expect(jsonData).to.have.property('StrongPassword');",
													"    pm.expect(jsonData).to.have.property('InvalidAttempts');",
													"    pm.expect(jsonData).to.have.property('PasswordHistoryCount');",
													"    pm.expect(jsonData).to.have.property('DefaultConfig');",
													"    pm.expect(jsonData).to.have.property('TrackPasswordChanges');",
													"    pm.expect(jsonData).to.have.property('MaxChangesPeriod');",
													"    pm.expect(jsonData).to.have.property('HourMCP');",
													"    pm.expect(jsonData).to.have.property('FirstCharType');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('LockInactiveUserPeriod');",
													"    pm.expect(jsonData).to.have.property('WarningPwdExpiredPeriod');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('SecurityConfigurations_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"SecurityConfigurations_get_id\", id);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/SecurityConfigurations({{SecurityConfigurations_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SecurityConfigurations({{SecurityConfigurations_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch SecurityConfigurations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77003cac-0cb9-45eb-ad87-52f1f838e5b7",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Description\": \"Postman patch - Security Configurations\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/SecurityConfigurations({{SecurityConfigurations_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SecurityConfigurations({{SecurityConfigurations_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put SecurityConfigurations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e777215-dfaf-4867-8e5d-a1febecdd07d",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Id\":{{SecurityConfigurations_get_id}},\n    \"PasswordMin\": 6,\n    \"PasswordMax\": 15,\n    \"ElapsedNoOfDays\": 30,\n    \"StrongPassword\": 1,\n    \"InvalidAttempts\": 10,\n    \"PasswordHistoryCount\": 5,\n    \"DefaultConfig\": false,\n    \"TrackPasswordChanges\": \"None\",\n    \"MaxChangesPeriod\": null,\n    \"HourMCP\": null,\n    \"FirstCharType\": null,\n    \"Description\": \"Postman put - Security Configurations\",\n    \"Name\": \"{{SecurityConfigurations_post_name}}\",\n    \"LockInactiveUserPeriod\": 30,\n    \"WarningPwdExpiredPeriod\": 7\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/SecurityConfigurations({{SecurityConfigurations_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SecurityConfigurations({{SecurityConfigurations_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Security Configurations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3bbd1b0-6af5-4be1-a512-c0b9f6506ab8",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('PasswordMin');",
													"    pm.expect(jsonData.value[0]).to.have.property('PasswordMax');",
													"    pm.expect(jsonData.value[0]).to.have.property('ElapsedNoOfDays');",
													"    pm.expect(jsonData.value[0]).to.have.property('StrongPassword');",
													"    pm.expect(jsonData.value[0]).to.have.property('InvalidAttempts');",
													"    pm.expect(jsonData.value[0]).to.have.property('PasswordHistoryCount');",
													"    pm.expect(jsonData.value[0]).to.have.property('DefaultConfig');",
													"    pm.expect(jsonData.value[0]).to.have.property('TrackPasswordChanges');",
													"    pm.expect(jsonData.value[0]).to.have.property('MaxChangesPeriod');",
													"    pm.expect(jsonData.value[0]).to.have.property('HourMCP');",
													"    pm.expect(jsonData.value[0]).to.have.property('FirstCharType');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('LockInactiveUserPeriod');",
													"    pm.expect(jsonData.value[0]).to.have.property('WarningPwdExpiredPeriod');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/SecurityConfigurations",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SecurityConfigurations"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "User Directories",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Create new user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ea01be19-e8af-46a6-bacb-d048457271c6",
												"exec": [
													"var userName = \"user_\"+Date.now();",
													"pm.globals.set(\"UserDirectory_post_username\", userName);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3ff252ab-ca97-4e5a-9f18-d2505179a6dd",
												"exec": [
													"var jsonData;",
													"verifyUserCreated();",
													"",
													"function verifyUserCreated() {",
													"    ",
													"    try {",
													"        jsonData = pm.response.json();",
													"        pm.response.to.have.status(201);",
													"        pm.expect(jsonData).to.have.property('Id');",
													"        setData();",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"}",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"UserDirectory_get_userid\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Prefer",
												"type": "text",
												"value": "return=representation"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"MustChangePwd\": false,\r\n\t\"PwdNeverExpires\": true,\r\n\t\"UPwd\": \"MyPassword1#\",\r\n\t\"SendWelcomeMessage\": false,\r\n\t\"User\": {\r\n\t\t\"Supervisor\": null,\r\n\t\t\"CategoryId\": 1,\r\n\t\t\"DomainName\": null,\r\n\t\t\"EmailAddress\": \"thisIsmail@mailserver.com\",\r\n\t\t\"FullUserName\": \"QA Automation\",\r\n\t\t\"IsDisabled\": false,\r\n\t\t\"IsExternalUser\": false,\r\n\t\t\"IsSecurityAdmin\": false,\r\n\t\t\"OrganizationId\": 1,\r\n\t\t\"SecurityConfigId\": 1,\r\n\t\t\"StartDate\": \"2017-09-01T00:00:00-04:00\",\r\n\t\t\"SupervisorId\": null,\r\n\t\t\"TerminationDate\": \"2047-09-01T00:00:00-04:00\",\r\n\t\t\"UserAcl\": null,\r\n\t\t\"UserName\": \"{{UserDirectory_post_username}}\"\t\r\n\t}\r\n}\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserManagement",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserManagement"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post UserDirectories with Children",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a40da2db-d9a2-43dd-a333-7a3c8cf20445",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('UserId');",
													"    pm.expect(jsonData).to.have.property('Country');",
													"    pm.expect(jsonData).to.have.property('Notes');",
													"    pm.expect(jsonData).to.have.property('Department');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('DisplayName');",
													"    pm.expect(jsonData).to.have.property('FaxNumber');",
													"    pm.expect(jsonData).to.have.property('GivenName');",
													"    pm.expect(jsonData).to.have.property('HomeNumber');",
													"    pm.expect(jsonData).to.have.property('Initials');",
													"    pm.expect(jsonData).to.have.property('IpPhone');",
													"    pm.expect(jsonData).to.have.property('Locality');",
													"    pm.expect(jsonData).to.have.property('Mobile');",
													"    pm.expect(jsonData).to.have.property('Pager');",
													"    pm.expect(jsonData).to.have.property('PhysicalDeliveryOfficeName');",
													"    pm.expect(jsonData).to.have.property('PostalAddress');",
													"    pm.expect(jsonData).to.have.property('PostalCode');",
													"    pm.expect(jsonData).to.have.property('PostOfficeBox');",
													"    pm.expect(jsonData).to.have.property('Surname');",
													"    pm.expect(jsonData).to.have.property('State');",
													"    pm.expect(jsonData).to.have.property('Street');",
													"    pm.expect(jsonData).to.have.property('TelephoneNumber');",
													"    pm.expect(jsonData).to.have.property('Title');",
													"    pm.expect(jsonData).to.have.property('WwwHomePage');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.UserId).to.eql(pm.variables.get('UserDirectory_get_userid'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"UserId\": {{UserDirectory_get_userid}},\r\n\t\"Country\": 840,\r\n\t\"Notes\": \"AA\",\r\n\t\"Department\": \"Banking\",\r\n\t\"Description\": \"Create new user directory.\",\r\n\t\"DisplayName\": \"shah\",\r\n\t\"FaxNumber\": \"2232333222\",\r\n\t\"GivenName\": \"Savana QA\",\r\n\t\"HomeNumber\": \"5417543010\",\r\n\t\"Initials\": \"cs\",\r\n\t\"IpPhone\": \"5417543010\",\r\n\t\"Locality\": \"dddd\",\r\n\t\"Mobile\": \"9535805389\",\r\n\t\"Pager\": \"1234567890\",\r\n\t\"PhysicalDeliveryOfficeName\": \"sdddffgggs\",\r\n\t\"PostalAddress\": \"ssdfffdd\",\r\n\t\"PostalCode\": \"33613\",\r\n\t\"PostOfficeBox\": 0,\r\n\t\"Surname\": \"shah\",\r\n\t\"State\": \"Pennsylvania\",\r\n\t\"Street\": \"sssddfffs\",\r\n\t\"TelephoneNumber\": \"5417543010\",\r\n\t\"Title\": \"Mr.\",\r\n\t\"WwwHomePage\": \"wmihomepage\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserDirectories",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserDirectories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get UserDirectories with children post-Patch",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19d7fa03-2f3b-48f2-8067-de8d04c3cf1b",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('UserId');",
													"    pm.expect(jsonData).to.have.property('Country');",
													"    pm.expect(jsonData).to.have.property('Notes');",
													"    pm.expect(jsonData).to.have.property('Department');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('DisplayName');",
													"    pm.expect(jsonData).to.have.property('FaxNumber');",
													"    pm.expect(jsonData).to.have.property('GivenName');",
													"    pm.expect(jsonData).to.have.property('HomeNumber');",
													"    pm.expect(jsonData).to.have.property('Initials');",
													"    pm.expect(jsonData).to.have.property('IpPhone');",
													"    pm.expect(jsonData).to.have.property('Locality');",
													"    pm.expect(jsonData).to.have.property('Mobile');",
													"    pm.expect(jsonData).to.have.property('Pager');",
													"    pm.expect(jsonData).to.have.property('PhysicalDeliveryOfficeName');",
													"    pm.expect(jsonData).to.have.property('PostalAddress');",
													"    pm.expect(jsonData).to.have.property('PostalCode');",
													"    pm.expect(jsonData).to.have.property('PostOfficeBox');",
													"    pm.expect(jsonData).to.have.property('Surname');",
													"    pm.expect(jsonData).to.have.property('State');",
													"    pm.expect(jsonData).to.have.property('Street');",
													"    pm.expect(jsonData).to.have.property('TelephoneNumber');",
													"    pm.expect(jsonData).to.have.property('Title');",
													"    pm.expect(jsonData).to.have.property('WwwHomePage');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.UserId).to.eql(pm.variables.get('UserDirectory_get_userid'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/UserDirectories({{UserDirectory_get_userid}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserDirectories({{UserDirectory_get_userid}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch UserDirectories",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "25508414-8926-40d2-bf4f-829fb5c25282",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "876ebe9c-bca5-47cd-997f-c5dff65f38b0",
												"exec": [
													"pm.test(\"Verify Response status code and Response body.\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"Description\": \"Postman patch - User Directory\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserDirectories({{UserDirectory_get_userid}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserDirectories({{UserDirectory_get_userid}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put UserDirectories",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b40dcb77-9e78-4da6-b874-05e869bee446",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7f406fb9-5418-44af-a8b4-46377dfa1b1a",
												"exec": [
													"pm.test(\"Verify Response status code and Response body.\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"UserId\": {{UserDirectory_get_userid}},\r\n\t\"Country\": 840,\r\n\t\"Notes\": \"AA\",\r\n\t\"Department\": \"Banking\",\r\n\t\"Description\": \"Postman put - User directory\",\r\n\t\"DisplayName\": \"shah\",\r\n\t\"FaxNumber\": \"2232333222\",\r\n\t\"GivenName\": \"Savana QA\",\r\n\t\"HomeNumber\": \"5417543010\",\r\n\t\"Initials\": \"cs\",\r\n\t\"IpPhone\": \"5417543010\",\r\n\t\"Locality\": \"dddd\",\r\n\t\"Mobile\": \"9535805389\",\r\n\t\"Pager\": \"1234567890\",\r\n\t\"PhysicalDeliveryOfficeName\": \"sdddffgggs\",\r\n\t\"PostalAddress\": \"ssdfffdd\",\r\n\t\"PostalCode\": \"33613\",\r\n\t\"PostOfficeBox\": 0,\r\n\t\"Surname\": \"shah\",\r\n\t\"State\": \"Pennsylvania\",\r\n\t\"Street\": \"sssddfffs\",\r\n\t\"TelephoneNumber\": \"5417543010\",\r\n\t\"Title\": \"Mr.\",\r\n\t\"WwwHomePage\": \"wmihomepage\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserDirectories({{UserDirectory_get_userid}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserDirectories({{UserDirectory_get_userid}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All UserDirectories",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6bf6dcb8-8954-4dfa-ad02-1fa924f65fb9",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"        ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"  ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('UserId');",
													"    pm.expect(jsonData.value[0]).to.have.property('Country');",
													"    pm.expect(jsonData.value[0]).to.have.property('Notes');",
													"    pm.expect(jsonData.value[0]).to.have.property('Department');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('DisplayName');",
													"    pm.expect(jsonData.value[0]).to.have.property('FaxNumber');",
													"    pm.expect(jsonData.value[0]).to.have.property('GivenName');",
													"    pm.expect(jsonData.value[0]).to.have.property('HomeNumber');",
													"    pm.expect(jsonData.value[0]).to.have.property('Initials');",
													"    pm.expect(jsonData.value[0]).to.have.property('IpPhone');",
													"    pm.expect(jsonData.value[0]).to.have.property('Locality');",
													"    pm.expect(jsonData.value[0]).to.have.property('Mobile');",
													"    pm.expect(jsonData.value[0]).to.have.property('Pager');",
													"    pm.expect(jsonData.value[0]).to.have.property('PhysicalDeliveryOfficeName');",
													"    pm.expect(jsonData.value[0]).to.have.property('PostalAddress');",
													"    pm.expect(jsonData.value[0]).to.have.property('PostalCode');",
													"    pm.expect(jsonData.value[0]).to.have.property('PostOfficeBox');",
													"    pm.expect(jsonData.value[0]).to.have.property('Surname');",
													"    pm.expect(jsonData.value[0]).to.have.property('State');",
													"    pm.expect(jsonData.value[0]).to.have.property('Street');",
													"    pm.expect(jsonData.value[0]).to.have.property('TelephoneNumber');",
													"    pm.expect(jsonData.value[0]).to.have.property('Title');",
													"    pm.expect(jsonData.value[0]).to.have.property('WwwHomePage');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0)",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/UserDirectories",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserDirectories"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "User Groups",
					"item": [
						{
							"name": "Test -Happy path",
							"item": [
								{
									"name": "Post UserGroups with Children",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a74ae509-3fa3-4b94-ba9e-433a190dc9ce",
												"exec": [
													"var groupName = \"POST_\"+Date.now()",
													"pm.globals.set(\"UserGroups_post_name\", groupName);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ae2c322e-b1be-4298-b6d9-21c62d139572",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('GroupId');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('Acl');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('UserGroups_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var id = jsonData.GroupId;",
													"    pm.globals.set(\"UserGroups_get_id\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Name\": \"{{UserGroups_post_name}}\",\n  \"Description\": \"Create new user group\",\n  \"Acl\": \"\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserGroups",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserGroups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get UserGroups with children",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ae0d1e1-78c1-4fa9-b37d-a69c8b7f9a8f",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('GroupId');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('Acl');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.GroupId).to.eql(pm.variables.get('UserGroups_get_id'));",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('UserGroups_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/UserGroups({{UserGroups_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserGroups({{UserGroups_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch UserGroups",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6b71e66a-cc01-423b-991c-6b7fdb546845",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c2f3d9b-a41a-4bab-9288-91aa10d984a3",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"Description\": \"Postman patch - User Groups \"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserGroups({{UserGroups_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserGroups({{UserGroups_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put UserGroups",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f220c70d-7455-4cd7-8039-4a93f5794f9b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4b9dbb96-e7f6-47bd-951b-7e5e6a7a804c",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"GroupId\":{{UserGroups_get_id}},\n    \"Name\": \"{{UserGroups_post_name}}\",\n    \"Description\": \"Postman put - User groups\",\n    \"Acl\": \"\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserGroups({{UserGroups_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserGroups({{UserGroups_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All UserGroups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1199f1c-a8fd-4323-af04-a6577b0e9827",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"  ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('GroupId');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('Acl');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0)",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/UserGroups",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserGroups"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Delete UserGroup",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e106d748-edda-4b2a-ba2b-ee74df333b02",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3dffeee0-4723-4aab-8ba5-050772db984f",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											},
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/UserGroups({{UserGroups_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserGroups({{UserGroups_get_id}})"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "UserDirectoryOtherAttributes",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Create new user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ea01be19-e8af-46a6-bacb-d048457271c6",
												"exec": [
													"var userName = \"user_\"+Date.now();",
													"pm.globals.set(\"UserDirectoryOtherAttributes_post_username\", userName);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3ff252ab-ca97-4e5a-9f18-d2505179a6dd",
												"exec": [
													"var jsonData;",
													"verifyUserCreated();",
													"",
													"function verifyUserCreated() {",
													"    ",
													"    try {",
													"        jsonData = pm.response.json();",
													"        pm.response.to.have.status(201);",
													"        pm.expect(jsonData).to.have.property('Id');",
													"        setData();",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"}",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"UserDirectoryOtherAttributes_get_userid\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Prefer",
												"type": "text",
												"value": "return=representation"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"MustChangePwd\": false,\r\n\t\"PwdNeverExpires\": true,\r\n\t\"UPwd\": \"MyPassword1#\",\r\n\t\"SendWelcomeMessage\": false,\r\n\t\"User\": {\r\n\t\t\"Supervisor\": null,\r\n\t\t\"CategoryId\": 1,\r\n\t\t\"DomainName\": null,\r\n\t\t\"EmailAddress\": \"thisIsmail@mailserver.com\",\r\n\t\t\"FullUserName\": \"QA Automation\",\r\n\t\t\"IsDisabled\": false,\r\n\t\t\"IsExternalUser\": false,\r\n\t\t\"IsSecurityAdmin\": false,\r\n\t\t\"OrganizationId\": 1,\r\n\t\t\"SecurityConfigId\": 1,\r\n\t\t\"StartDate\": \"2017-09-01T00:00:00-04:00\",\r\n\t\t\"SupervisorId\": null,\r\n\t\t\"TerminationDate\": \"2047-09-01T00:00:00-04:00\",\r\n\t\t\"UserAcl\": null,\r\n\t\t\"UserName\": \"{{UserDirectoryOtherAttributes_post_username}}\"\t\r\n\t}\r\n}\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserManagement",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserManagement"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new UserDirectoryOtherAttributes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "86e52710-2399-4331-a5f9-5f4ac5a8c425",
												"exec": [
													"pm.globals.set(\"UserDirectoryOtherAttributes_post_other\", 01212121111001);",
													"pm.globals.set(\"UserDirectoryOtherAttributes_post_type\", 3);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "42768774-8847-473f-9663-cc98d9247733",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('UserId');",
													"    pm.expect(jsonData).to.have.property('Other');",
													"    pm.expect(jsonData).to.have.property('Type');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.UserId).to.eql(pm.variables.get('UserDirectoryOtherAttributes_get_userid'));",
													"    pm.expect(jsonData.Other).to.eql(pm.variables.get('UserDirectoryOtherAttributes_post_other').toString());",
													"    pm.expect(jsonData.Type).to.eql(pm.variables.get('UserDirectoryOtherAttributes_post_type'));",
													"",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    ",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"UserDirectoryOtherAttributes_get_id\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"UserId\":{{UserDirectoryOtherAttributes_get_userid}},\n\t\"Other\": \"{{UserDirectoryOtherAttributes_post_other}}\",\n\t\"Type\": {{UserDirectoryOtherAttributes_post_type}},\n\t\"Description\": \"Create new User Directory Other Attributes.\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserDirectoryOtherAttributes",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserDirectoryOtherAttributes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get UserDirectoryOtherAttributes with Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7fb66722-f46a-481e-a0b8-0c1110a495f7",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('UserId');",
													"    pm.expect(jsonData).to.have.property('Other');",
													"    pm.expect(jsonData).to.have.property('Type');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.UserId).to.eql(pm.variables.get('UserDirectoryOtherAttributes_get_userid'));",
													"    pm.expect(jsonData.Other).to.eql(pm.variables.get('UserDirectoryOtherAttributes_post_other').toString());",
													"    pm.expect(jsonData.Type).to.eql(pm.variables.get('UserDirectoryOtherAttributes_post_type'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('UserDirectoryOtherAttributes_get_id'));",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/UserDirectoryOtherAttributes(UserId={{UserDirectoryOtherAttributes_get_userid}},Other='{{UserDirectoryOtherAttributes_post_other}}',Type={{UserDirectoryOtherAttributes_post_type}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserDirectoryOtherAttributes(UserId={{UserDirectoryOtherAttributes_get_userid}},Other='{{UserDirectoryOtherAttributes_post_other}}',Type={{UserDirectoryOtherAttributes_post_type}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch UserDirectoryOtherAttributes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bd04a0af-5cf0-4e7f-b83d-327d1a5e3aef",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Description\": \"Postman patch - UserDirectoryOtherAttributes\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserDirectoryOtherAttributes(UserId={{UserDirectoryOtherAttributes_get_userid}},Other='{{UserDirectoryOtherAttributes_post_other}}',Type={{UserDirectoryOtherAttributes_post_type}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserDirectoryOtherAttributes(UserId={{UserDirectoryOtherAttributes_get_userid}},Other='{{UserDirectoryOtherAttributes_post_other}}',Type={{UserDirectoryOtherAttributes_post_type}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put UserDirectoryOtherAttributes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "763dfa56-c53f-4b61-9687-062db0e1a027",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Id\":{{UserDirectoryOtherAttributes_get_id}},\n\t\"UserId\":{{UserDirectoryOtherAttributes_get_userid}},\n\t\"Other\": \"{{UserDirectoryOtherAttributes_post_other}}\",\n\t\"Type\": {{UserDirectoryOtherAttributes_post_type}},\n\t\"Description\": \"Postman put - UserDirectoryOtherAttributes\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserDirectoryOtherAttributes(UserId={{UserDirectoryOtherAttributes_get_userid}},Other='{{UserDirectoryOtherAttributes_post_other}}',Type={{UserDirectoryOtherAttributes_post_type}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserDirectoryOtherAttributes(UserId={{UserDirectoryOtherAttributes_get_userid}},Other='{{UserDirectoryOtherAttributes_post_other}}',Type={{UserDirectoryOtherAttributes_post_type}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All UserDirectoryOtherAttributes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f5ee332-29d6-4d47-b9c9-888328cbdd7f",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('UserId');",
													"    pm.expect(jsonData.value[0]).to.have.property('Other');",
													"    pm.expect(jsonData.value[0]).to.have.property('Type');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/UserDirectoryOtherAttributes",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserDirectoryOtherAttributes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete UserDirectoryOtherAttributes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ce11ea73-1498-4c45-b5e8-c1b224269fbc",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/UserDirectoryOtherAttributes(UserId={{UserDirectoryOtherAttributes_get_userid}},Other='{{UserDirectoryOtherAttributes_post_other}}',Type={{UserDirectoryOtherAttributes_post_type}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserDirectoryOtherAttributes(UserId={{UserDirectoryOtherAttributes_get_userid}},Other='{{UserDirectoryOtherAttributes_post_other}}',Type={{UserDirectoryOtherAttributes_post_type}})"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "UserUserGroups",
					"item": [
						{
							"name": "Test-Happy path",
							"item": [
								{
									"name": "Create new user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "420f50ff-f270-456b-bc31-8674c6ab17b3",
												"exec": [
													"var UserName = \"UN_\"+Date.now()",
													"pm.globals.set(\"UserUserGroups_post_username\", UserName);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "29a3af19-0425-4d0a-ae53-85f340a5bc5b",
												"exec": [
													"var jsonData;",
													"verifyUserCreated();",
													"",
													"function verifyUserCreated() {",
													"    ",
													"    try {",
													"        jsonData = pm.response.json();",
													"        pm.response.to.have.status(201);",
													"        pm.expect(jsonData).to.have.property('Id');",
													"        setData();",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"}",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"UserUserGroups_get_userid\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"MustChangePwd\": false,\r\n\t\"PwdNeverExpires\": true,\r\n\t\"UPwd\": \"MyPassword1#\",\r\n\t\"SendWelcomeMessage\": false,\r\n\t\"User\": {\r\n\t\t\"Supervisor\": null,\r\n\t\t\"CategoryId\": 1,\r\n\t\t\"DomainName\": null,\r\n\t\t\"EmailAddress\": \"thisIsmail@mailserver.com\",\r\n\t\t\"FullUserName\": \"PostmanUser Automation\",\r\n\t\t\"IsDisabled\": false,\r\n\t\t\"IsExternalUser\": false,\r\n\t\t\"IsSecurityAdmin\": false,\r\n\t\t\"OrganizationId\": 1,\r\n\t\t\"SecurityConfigId\": 1,\r\n\t\t\"StartDate\": \"2017-09-01T00:00:00-04:00\",\r\n\t\t\"SupervisorId\": null,\r\n\t\t\"TerminationDate\": \"2047-09-01T00:00:00-04:00\",\r\n\t\t\"UserAcl\": null,\r\n\t\t\"UserName\": \"{{UserUserGroups_post_username}}\"\t\r\n\t}\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserManagement",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserManagement"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST UserUserGroups",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "41807765-144a-4c4d-baf6-7a8bc38c8057",
												"exec": [
													"var groupName = \"GROUP_\"+Date.now()",
													"pm.globals.set(\"UserUserGroups_post_groupName\", groupName);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1e75f264-79d5-4210-abe6-30aee84ae917",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('UserId');",
													"    pm.expect(jsonData).to.have.property('GroupId');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.UserId).to.eql(pm.variables.get('UserUserGroups_get_userid'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    ",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"UserUserGroups_get_id\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											},
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"UserId\": {{UserUserGroups_get_userid}},\n\t\"GroupId\": 1\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserUserGroups",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserUserGroups"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET UserUserGroups with Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f568648-61b4-4c02-8375-6e498126f49f",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('UserId');",
													"    pm.expect(jsonData).to.have.property('GroupId');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.UserId).to.eql(pm.variables.get('UserUserGroups_get_userid'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('UserUserGroups_get_id'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											},
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/UserUserGroups(UserId={{UserUserGroups_get_userid}}, GroupId=1)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserUserGroups(UserId={{UserUserGroups_get_userid}}, GroupId=1)"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET all UserUserGroups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57625a29-b6e2-46fb-afa9-e8be7ce2c2c4",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('value');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('UserId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('GroupId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify response body contains collection of categories\r",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											},
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/UserUserGroups",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserUserGroups"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE UserUserGroups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13d5434e-e77a-4814-ac5a-f51880b22004",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											},
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/UserUserGroups(UserId={{UserUserGroups_get_userid}}, GroupId=1)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserUserGroups(UserId={{UserUserGroups_get_userid}}, GroupId=1)"
											]
										}
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "User Management",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Create new user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "420f50ff-f270-456b-bc31-8674c6ab17b3",
												"exec": [
													"var UserName = \"UN_\"+Date.now()",
													"pm.globals.set(\"UserManagement_post_username\", UserName);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "29a3af19-0425-4d0a-ae53-85f340a5bc5b",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('UserName');",
													"    pm.expect(jsonData).to.have.property('IsDisabled');",
													"    pm.expect(jsonData).to.have.property('IsSecurityAdmin');",
													"    pm.expect(jsonData).to.have.property('IsExternalUser');",
													"    pm.expect(jsonData).to.have.property('EmailAddress');",
													"    pm.expect(jsonData).to.have.property('FullUserName');",
													"    pm.expect(jsonData).to.have.property('StartDate');",
													"    pm.expect(jsonData).to.have.property('TerminationDate');",
													"    pm.expect(jsonData).to.have.property('CategoryId');",
													"    pm.expect(jsonData).to.have.property('OrganizationId');",
													"    pm.expect(jsonData).to.have.property('DomainName');",
													"    pm.expect(jsonData).to.have.property('UserAcl');",
													"    pm.expect(jsonData).to.have.property('SecurityConfigId');",
													"    pm.expect(jsonData).to.have.property('SupervisorId');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.UserName).to.eql(pm.variables.get('UserManagement_post_username'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"UserManagement_get_id\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"MustChangePwd\": false,\r\n\t\"PwdNeverExpires\": true,\r\n\t\"UPwd\": \"MyPassword1#\",\r\n\t\"SendWelcomeMessage\": false,\r\n\t\"User\": {\r\n\t\t\"Supervisor\": null,\r\n\t\t\"CategoryId\": 1,\r\n\t\t\"DomainName\": null,\r\n\t\t\"EmailAddress\": \"thisIsmail@mailserver.com\",\r\n\t\t\"FullUserName\": \"PostmanUser Automation\",\r\n\t\t\"IsDisabled\": false,\r\n\t\t\"IsExternalUser\": false,\r\n\t\t\"IsSecurityAdmin\": false,\r\n\t\t\"OrganizationId\": 1,\r\n\t\t\"SecurityConfigId\": 1,\r\n\t\t\"StartDate\": \"2017-09-01T00:00:00-04:00\",\r\n\t\t\"SupervisorId\": null,\r\n\t\t\"TerminationDate\": \"2047-09-01T00:00:00-04:00\",\r\n\t\t\"UserAcl\": null,\r\n\t\t\"UserName\": \"{{UserManagement_post_username}}\"\t\r\n\t}\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserManagement",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserManagement"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch UserManagement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "514749bb-5687-44cd-9e38-ae6b49aa40f3",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"PwdNeverExpires\": false\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserManagement({{UserManagement_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserManagement({{UserManagement_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put UserManagement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96da23a4-aedc-4825-aaba-5802b446606a",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Id\":{{UserManagement_get_id}},\r\n\t\"MustChangePwd\": true,\r\n\t\"PwdNeverExpires\": true,\r\n\t\"UPwd\": \"MyPassword1#\",\r\n\t\"SendWelcomeMessage\": false\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserManagement({{UserManagement_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserManagement({{UserManagement_get_id}})"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Users",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Create new user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ea01be19-e8af-46a6-bacb-d048457271c6",
												"exec": [
													"var userName = \"user_\"+Date.now();",
													"pm.globals.set(\"Users_post_username\", userName);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3ff252ab-ca97-4e5a-9f18-d2505179a6dd",
												"exec": [
													"var jsonData;",
													"verifyUserCreated();",
													"",
													"function verifyUserCreated() {",
													"    ",
													"    try {",
													"        jsonData = pm.response.json();",
													"        pm.response.to.have.status(201);",
													"        pm.expect(jsonData).to.have.property('Id');",
													"        setData();",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"}",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"Users_get_userid\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Prefer",
												"type": "text",
												"value": "return=representation"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"MustChangePwd\": false,\r\n\t\"PwdNeverExpires\": true,\r\n\t\"UPwd\": \"MyPassword1#\",\r\n\t\"SendWelcomeMessage\": false,\r\n\t\"User\": {\r\n\t\t\"Supervisor\": null,\r\n\t\t\"CategoryId\": 1,\r\n\t\t\"DomainName\": null,\r\n\t\t\"EmailAddress\": \"thisIsmail@mailserver.com\",\r\n\t\t\"FullUserName\": \"QA Automation\",\r\n\t\t\"IsDisabled\": false,\r\n\t\t\"IsExternalUser\": false,\r\n\t\t\"IsSecurityAdmin\": false,\r\n\t\t\"OrganizationId\": 1,\r\n\t\t\"SecurityConfigId\": 1,\r\n\t\t\"StartDate\": \"2017-09-01T00:00:00-04:00\",\r\n\t\t\"SupervisorId\": null,\r\n\t\t\"TerminationDate\": \"2047-09-01T00:00:00-04:00\",\r\n\t\t\"UserAcl\": null,\r\n\t\t\"UserName\": \"{{Users_post_username}}\"\t\r\n\t}\r\n}\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserManagement",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserManagement"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Users with children",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91be05c2-f360-4d50-bcdb-916cae697f83",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('IsDisabled');",
													"    pm.expect(jsonData).to.have.property('IsSecurityAdmin');",
													"    pm.expect(jsonData).to.have.property('IsExternalUser');",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('UserName');",
													"    pm.expect(jsonData).to.have.property('EmailAddress');",
													"    pm.expect(jsonData).to.have.property('FullUserName');",
													"    pm.expect(jsonData).to.have.property('StartDate');",
													"    pm.expect(jsonData).to.have.property('TerminationDate');",
													"    pm.expect(jsonData).to.have.property('CategoryId');",
													"    pm.expect(jsonData).to.have.property('OrganizationId');",
													"    pm.expect(jsonData).to.have.property('DomainName');",
													"    pm.expect(jsonData).to.have.property('UserAcl');",
													"    pm.expect(jsonData).to.have.property('SecurityConfigId');",
													"    pm.expect(jsonData).to.have.property('SupervisorId');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('Users_get_userid'));",
													"    pm.expect(jsonData.UserName).to.eql(pm.variables.get('Users_post_username'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ad8b09d8-25a0-4ca6-8bbf-a0938b918948",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/Users({{Users_get_userid}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Users({{Users_get_userid}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Users",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d8b8800-b56e-43a0-9bc4-8b23afa6db3d",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('IsDisabled');",
													"    pm.expect(jsonData).to.have.property('IsSecurityAdmin');",
													"    pm.expect(jsonData).to.have.property('IsExternalUser');",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('UserName');",
													"    pm.expect(jsonData).to.have.property('EmailAddress');",
													"    pm.expect(jsonData).to.have.property('FullUserName');",
													"    pm.expect(jsonData).to.have.property('StartDate');",
													"    pm.expect(jsonData).to.have.property('TerminationDate');",
													"    pm.expect(jsonData).to.have.property('CategoryId');",
													"    pm.expect(jsonData).to.have.property('OrganizationId');",
													"    pm.expect(jsonData).to.have.property('DomainName');",
													"    pm.expect(jsonData).to.have.property('UserAcl');",
													"    pm.expect(jsonData).to.have.property('SecurityConfigId');",
													"    pm.expect(jsonData).to.have.property('SupervisorId');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('Users_get_userid'));",
													"    pm.expect(jsonData.UserName).to.eql(pm.variables.get('Users_post_username'));",
													"    pm.expect(jsonData.DomainName).to.eql(pm.variables.get('Users_patch_domainName'));",
													"    pm.expect(jsonData.CreatedById).not.eql(undefined)",
													"    pm.expect(jsonData.CreatedDate).not.eql(undefined)",
													"    pm.expect(jsonData.ModifiedById).not.eql(undefined)",
													"    pm.expect(jsonData.ModifiedDate).not.eql(undefined)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2a4ad85a-446f-40b2-ae79-73dcf1d2b43f",
												"exec": [
													"var domainNamePatch = \"Postman Patch - Users\";",
													"pm.globals.set(\"Users_patch_domainName\", domainNamePatch);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Prefer",
												"value": "return=representation"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"DomainName\": \"{{Users_patch_domainName}}\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Users({{Users_get_userid}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Users({{Users_get_userid}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Users",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "13d9050a-f626-40d9-bc02-db649f372e09",
												"exec": [
													"var domainNamePut = \"Postman Put - Users\";",
													"pm.globals.set(\"Users_put_domainName\", domainNamePut);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8dd690e1-a8e1-42ef-82dc-d05d5d6fa67d",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('IsDisabled');",
													"    pm.expect(jsonData).to.have.property('IsSecurityAdmin');",
													"    pm.expect(jsonData).to.have.property('IsExternalUser');",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('UserName');",
													"    pm.expect(jsonData).to.have.property('EmailAddress');",
													"    pm.expect(jsonData).to.have.property('FullUserName');",
													"    pm.expect(jsonData).to.have.property('StartDate');",
													"    pm.expect(jsonData).to.have.property('TerminationDate');",
													"    pm.expect(jsonData).to.have.property('CategoryId');",
													"    pm.expect(jsonData).to.have.property('OrganizationId');",
													"    pm.expect(jsonData).to.have.property('DomainName');",
													"    pm.expect(jsonData).to.have.property('UserAcl');",
													"    pm.expect(jsonData).to.have.property('SecurityConfigId');",
													"    pm.expect(jsonData).to.have.property('SupervisorId');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('Users_get_userid'));",
													"    pm.expect(jsonData.UserName).to.eql(pm.variables.get('Users_post_username'));",
													"    pm.expect(jsonData.DomainName).to.eql(pm.variables.get('Users_put_domainName'));",
													"    pm.expect(jsonData.CreatedById).not.eql(undefined)",
													"    pm.expect(jsonData.CreatedDate).not.eql(undefined)",
													"    pm.expect(jsonData.ModifiedById).not.eql(undefined)",
													"    pm.expect(jsonData.ModifiedDate).not.eql(undefined)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Prefer",
												"value": "return=representation"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Id\": {{Users_get_userid}},\n\t\"Supervisor\": null,\n\t\"CategoryId\": 1,\n\t\"DomainName\": \"{{Users_put_domainName}}\",\n\t\"EmailAddress\": \"thisIsmail@mailserver.com\",\n\t\"FullUserName\": \"QA Automation\",\n\t\"IsDisabled\": false,\n\t\"IsExternalUser\": false,\n\t\"IsSecurityAdmin\": false,\n\t\"OrganizationId\": 1,\n\t\"SecurityConfigId\": 1,\n\t\"StartDate\": \"2017-09-01T00:00:00-04:00\",\n\t\"SupervisorId\": null,\n\t\"TerminationDate\": \"2047-09-01T00:00:00-04:00\",\n\t\"UserAcl\": null,\n\t\"UserName\": \"{{Users_post_username}}\"\t\n}\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/Users({{Users_get_userid}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Users({{Users_get_userid}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Users",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a208ca1-f3c5-4ae4-ae58-69cad29a0abc",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"  ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsDisabled');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsSecurityAdmin');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsExternalUser');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('UserName');",
													"    pm.expect(jsonData.value[0]).to.have.property('EmailAddress');",
													"    pm.expect(jsonData.value[0]).to.have.property('FullUserName');",
													"    pm.expect(jsonData.value[0]).to.have.property('StartDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('TerminationDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('CategoryId');",
													"    pm.expect(jsonData.value[0]).to.have.property('OrganizationId');",
													"    pm.expect(jsonData.value[0]).to.have.property('DomainName');",
													"    pm.expect(jsonData.value[0]).to.have.property('UserAcl');",
													"    pm.expect(jsonData.value[0]).to.have.property('SecurityConfigId');",
													"    pm.expect(jsonData.value[0]).to.have.property('SupervisorId');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0)",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/Users",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Users"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "cf1bca06-43e6-455b-a85e-36075f06f9e0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5a30edfe-39c5-4d3c-a8de-39beda0aac27",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "02 Configuration",
			"item": [
				{
					"name": "Admin Modules",
					"item": [
						{
							"name": "Test-Happy Path Testing",
							"item": [
								{
									"name": "Post AdminModules with Children",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2596ab78-69c8-41e4-8c41-05d04d93a489",
												"exec": [
													"var tabName = \"TAB_\"+Date.now();",
													"pm.globals.set(\"AdminModule_post_tabname\", tabName);",
													"",
													"var name = \"ADMIN_MODULE_\"+Date.now()",
													"pm.globals.set(\"AdminModule_post_name\", name);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a69e6e2b-127e-4cbb-9737-ea22c82e6e2f",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Disabled');",
													"    pm.expect(jsonData).to.have.property('TabId');",
													"    pm.expect(jsonData).to.have.property('LinkType');",
													"    pm.expect(jsonData).to.have.property('AssemblyName');",
													"    pm.expect(jsonData).to.have.property('AssemblyClass');",
													"    pm.expect(jsonData).to.have.property('UrlLink');",
													"    pm.expect(jsonData).to.have.property('AppPath');",
													"    pm.expect(jsonData).to.have.property('Parameters');",
													"    pm.expect(jsonData).to.have.property('Seq');",
													"    pm.expect(jsonData).to.have.property('ImageData');",
													"    pm.expect(jsonData).to.have.property('DisplayMode');",
													"    pm.expect(jsonData).to.have.property('HelpLink');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('AdminModule_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"AdminModule_get_id\", id);",
													"    ",
													"    var tabId = jsonData.TabId;",
													"    pm.globals.set(\"AdminModule_get_tabId\", tabId);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Disabled\": true,\n  \"Tab\": {\n    \"Disabled\": true,\n\t\"Name\": \"{{AdminModule_post_tabname}}\",\n\t\"Sequence\": 99\n  },\n  \"Name\": \"{{AdminModule_post_name}}\",\n  \"LinkType\": 0,\n  \"AssemblyName\": \"{{AdminModule_post_name}}\",\n  \"AssemblyClass\": \"{{AdminModule_post_name}}\",\n  \"UrlLink\": \"~/Administration/Security/UserGroups/Test.ascx\",\n  \"AppPath\": \"\",\n  \"Parameters\": \"\",\n  \"Seq\": 1,\n  \"ImageData\": \"R0lGODlhGAAVAOZ/AOjUhfPnnPaWIvLag/ayZKmDSvalRvXGjfW2bO7YefWqUeW8OsqsZPavXPScM/SaLypbhP7y5PXZtvWhPUltf0lzmPawWv3u3DhjivXAgc62lPq2Zt+6KfW5cvXOnfXDhfrTpf/58/r9/vXTqPWeOP3lx/ibK/zQncmthreSXvTdvvfwrKp7J4G/3uDNhtfSk/WcKOHKd6C80erPZcWgTL7IzvW+efzfvenNX56yveLo7vi3aMKYLvPq1+fKWOG9M7aJJvfVq4WVnc+RNu3k1/jAffWXJ9vJr+PUlvH09/n28mebvbSuocTQ3JetweTu9eC7Lty7wajDxef1/a/H2m98guqmIeHSvPXQotHt/B5OeeTFyefbyujS1uXFS86lJfPgxOajQoehuPaiMsyVTPihOWmJprjX6vmvVvi+fJ/Ez/WrVvatVebIUbPY6rvS4oKerKyAOrqVUMGgXrXE01d8nPXWr0tmbfHgi09qdpCUjvXKlevSbHGLlfeUHf///yH5BAEAAH8ALAAAAAAYABUAAAf/gH+Cg4SFhoeIiYgXHhkIaReKhxEjElgZDQYhkoVBKj0SBwQTIIdNOocHdiojHwQkBIUVEBhadIYZB3sHHQoORYROdRgQZxVmSYQgCAgECiQPN39XGkwYT1FUWXBLGIQbEwYTDg9GBilzSHlvWyJTQm59LYMnH34CRkYCCgphKysUZHQRUSNHHzXz/kQwIcGPw4cNBwR4cUePhgIF4kiBIGiDBQ8PH4IhMSZGHDkMXAQIwCCPmD8l/NhAENLhAQt+hgDAg2dAggQ0qghC46fDhJp+2LDxA4PPDBw+2njhwUWhwzVI/ZhQ4HDBgh9QOHBgoQSmwwdZ/aD1Y+ULDyAsJ1KgELTQj5G0d/2QQXGEiKEQJ3aUQWrCwokInAZFKME4sePHkAkFAgA7\",\n  \"DisplayMode\": 0,\n  \"HelpLink\": \"ENav_ATI_Help.htm\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/AdminModules",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"AdminModules"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Admin Modules (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Disabled');",
													"    pm.expect(jsonData).to.have.property('TabId');",
													"    pm.expect(jsonData).to.have.property('LinkType');",
													"    pm.expect(jsonData).to.have.property('AssemblyName');",
													"    pm.expect(jsonData).to.have.property('AssemblyClass');",
													"    pm.expect(jsonData).to.have.property('UrlLink');",
													"    pm.expect(jsonData).to.have.property('AppPath');",
													"    pm.expect(jsonData).to.have.property('Parameters');",
													"    pm.expect(jsonData).to.have.property('Seq');",
													"    pm.expect(jsonData).to.have.property('ImageData');",
													"    pm.expect(jsonData).to.have.property('DisplayMode');",
													"    pm.expect(jsonData).to.have.property('HelpLink');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('AdminModule_post_name'));",
													"    pm.expect(jsonData.TabId).to.eql(pm.variables.get('AdminModule_get_tabId'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('AdminModule_get_id'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/AdminModules({{AdminModule_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"AdminModules({{AdminModule_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Admin Modules",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"HelpLink\": \"Postman_Patch_AdminModules.htm\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/AdminModules({{AdminModule_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"AdminModules({{AdminModule_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Admin Modules",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Id\":{{AdminModule_get_id}},\n  \"Disabled\": true,\n  \"TabId\": {{AdminModule_get_tabId}},\n  \"Name\": \"{{AdminModule_post_name}}\",\n  \"LinkType\": 0,\n  \"AssemblyName\": \"{{AdminModule_post_name}}\",\n  \"AssemblyClass\": \"{{AdminModule_post_name}}\",\n  \"UrlLink\": \"~/Administration/Security/UserGroups/Test.ascx\",\n  \"AppPath\": \"\",\n  \"Parameters\": \"\",\n  \"Seq\": 1,\n  \"ImageData\": \"R0lGODlhGAAVAOZ/AOjUhfPnnPaWIvLag/ayZKmDSvalRvXGjfW2bO7YefWqUeW8OsqsZPavXPScM/SaLypbhP7y5PXZtvWhPUltf0lzmPawWv3u3DhjivXAgc62lPq2Zt+6KfW5cvXOnfXDhfrTpf/58/r9/vXTqPWeOP3lx/ibK/zQncmthreSXvTdvvfwrKp7J4G/3uDNhtfSk/WcKOHKd6C80erPZcWgTL7IzvW+efzfvenNX56yveLo7vi3aMKYLvPq1+fKWOG9M7aJJvfVq4WVnc+RNu3k1/jAffWXJ9vJr+PUlvH09/n28mebvbSuocTQ3JetweTu9eC7Lty7wajDxef1/a/H2m98guqmIeHSvPXQotHt/B5OeeTFyefbyujS1uXFS86lJfPgxOajQoehuPaiMsyVTPihOWmJprjX6vmvVvi+fJ/Ez/WrVvatVebIUbPY6rvS4oKerKyAOrqVUMGgXrXE01d8nPXWr0tmbfHgi09qdpCUjvXKlevSbHGLlfeUHf///yH5BAEAAH8ALAAAAAAYABUAAAf/gH+Cg4SFhoeIiYgXHhkIaReKhxEjElgZDQYhkoVBKj0SBwQTIIdNOocHdiojHwQkBIUVEBhadIYZB3sHHQoORYROdRgQZxVmSYQgCAgECiQPN39XGkwYT1FUWXBLGIQbEwYTDg9GBilzSHlvWyJTQm59LYMnH34CRkYCCgphKysUZHQRUSNHHzXz/kQwIcGPw4cNBwR4cUePhgIF4kiBIGiDBQ8PH4IhMSZGHDkMXAQIwCCPmD8l/NhAENLhAQt+hgDAg2dAggQ0qghC46fDhJp+2LDxA4PPDBw+2njhwUWhwzVI/ZhQ4HDBgh9QOHBgoQSmwwdZ/aD1Y+ULDyAsJ1KgELTQj5G0d/2QQXGEiKEQJ3aUQWrCwokInAZFKME4sePHkAkFAgA7\",\n  \"DisplayMode\": 0,\n  \"HelpLink\": \"Postman_Put_AdminModules.htm\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/AdminModules({{AdminModule_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"AdminModules({{AdminModule_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Admin Modules",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('Disabled');",
													"    pm.expect(jsonData.value[0]).to.have.property('TabId');",
													"    pm.expect(jsonData.value[0]).to.have.property('LinkType');",
													"    pm.expect(jsonData.value[0]).to.have.property('AssemblyName');",
													"    pm.expect(jsonData.value[0]).to.have.property('AssemblyClass');",
													"    pm.expect(jsonData.value[0]).to.have.property('UrlLink');",
													"    pm.expect(jsonData.value[0]).to.have.property('AppPath');",
													"    pm.expect(jsonData.value[0]).to.have.property('Parameters');",
													"    pm.expect(jsonData.value[0]).to.have.property('Seq');",
													"    pm.expect(jsonData.value[0]).to.have.property('ImageData');",
													"    pm.expect(jsonData.value[0]).to.have.property('DisplayMode');",
													"    pm.expect(jsonData.value[0]).to.have.property('HelpLink');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/AdminModules",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"AdminModules"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Admin Tabs",
					"item": [
						{
							"name": "Test Happy Path",
							"item": [
								{
									"name": "Create new Admin Tabs",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Disabled');",
													"    pm.expect(jsonData).to.have.property('Sequence');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('AdminTab_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"AdminTab_get_id\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"var Name = \"ADMIN_TAB_\"+Date.now();",
													"pm.globals.set(\"AdminTab_post_name\", Name);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Disabled\": true,\r\n  \"Name\": \"{{AdminTab_post_name}}\",\r\n  \"Sequence\": 99\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/AdminTabs",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"AdminTabs"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "Get Admin Tabs(Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Disabled');",
													"    pm.expect(jsonData).to.have.property('Sequence');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('AdminTab_post_name'));",
													"\tpm.expect(jsonData.Id).to.eql(pm.variables.get('AdminTab_get_id'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/AdminTabs({{AdminTab_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"AdminTabs({{AdminTab_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Admin Tabs",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Sequence\":100\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/AdminTabs({{AdminTab_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"AdminTabs({{AdminTab_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Admin Tabs",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Id\": {{AdminTab_get_id}},\r\n\t\"Disabled\": true,\r\n\t\"Name\": \"{{AdminTab_post_name}}\",\r\n\t\"Sequence\": 101\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/AdminTabs({{AdminTab_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"AdminTabs({{AdminTab_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Admin Tabs",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('Disabled');",
													"    pm.expect(jsonData.value[0]).to.have.property('Sequence');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/AdminTabs",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"AdminTabs"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "CachingSegments",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "Post CachingSegments  with Children",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d462c0cb-4faa-43d3-a0f7-7eb39417487a",
												"exec": [
													"var name = \"SEGMENT_\"+Date.now();",
													"pm.globals.set(\"CachingSegment_post_segment\", name);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a230c04a-e479-4db9-b68e-89e1733b4e46",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Segment');",
													"    pm.expect(jsonData).to.have.property('IsCustom');",
													"    pm.expect(jsonData).to.have.property('Key');",
													"    pm.expect(jsonData).to.have.property('Volatility');",
													"    pm.expect(jsonData).to.have.property('IsolationLevel');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.Segment).to.eql(pm.variables.get('CachingSegment_post_segment'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"   var id = jsonData.Id;",
													"   pm.globals.set(\"CachingSegment_get_id\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Segment\": \"{{CachingSegment_post_segment}}\",\n  \"Volatility\": 2,\n  \"IsolationLevel\": 2,\n  \"Description\": \"Postman Post Test\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/CachingSegments",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CachingSegments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get CachingSegments with children",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b8c9058-0b18-4111-b3d4-6396631da6b5",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Segment');",
													"    pm.expect(jsonData).to.have.property('IsCustom');",
													"    pm.expect(jsonData).to.have.property('Key');",
													"    pm.expect(jsonData).to.have.property('Volatility');",
													"    pm.expect(jsonData).to.have.property('IsolationLevel');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.Segment).to.eql(pm.variables.get('CachingSegment_post_segment'));",
													"\tpm.expect(jsonData.Id).to.eql(pm.variables.get('CachingSegment_get_id'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/CachingSegments({{CachingSegment_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CachingSegments({{CachingSegment_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch CachingSegments Class",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0cfc7a4a-0fea-490a-bbfa-ed0dec8d5ed2",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"Description\": \"Postman Post Patch Test-caching segment description\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/CachingSegments({{CachingSegment_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CachingSegments({{CachingSegment_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put CachingSegments Class",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2b562b61-bbe6-440a-9a50-496dd8cbbcf3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "97b6d085-d644-4684-a6f8-a66a38822ace",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Id\":{{CachingSegment_get_id}},\n  \"Segment\": \"{{CachingSegment_post_segment}}\",\n  \"Volatility\": 2,\n  \"IsolationLevel\": 2,\n  \"Description\": \"Postman Post Put Test-caching segment description\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/CachingSegments({{CachingSegment_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CachingSegments({{CachingSegment_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All CachingSegments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b39fbfc0-14ba-4764-8af2-c9f2faab3e7e",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Segment');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsCustom');",
													"    pm.expect(jsonData.value[0]).to.have.property('Key');",
													"    pm.expect(jsonData.value[0]).to.have.property('Volatility');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsolationLevel');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/CachingSegments",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CachingSegments"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Delete CachingSegments Class",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a02265d7-d89a-4c59-8c6d-34d5c0ecbba6",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/CachingSegments({{CachingSegment_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CachingSegments({{CachingSegment_get_id}})"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "CachingServers",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "Post CachingServers with Children",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a8cc18a5-48af-4c45-91b3-c8fba1d7d1b8",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('ServerName');",
													"    pm.expect(jsonData).to.have.property('ActionUrl');",
													"    pm.expect(jsonData).to.have.property('RetryMaxAttemts');",
													"    pm.expect(jsonData).to.have.property('RetryInterval');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.ServerName).to.eql(pm.variables.get('CachingServer_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"CachingServer_get_id\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7c6a3249-43b8-4d24-9be9-8e75e0dceeec",
												"exec": [
													"var Name = \"SERVER_NAME_\"+Date.now();",
													"pm.globals.set(\"CachingServer_post_name\", Name);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"ServerName\": \"{{CachingServer_post_name}}\",\n  \"ActionUrl\": \"http://rnddev01-win7/Maint_UI/\",\n  \"RetryMaxAttemts\": 1,\n  \"RetryInterval\": 2\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/CachingServers",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CachingServers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get CachingServers with children",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e1abfd6d-4b07-490a-b9a0-ddcd03b34d39",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('ServerName');",
													"    pm.expect(jsonData).to.have.property('ActionUrl');",
													"    pm.expect(jsonData).to.have.property('RetryMaxAttemts');",
													"    pm.expect(jsonData).to.have.property('RetryInterval');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.ServerName).to.eql(pm.variables.get('CachingServer_post_name'));",
													"\tpm.expect(jsonData.Id).to.eql(pm.variables.get('CachingServer_get_id'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/CachingServers({{CachingServer_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CachingServers({{CachingServer_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch CachingServers Class",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a259a898-1b93-407c-956b-23df351ac88e",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"ServerName\": \"POSTMANPATCH\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/CachingServers({{CachingServer_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CachingServers({{CachingServer_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put CachingServers Class",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a0985247-5388-4c34-a49a-a0ab51e7426a",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Id\":{{CachingServer_get_id}},\n  \"ServerName\": \"POSTMANPUT\",\n  \"ActionUrl\": \"http://rnddev01-win7/Maint_UI/\",\n  \"RetryMaxAttemts\": 1,\n  \"RetryInterval\": 2\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/CachingServers({{CachingServer_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CachingServers({{CachingServer_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All CachingServers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c4b29aaa-bf57-4c39-bd6d-49e8d635ccfb",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('ServerName');",
													"    pm.expect(jsonData.value[0]).to.have.property('ActionUrl');",
													"    pm.expect(jsonData.value[0]).to.have.property('RetryMaxAttemts');",
													"    pm.expect(jsonData.value[0]).to.have.property('RetryInterval');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/CachingServers",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CachingServers"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Delete CachingServers Class",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44acf476-4b67-4d91-94ab-1ea819773caa",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/CachingServers({{CachingServer_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CachingServers({{CachingServer_get_id}})"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ConditionalMacros",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "Post ConditionalMacros",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "22ea0e3e-edc4-48a4-9615-5ca0346dc627",
												"exec": [
													"var Name = \"COND_Macro_\"+Date.now()",
													"pm.globals.set(\"ConditionalMacros_post_name\", Name);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "04644fcf-d024-4d0c-a305-2329c14b0159",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Condition');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('ConditionalMacros_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Name\": \"{{ConditionalMacros_post_name}}\",\n    \"Description\": \"\",\n    \"Condition\": \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>  <macifelse>    <if seq=\\\"0\\\">      <!-->Var 1 as static or another macro-->      <var1>@DOCFLD|AI_Release_Data@</var1>      <!-->operator depends on the dtype       Available dtypes:(opr)       STRING:(=,!=,Begins With,Ends With,Contains,IN)       NUMBER:(=,!=,<,>,<=,>=,IN)       DECIMAL:(=,!=,<,>,<=,>=,IN)       DATETIME:(=,!=,<,>,<=,>=,IN,Year,Month,Day,Minute,Second,MilliSecond)       LENGTH:(=,!=,<,>,<=,>=,IN)       BOOLEAN:(AND,OR)          -->      <opr>!=</opr>      <!--Compare with var1-->      <var2></var2>      <!-- Return value-->      <then>True</then>      <!-->Avaliable dtypes       STRING       NUMBER       DECIMAL       DATETIME       LENGTH       BOOLEAN              -->      <dtype></dtype>    </if>      <else>      <then>False</then>    </else>  </macifelse>\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ConditionalMacros",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ConditionalMacros"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ConditionalMacros with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dc545993-36d9-4660-be85-338aec435ec4",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Condition');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('ConditionalMacros_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ConditionalMacros('{{ConditionalMacros_post_name}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ConditionalMacros('{{ConditionalMacros_post_name}}')"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Patch ConditionalMacros",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9c1e0d7-0022-4664-b58f-4a9f9bbb8f1b",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Description\": \"Macro Description Postman Patch update\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ConditionalMacros('{{ConditionalMacros_post_name}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ConditionalMacros('{{ConditionalMacros_post_name}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put ConditionalMacros",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e10c9350-03b9-405f-934e-7c1214e78af7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "35ce9825-1819-4567-9367-5b25331b7a62",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Name\": \"{{ConditionalMacros_post_name}}\",\n    \"Description\": \"Postman put - Conditional Macros\",\n    \"Condition\": \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\r\\n<macifelse>\\r\\n\\t<if seq=\\\"0\\\">\\r\\n\\t\\t<!-->Var 1 as static or another macro-->\\r\\n\\t\\t<var1>@DOCTYPEID</var1>\\r\\n\\t\\t<!-->operator depends on the dtype\\r\\n     Available dtypes:(opr)\\r\\n     STRING:(=,!=,Begins With,Ends With,Contains,IN)\\r\\n     NUMBER:(=,!=,<,>,<=,>=,IN)\\r\\n     DECIMAL:(=,!=,<,>,<=,>=,IN)\\r\\n     DATETIME:(=,!=,<,>,<=,>=,IN,Year,Month,Day,Minute,Second,MilliSecond)\\r\\n     LENGTH:(=,!=,<,>,<=,>=,IN)\\r\\n     BOOLEAN:(AND,OR)    \\r\\n    -->\\r\\n\\t\\t<opr>=</opr>\\r\\n\\t\\t<!--Compare with var1-->\\r\\n\\t\\t<var2>100018</var2>\\r\\n\\t\\t<!-- Return value-->\\r\\n\\t\\t<then>TRUE</then>\\r\\n\\t\\t<!-->Avaliable dtypes\\r\\n     STRING\\r\\n     NUMBER\\r\\n     DECIMAL\\r\\n     DATETIME\\r\\n     LENGTH\\r\\n     BOOLEAN        \\r\\n    -->\\r\\n\\t\\t<dtype>STRING</dtype>\\r\\n\\t</if>\\r\\n\\t<else>\\r\\n\\t\\t<then>FALSE</then>\\r\\n\\t</else>\\r\\n</macifelse>\"\n}\n\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/ConditionalMacros('{{ConditionalMacros_post_name}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ConditionalMacros('{{ConditionalMacros_post_name}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All ConditionalMacros",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c724e71-8e1d-486b-9a7d-132de2e241d3",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('Condition');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ConditionalMacros",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ConditionalMacros"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Delete ConditionalMacros",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "30c6155f-1dfd-4eb8-9059-cd1739c962f2",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ConditionalMacros('{{ConditionalMacros_post_name}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ConditionalMacros('{{ConditionalMacros_post_name}}')"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Configurations",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "Post Configurations with Children",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d7dfbf89-2cd6-4614-b0a8-c5e647686866",
												"exec": [
													"var Name = \"CONFIG_NAME_\"+Date.now();",
													"pm.globals.set(\"ParamName_post_paramname\", Name);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7edf5950-8e0d-4918-af58-5c2eaaf5bca2",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('ParamName');",
													"    pm.expect(jsonData).to.have.property('ParamType');",
													"    pm.expect(jsonData).to.have.property('Value');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('Category');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.ParamName).to.eql(pm.variables.get('ParamName_post_paramname'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											},
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ParamName\": \"{{ParamName_post_paramname}}\",\r\n  \"Value\": \"Test Value\",\r\n  \"Description\": \"Add new configuration\",\r\n  \"ParamType\": 0,\r\n  \"Category\": \"Cat A\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Configurations",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Configurations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Configurations with Children",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7a2a0cc-e374-49b8-bba0-2467a65ffed3",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('ParamName');",
													"    pm.expect(jsonData).to.have.property('ParamType');",
													"    pm.expect(jsonData).to.have.property('Value');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('Category');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.ParamName).to.eql(pm.variables.get('ParamName_post_paramname'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/Configurations('{{ParamName_post_paramname}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Configurations('{{ParamName_post_paramname}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Configurations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ecf7341-eb71-41b2-ba18-27a32873a28e",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Description\": \"Postman patch - Configurations\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Configurations('{{ParamName_post_paramname}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Configurations('{{ParamName_post_paramname}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Configurations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "68ef4683-d5ef-4a07-bb6e-f3be053b6832",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ParamName\": \"{{ParamName_post_paramname}}\",\r\n  \"Value\": \"Test Value\",\r\n  \"Description\": \"Postman Put - Configurations\",\r\n  \"ParamType\": 0,\r\n  \"Category\": \"Cat A\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Configurations('{{ParamName_post_paramname}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Configurations('{{ParamName_post_paramname}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Configurations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "53e09b29-22d0-45c5-b6da-dd86cef340c9",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('ParamName');",
													"    pm.expect(jsonData.value[0]).to.have.property('ParamType');",
													"    pm.expect(jsonData.value[0]).to.have.property('Value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('Category');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											},
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/Configurations",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Configurations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Configurations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b83682b9-7ae9-4917-88af-286c3d7d60b2",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/Configurations('{{ParamName_post_paramname}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Configurations('{{ParamName_post_paramname}}')"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "CustomMacros",
					"item": [
						{
							"name": "Test-Happy path",
							"item": [
								{
									"name": "Create new CustomMacros",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('Assembly');",
													"    pm.expect(jsonData).to.have.property('Class');",
													"    pm.expect(jsonData).to.have.property('AdminUrl');",
													"    pm.expect(jsonData).to.have.property('Config');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('CustomMacro_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"CustomMacro_get_id\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"var Name = \"CUSTOM_MACRO_\"+Date.now();",
													"pm.globals.set(\"CustomMacro_post_name\", Name);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Name\": \"{{CustomMacro_post_name}}\",\r\n  \"Description\": \"Test macro Description Postman\",\r\n  \"Assembly\":\"{{CustomMacro_post_name}}\",\r\n  \"Class\":\"{{CustomMacro_post_name}}\",\r\n  \"AdminUrl\": \"\",\r\n  \"Config\": null\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/CustomMacros",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CustomMacros"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "Get CustomMacros(Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('Assembly');",
													"    pm.expect(jsonData).to.have.property('Class');",
													"    pm.expect(jsonData).to.have.property('AdminUrl');",
													"    pm.expect(jsonData).to.have.property('Config');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('CustomMacro_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"CustomMacro_get_id\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/CustomMacros('{{CustomMacro_post_name}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CustomMacros('{{CustomMacro_post_name}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch CustomMacros",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Description\": \"Patch custom macros\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/CustomMacros('{{CustomMacro_post_name}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CustomMacros('{{CustomMacro_post_name}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put CustomMacros",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Id\":{{CustomMacro_get_id}},\r\n  \"Name\": \"{{CustomMacro_post_name}}\",\r\n  \"Description\": \"put custom macros\",\r\n  \"Assembly\":\"{{CustomMacro_post_name}}\",\r\n  \"Class\":\"{{CustomMacro_post_name}}\",\r\n  \"AdminUrl\": \"\",\r\n  \"Config\": null\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/CustomMacros('{{CustomMacro_post_name}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CustomMacros('{{CustomMacro_post_name}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All CustomMacros",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('Assembly');",
													"    pm.expect(jsonData.value[0]).to.have.property('Class');",
													"    pm.expect(jsonData.value[0]).to.have.property('AdminUrl');",
													"    pm.expect(jsonData.value[0]).to.have.property('Config');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/CustomMacros",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CustomMacros"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "DataTableProviderTypes",
					"item": [
						{
							"name": "Post DataTableProviderTypes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "876f29b0-7c5e-4804-a199-eb5e93f44159",
										"exec": [
											"var Name = \"DTPT_Name_\"+Date.now()",
											"pm.globals.set(\"DataTableProviderTypes_post_name\", Name);",
											"",
											"var id = Math.floor(Math.random()*1000000)",
											"pm.globals.set(\"DataTableProviderTypes_get_id\", id);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b3ac36f4-361d-43bb-8699-0cd144955408",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Verify Response status code and Response body.', function() {",
											"    ",
											"    //Verify response status code.",
											"    pm.response.to.have.status(201);",
											"    ",
											"    //Verify all fields are present in response body.",
											"    pm.expect(jsonData).to.have.property('Id');",
											"    pm.expect(jsonData).to.have.property('Name');",
											"    pm.expect(jsonData).to.have.property('Description');",
											"",
											"    //Verify correct values are present in response body.",
											"    pm.expect(jsonData.Name).to.eql(pm.variables.get('DataTableProviderTypes_post_name'));",
											"    pm.expect(jsonData.Id).to.eql(pm.variables.get('DataTableProviderTypes_get_id'));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
									},
									{
										"key": "OData-Version",
										"value": "4.0"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"Id\": {{DataTableProviderTypes_get_id}},\n\t\"Name\": \"{{DataTableProviderTypes_post_name}}\",\n\t\"Description\": \"Postman Post\"\n}"
								},
								"url": {
									"raw": "{{SiteURL}}api/DataTableProviderTypes",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"DataTableProviderTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get DataTableProviderTypes with key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d9957d8-e051-4e47-8113-0835bb2b449e",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Verify Response status code and Response body.', function() {",
											"    ",
											"    //Verify response status code.",
											"    pm.response.to.have.status(200);",
											"    ",
											"    //Verify all fields are present in response body.",
											"    pm.expect(jsonData).to.have.property('Id');",
											"    pm.expect(jsonData).to.have.property('Name');",
											"    pm.expect(jsonData).to.have.property('Description');",
											"",
											"    //Verify correct values are present in response body.",
											"    pm.expect(jsonData.Name).to.eql(pm.variables.get('DataTableProviderTypes_post_name'));",
											"    pm.expect(jsonData.Id).to.eql(pm.variables.get('DataTableProviderTypes_get_id'));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "OData-Version",
										"value": "4.0"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization-Token",
										"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
									}
								],
								"url": {
									"raw": "{{SiteURL}}api/DataTableProviderTypes({{DataTableProviderTypes_get_id}})",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"DataTableProviderTypes({{DataTableProviderTypes_get_id}})"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch DataTableProviderTypes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b2b1529-0cf5-41ed-aa5e-96a140502f61",
										"exec": [
											"pm.test(\"Verify Response status code and Response body.\", function () {",
											"    ",
											"    //Verify response status code.",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
									},
									{
										"key": "OData-Version",
										"value": "4.0"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"Description\":\"Postman patch - Data Table Provider Types\"\n}"
								},
								"url": {
									"raw": "{{SiteURL}}api/DataTableProviderTypes({{DataTableProviderTypes_get_id}})",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"DataTableProviderTypes({{DataTableProviderTypes_get_id}})"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put DataTableProviderTypes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d790bb7-7c1d-4171-907b-f693f487b4bd",
										"exec": [
											"pm.test(\"Verify Response status code and Response body.\", function () {",
											"    ",
											"    //Verify response status code.",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "OData-Version",
										"value": "4.0"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization-Token",
										"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Id\":{{DataTableProviderTypes_get_id}},\n  \"Name\": \"{{DataTableProviderTypes_post_name}}\",\n  \"Description\": \"Postman Put - Data table provider types\"\n}"
								},
								"url": {
									"raw": "{{SiteURL}}api/DataTableProviderTypes({{DataTableProviderTypes_get_id}})",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"DataTableProviderTypes({{DataTableProviderTypes_get_id}})"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All DataTableProviderTypes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03fcdf10-e340-4b4d-928f-0c4f28b4d107",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify Response status code and Response body.\", function () {",
											"    ",
											"    //Verify response status code.",
											"    pm.response.to.have.status(200);",
											"    ",
											"    //Verify all fields are present in response body.",
											"    pm.expect(jsonData).to.have.property('value');",
											"    pm.expect(jsonData.value[0]).to.have.property('Id');",
											"    pm.expect(jsonData.value[0]).to.have.property('Name');",
											"    pm.expect(jsonData.value[0]).to.have.property('Description');",
											"",
											"    //Verify response body contains collection of categories",
											"    pm.expect(jsonData.value.length).to.be.greaterThan(0)",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "OData-Version",
										"value": "4.0"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization-Token",
										"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
									}
								],
								"url": {
									"raw": "{{SiteURL}}api/DataTableProviderTypes",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"DataTableProviderTypes"
									]
								},
								"description": "Retrieves all DocType Property Interfaces records"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "EmailNotifications",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Post EmailNotifications",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "239fdb9d-d558-439e-84f1-603e8251177b",
												"exec": [
													"var Name = \"EMAIL_TYPE_\"+Date.now();",
													"pm.globals.set(\"EmailNotification_post_name\", Name);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "01cb327e-4795-4b87-9167-dc59e78bda03",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('EmailType');",
													"    pm.expect(jsonData).to.have.property('IsDisabled');",
													"    pm.expect(jsonData).to.have.property('From');",
													"    pm.expect(jsonData).to.have.property('ReplyTo');",
													"    pm.expect(jsonData).to.have.property('ReturnReceiptTo');",
													"    pm.expect(jsonData).to.have.property('Subject');",
													"    pm.expect(jsonData).to.have.property('Body');",
													"    pm.expect(jsonData).to.have.property('BodyFormat');",
													"    pm.expect(jsonData).to.have.property('Priority');",
													"    pm.expect(jsonData).to.have.property('DeferredDelivery');",
													"    pm.expect(jsonData).to.have.property('SendAllbcc');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.EmailType).to.eql(pm.variables.get('EmailNotification_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"EmailType\": \"{{EmailNotification_post_name}}\",\n  \"From\": \"@CURUSEREMAIL\",\n  \"ReplyTo\": \"@CURUSEREMAIL\",\n  \"ReturnReceiptTo\": \"@CURUSEREMAIL\",\n  \"To\": \"@CustVar|ProductSupportEmail@\",\n  \"Subject\": \"[EPM - Desktop-Integrator] Error - @MyComputerName@ - @CURUSERNAME\",\n  \"Body\": \"Message:\",\n  \"BodyFormat\": 0,\n  \"Priority\": 2,\n  \"DeferredDelivery\": \"@CURUSEREMAIL\",\n  \"SendAllbcc\": 0,\n  \"IsDisabled\": true\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/EmailNotifications",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailNotifications"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All EmailNotifications with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0019abb0-65a1-46a1-866b-399eb1006252",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('EmailType');",
													"    pm.expect(jsonData).to.have.property('IsDisabled');",
													"    pm.expect(jsonData).to.have.property('From');",
													"    pm.expect(jsonData).to.have.property('ReplyTo');",
													"    pm.expect(jsonData).to.have.property('ReturnReceiptTo');",
													"    pm.expect(jsonData).to.have.property('Subject');",
													"    pm.expect(jsonData).to.have.property('Body');",
													"    pm.expect(jsonData).to.have.property('BodyFormat');",
													"    pm.expect(jsonData).to.have.property('Priority');",
													"    pm.expect(jsonData).to.have.property('DeferredDelivery');",
													"    pm.expect(jsonData).to.have.property('SendAllbcc');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.EmailType).to.eql(pm.variables.get('EmailNotification_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/EmailNotifications('{{EmailNotification_post_name}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailNotifications('{{EmailNotification_post_name}}')"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Patch EmailNotifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "538f90c1-52b9-411d-be22-296d5b7798f2",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Body\": \"Message: Postman Patch\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/EmailNotifications('{{EmailNotification_post_name}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailNotifications('{{EmailNotification_post_name}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put EmailNotifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9ea6cc1-0962-4274-89ce-c38ffdd69543",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"EmailType\": \"{{EmailNotification_post_name}}\",\n  \"From\": \"@CURUSEREMAIL\",\n  \"ReplyTo\": \"@CURUSEREMAIL\",\n  \"ReturnReceiptTo\": \"@CURUSEREMAIL\",\n  \"To\": \"@CustVar|ProductSupportEmail@\",\n  \"Subject\": \"[EPM - Desktop-Integrator] Error - @MyComputerName@ - @CURUSERNAME\",\n  \"Body\": \"Postman Put\",\n  \"BodyFormat\": 0,\n  \"Priority\": 2,\n  \"DeferredDelivery\": \"@CURUSEREMAIL\",\n  \"SendAllbcc\": 0,\n  \"IsDisabled\": true\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/EmailNotifications('{{EmailNotification_post_name}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailNotifications('{{EmailNotification_post_name}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All EmailNotifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5dcbb089-19bf-40d7-a6b5-0f536886eed1",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('EmailType');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsDisabled');",
													"    pm.expect(jsonData.value[0]).to.have.property('From');",
													"    pm.expect(jsonData.value[0]).to.have.property('ReplyTo');",
													"    pm.expect(jsonData.value[0]).to.have.property('ReturnReceiptTo');",
													"    pm.expect(jsonData.value[0]).to.have.property('Subject');",
													"    pm.expect(jsonData.value[0]).to.have.property('Body');",
													"    pm.expect(jsonData.value[0]).to.have.property('BodyFormat');",
													"    pm.expect(jsonData.value[0]).to.have.property('Priority');",
													"    pm.expect(jsonData.value[0]).to.have.property('DeferredDelivery');",
													"    pm.expect(jsonData.value[0]).to.have.property('SendAllbcc');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/EmailNotifications",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailNotifications"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Delete EmailNotifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2b458db-e149-4e04-842e-aeb369548350",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/EmailNotifications('{{EmailNotification_post_name}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailNotifications('{{EmailNotification_post_name}}')"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "EmailOffice365Configurations",
					"item": [
						{
							"name": "Post EmailOffice365Configurations with Children",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79b37f5c-fdcc-4c47-b831-26a14e40a658",
										"exec": [
											"var jsonData;",
											"",
											"pm.test('Verify Response status code and Response body.', function() {",
											"    ",
											"    //Initialize JsonBody",
											"    jsonData = pm.response.json();",
											"    ",
											"    //Verify response status code.",
											"    pm.response.to.have.status(201);",
											"    ",
											"    //Verify all fields are present in response body.",
											"    pm.expect(jsonData).to.have.property('Id');",
											"    pm.expect(jsonData).to.have.property('Email');",
											"    pm.expect(jsonData).to.have.property('ExchangeVersion');",
											"    pm.expect(jsonData).to.have.property('Url');",
											"    pm.expect(jsonData).to.have.property('Pwd');",
											"    pm.expect(jsonData).to.have.property('CreatedById');",
											"    pm.expect(jsonData).to.have.property('CreatedDate');",
											"    pm.expect(jsonData).to.have.property('ModifiedById');",
											"    pm.expect(jsonData).to.have.property('ModifiedDate');",
											"    ",
											"    //Verify correct values are present in response body.",
											"    pm.expect(jsonData.CreatedById).not.eql(null);",
											"    pm.expect(jsonData.CreatedDate).not.eql(null);",
											"    pm.expect(jsonData.ModifiedById).not.eql(null);",
											"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
											"    ",
											"    setData();",
											"});",
											"",
											"function setData() {",
											"    var id = jsonData.Id;",
											"    pm.globals.set(\"EmailOffice365Configuration_get_id\", id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
									},
									{
										"key": "OData-Version",
										"value": "4.0"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Email\": \"postman@savanainc.com\",\n  \"ExchangeVersion\": \"Exchange2007_SP1\",\n  \"Url\": \"http://test/test.xyz\",\n  \"Pwd\": \"Test@123\"\n}"
								},
								"url": {
									"raw": "{{SiteURL}}api/EmailOffice365Configurations",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"EmailOffice365Configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get EmailOffice365Configurations with children",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fac75de7-5688-4c2d-8ba6-9c8cee10195f",
										"exec": [
											"var jsonData;",
											"",
											"pm.test('Verify Response status code and Response body.', function() {",
											"    ",
											"    //Initialize JsonBody",
											"    jsonData = pm.response.json();",
											"    ",
											"    //Verify response status code.",
											"    pm.response.to.have.status(200);",
											"    ",
											"    //Verify all fields are present in response body.",
											"    pm.expect(jsonData).to.have.property('Id');",
											"    pm.expect(jsonData).to.have.property('Email');",
											"    pm.expect(jsonData).to.have.property('ExchangeVersion');",
											"    pm.expect(jsonData).to.have.property('Url');",
											"    pm.expect(jsonData).to.have.property('Pwd');",
											"    pm.expect(jsonData).to.have.property('CreatedById');",
											"    pm.expect(jsonData).to.have.property('CreatedDate');",
											"    pm.expect(jsonData).to.have.property('ModifiedById');",
											"    pm.expect(jsonData).to.have.property('ModifiedDate');",
											"    ",
											"    //Verify correct values are present in response body.",
											"\tpm.expect(jsonData.Id).to.eql(pm.variables.get('EmailOffice365Configuration_get_id'));",
											"    pm.expect(jsonData.CreatedById).not.eql(null);",
											"    pm.expect(jsonData.CreatedDate).not.eql(null);",
											"    pm.expect(jsonData.ModifiedById).not.eql(null);",
											"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "OData-Version",
										"value": "4.0"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization-Token",
										"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
									}
								],
								"url": {
									"raw": "{{SiteURL}}api/EmailOffice365Configurations({{EmailOffice365Configuration_get_id}})",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"EmailOffice365Configurations({{EmailOffice365Configuration_get_id}})"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch EmailOffice365Configurations Class",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32f3e574-3a28-4dba-ad33-03bc04c37933",
										"exec": [
											"pm.test('Verify Response status code and Response body.', function() {\r",
											"    \r",
											"    //Verify response status code.\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
									},
									{
										"key": "OData-Version",
										"value": "4.0"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n \"Email\": \"postmanPatch@savanainc.com\"\n}"
								},
								"url": {
									"raw": "{{SiteURL}}api/EmailOffice365Configurations({{EmailOffice365Configuration_get_id}})",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"EmailOffice365Configurations({{EmailOffice365Configuration_get_id}})"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put EmailOffice365Configurations Class",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88eb9354-56ff-4fb0-a1fb-22bd6aaff257",
										"exec": [
											"pm.test('Verify Response status code and Response body.', function() {\r",
											"    \r",
											"    //Verify response status code.\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "OData-Version",
										"value": "4.0"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization-Token",
										"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Id\":{{EmailOffice365Configuration_get_id}},\n  \"Email\": \"postman@savanainc.com\",\n  \"ExchangeVersion\": \"Exchange2007_SP1\",\n  \"Url\": \"http://test/test.xyz\",\n  \"Pwd\": \"Test@123\"\n}"
								},
								"url": {
									"raw": "{{SiteURL}}api/EmailOffice365Configurations({{EmailOffice365Configuration_get_id}})",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"EmailOffice365Configurations({{EmailOffice365Configuration_get_id}})"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All EmailOffice365Configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1108b4f3-9c45-4881-9ee6-2f268a7e300c",
										"exec": [
											"var jsonData;",
											"",
											"pm.test('Verify Response status code and Response body.', function() {",
											"    ",
											"    //Initialize JsonBody",
											"    jsonData = pm.response.json();",
											"    ",
											"    //Verify response status code.",
											"    pm.response.to.have.status(200);",
											"    ",
											"    //Verify all fields are present in response body.",
											"    pm.expect(jsonData).to.have.property('value');",
											"    pm.expect(jsonData.value[0]).to.have.property('Id');",
											"    pm.expect(jsonData.value[0]).to.have.property('Email');",
											"    pm.expect(jsonData.value[0]).to.have.property('ExchangeVersion');",
											"    pm.expect(jsonData.value[0]).to.have.property('Url');",
											"    pm.expect(jsonData.value[0]).to.have.property('Pwd');",
											"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
											"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
											"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
											"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
											"    ",
											"    //Verify response body contains collection of categories",
											"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "OData-Version",
										"value": "4.0"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization-Token",
										"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
									}
								],
								"url": {
									"raw": "{{SiteURL}}api/EmailOffice365Configurations",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"EmailOffice365Configurations"
									]
								},
								"description": "Retrieves all doc table records"
							},
							"response": []
						},
						{
							"name": "Delete EmailOffice365Configurations Class",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59b3a0d8-7a1d-4809-b14e-00469f3e8f68",
										"exec": [
											"pm.test('Verify Response status code and Response body.', function() {\r",
											"    \r",
											"    //Verify response status code.\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "OData-Version",
										"value": "4.0"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization-Token",
										"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{SiteURL}}api/EmailOffice365Configurations({{EmailOffice365Configuration_get_id}})",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"EmailOffice365Configurations({{EmailOffice365Configuration_get_id}})"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GlobalVariables",
					"item": [
						{
							"name": "Test- Happy Path",
							"item": [
								{
									"name": "Post GlobalVariables with Children",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0d9c1d21-731f-41fa-b8dd-6e5dddb3d921",
												"exec": [
													"var Name = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 9);\r",
													"pm.globals.set(\"Globalvariable_post_name\", Name);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "709cfc1c-2289-43c1-962a-836c37e8ad88",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Accessibility');",
													"    pm.expect(jsonData).to.have.property('Value');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('Globalvariable_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var Id = jsonData.Id;",
													"    pm.globals.set(\"Globalvariable_get_id\", Id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Name\": \"{{Globalvariable_post_name}}\",\r\n\t\"Description\": \"string\",\r\n\t\"Value\": \"string\",\r\n\t\"Type\": 0,\r\n\t\"Accessibility\": \"Public\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/GlobalVariables",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"GlobalVariables"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get GlobalVariables with children",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "49b7f4ed-3b12-46b8-adc3-d8f6ff28a6a7",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Accessibility');",
													"    pm.expect(jsonData).to.have.property('Value');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('Globalvariable_post_name'));",
													"\tpm.expect(jsonData.Id).to.eql(pm.variables.get('Globalvariable_get_id'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/GlobalVariables({{Globalvariable_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"GlobalVariables({{Globalvariable_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch GlobalVariables Class",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86206a83-ad5f-4cb8-84c8-5504974fea1c",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Description\": \"Postman Post Patch Test\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/GlobalVariables({{Globalvariable_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"GlobalVariables({{Globalvariable_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put GlobalVariables Class",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c53e9f11-c9f0-4529-a79c-5cbdb75ab002",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Id\":{{Globalvariable_get_id}},\n\t\"Name\": \"{{Globalvariable_post_name}}\",\n\t\"Description\": \"string\",\n\t\"Value\": \"string\",\n\t\"Type\": 0,\n\t\"Accessibility\": \"Public\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/GlobalVariables({{Globalvariable_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"GlobalVariables({{Globalvariable_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All GlobalVariables",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fea1da3-109e-4b39-8e50-a696e6b08a7a",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('Accessibility');",
													"    pm.expect(jsonData.value[0]).to.have.property('Value');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/GlobalVariables",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"GlobalVariables"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Holidays",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "Post Holidays",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "97e25612-08c1-4f29-8c38-0c46f5f11f5e",
												"exec": [
													"var SchemeName = \"Holiday_Scheme_Name_\"+Date.now();",
													"pm.globals.set(\"HolidayScheme_post_name\", SchemeName);",
													"",
													"var date = \"2020-12-31\"",
													"pm.globals.set(\"Holiday_post_date\", date);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5f848047-27d6-4610-82d3-2f91cdcdc122",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('SchemeId');",
													"    pm.expect(jsonData).to.have.property('Date');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Date).to.have.string(pm.variables.get('Holiday_post_date'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"Holiday_get_id\", id);",
													"    ",
													"    var schemeId = jsonData.SchemeId;",
													"    pm.globals.set(\"Holiday_get_SchemeId\", schemeId);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"HolidayScheme\": {\r\n\t\t\"Name\": \"{{HolidayScheme_post_name}}\",\r\n\t\t\"Description\": \"India Holiday Schedule\",\r\n\t\t\"WorkDays\": 5\r\n\t},\r\n\t\"Date\": \"{{Holiday_post_date}}\",\r\n\t\"Description\": \"New Year Day\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Holidays",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Holidays"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Holidays with Childrens",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17f8bd16-6602-4522-b52e-e1e07ce561b1",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('SchemeId');",
													"    pm.expect(jsonData).to.have.property('Date');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Date).to.have.string(pm.variables.get('Holiday_post_date'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/Holidays(SchemeId={{Holiday_get_SchemeId}},Date={{Holiday_post_date}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Holidays(SchemeId={{Holiday_get_SchemeId}},Date={{Holiday_post_date}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Holidays",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57400dd5-1120-4c8f-a808-0f33971d2289",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"Description\": \"Postman patch - Holidays\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Holidays(SchemeId={{Holiday_get_SchemeId}},Date={{Holiday_post_date}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Holidays(SchemeId={{Holiday_get_SchemeId}},Date={{Holiday_post_date}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Holidays",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9df4eee-bffe-480a-8d77-b950207a2261",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Id\": {{Holiday_get_id}},\r\n  \"SchemeId\": {{Holiday_get_SchemeId}},\r\n  \"Date\": \"{{Holiday_post_date}}\",\r\n  \"Description\": \"Postman put - Holidays\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Holidays(SchemeId={{Holiday_get_SchemeId}},Date={{Holiday_post_date}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Holidays(SchemeId={{Holiday_get_SchemeId}},Date={{Holiday_post_date}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Holidays",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0566aed3-d5c7-4e99-b2ed-19132b6a2a22",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Date');",
													"    pm.expect(jsonData.value[0]).to.have.property('SchemeId');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/Holidays",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Holidays"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Holidays",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "830f8d15-f092-45ae-8a78-8f4f04c561e2",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/Holidays(SchemeId={{Holiday_get_SchemeId}},Date={{Holiday_post_date}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Holidays(SchemeId={{Holiday_get_SchemeId}},Date={{Holiday_post_date}})"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "HolidaySchemes",
					"item": [
						{
							"name": "Post HolidaySchemes  with Children",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a3b6b970-06b6-4dcd-be42-1d44a554c5c0",
										"exec": [
											"var Name = \"HolidayScheme_Name_\"+Date.now();",
											"pm.globals.set(\"HolidayScheme_post_name\", Name);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5ff518bf-7c5a-4f0d-b5b8-07dcf5d66299",
										"exec": [
											"var jsonData;",
											"",
											"pm.test('Verify Response status code and Response body.', function() {",
											"    ",
											"    //Initialize JsonBody",
											"    jsonData = pm.response.json();",
											"    ",
											"    //Verify response status code.",
											"    pm.response.to.have.status(201);",
											"    ",
											"    //Verify all fields are present in response body.",
											"    pm.expect(jsonData).to.have.property('Id');",
											"    pm.expect(jsonData).to.have.property('Name');",
											"    pm.expect(jsonData).to.have.property('Description');",
											"    pm.expect(jsonData).to.have.property('WorkDays');",
											"    pm.expect(jsonData).to.have.property('CreatedById');",
											"    pm.expect(jsonData).to.have.property('CreatedDate');",
											"    pm.expect(jsonData).to.have.property('ModifiedById');",
											"    pm.expect(jsonData).to.have.property('ModifiedDate');",
											"    ",
											"    //Verify correct values are present in response body.",
											"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('HolidayScheme_post_name'));",
											"    pm.expect(jsonData.CreatedById).not.eql(null);",
											"    pm.expect(jsonData.CreatedDate).not.eql(null);",
											"    pm.expect(jsonData.ModifiedById).not.eql(null);",
											"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
											"    ",
											"    setData();",
											"});",
											"",
											"function setData() {",
											"    var id = jsonData.Id;",
											"    pm.globals.set(\"HolidayScheme_get_id\", id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
									},
									{
										"key": "OData-Version",
										"value": "4.0"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"{{HolidayScheme_post_name}}\",\n  \"Description\": \"India Holiday Schedule\",\n  \"WorkDays\": 5\n}"
								},
								"url": {
									"raw": "{{SiteURL}}api/HolidaySchemes",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"HolidaySchemes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get HolidaySchemes with children",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ab07cbd-4fd2-458d-bc15-098913b4bc40",
										"exec": [
											"var jsonData;",
											"",
											"pm.test('Verify Response status code and Response body.', function() {",
											"    ",
											"    //Initialize JsonBody",
											"    jsonData = pm.response.json();",
											"    ",
											"    //Verify response status code.",
											"    pm.response.to.have.status(200);",
											"    ",
											"    //Verify all fields are present in response body.",
											"    pm.expect(jsonData).to.have.property('Id');",
											"    pm.expect(jsonData).to.have.property('Name');",
											"    pm.expect(jsonData).to.have.property('Description');",
											"    pm.expect(jsonData).to.have.property('WorkDays');",
											"    pm.expect(jsonData).to.have.property('CreatedById');",
											"    pm.expect(jsonData).to.have.property('CreatedDate');",
											"    pm.expect(jsonData).to.have.property('ModifiedById');",
											"    pm.expect(jsonData).to.have.property('ModifiedDate');",
											"    ",
											"    //Verify correct values are present in response body.",
											"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('HolidayScheme_post_name'));",
											"\tpm.expect(jsonData.Id).to.eql(pm.variables.get('HolidayScheme_get_id'));",
											"    pm.expect(jsonData.CreatedById).not.eql(null);",
											"    pm.expect(jsonData.CreatedDate).not.eql(null);",
											"    pm.expect(jsonData.ModifiedById).not.eql(null);",
											"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "OData-Version",
										"value": "4.0"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization-Token",
										"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
									}
								],
								"url": {
									"raw": "{{SiteURL}}api/HolidaySchemes({{HolidayScheme_get_id}})",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"HolidaySchemes({{HolidayScheme_get_id}})"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch HolidaySchemes Class",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c42438e6-2f94-4c7c-ada6-0482ab530e0d",
										"exec": [
											"pm.test('Verify Response status code and Response body.', function() {\r",
											"    \r",
											"    //Verify response status code.\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
									},
									{
										"key": "OData-Version",
										"value": "4.0"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n \"Description\": \"Postman patch - Holiday Scheme\"\n}"
								},
								"url": {
									"raw": "{{SiteURL}}api/HolidaySchemes({{HolidayScheme_get_id}})",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"HolidaySchemes({{HolidayScheme_get_id}})"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put HolidaySchemes Class",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef709cae-04e0-462a-99ad-41cdc20e04b4",
										"exec": [
											"pm.test('Verify Response status code and Response body.', function() {\r",
											"    \r",
											"    //Verify response status code.\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "OData-Version",
										"value": "4.0"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization-Token",
										"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Id\":{{HolidayScheme_get_id}},\n  \"Name\": \"{{HolidayScheme_post_name}}\",\n  \"Description\": \"India Holiday Schedule\",\n  \"WorkDays\": 5\n}"
								},
								"url": {
									"raw": "{{SiteURL}}api/HolidaySchemes({{HolidayScheme_get_id}})",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"HolidaySchemes({{HolidayScheme_get_id}})"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All HolidaySchemes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "257014ae-6aec-4e04-b6f2-f9ded8065b88",
										"exec": [
											"var jsonData;",
											"",
											"pm.test('Verify Response status code and Response body.', function() {",
											"    ",
											"    //Initialize JsonBody",
											"    jsonData = pm.response.json();",
											"    ",
											"    //Verify response status code.",
											"    pm.response.to.have.status(200);",
											"    ",
											"    //Verify all fields are present in response body.",
											"    pm.expect(jsonData).to.have.property('value');",
											"    pm.expect(jsonData.value[0]).to.have.property('Id');",
											"    pm.expect(jsonData.value[0]).to.have.property('Name');",
											"    pm.expect(jsonData.value[0]).to.have.property('Description');",
											"    pm.expect(jsonData.value[0]).to.have.property('WorkDays');",
											"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
											"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
											"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
											"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
											"    ",
											"    //Verify response body contains collection of categories",
											"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "OData-Version",
										"value": "4.0"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization-Token",
										"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
									}
								],
								"url": {
									"raw": "{{SiteURL}}api/HolidaySchemes",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"HolidaySchemes"
									]
								},
								"description": "Retrieves all doc table records"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "HybridFields",
					"item": [
						{
							"name": "Test-Happy path",
							"item": [
								{
									"name": "Post HybridFields with Children",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f584075b-a76b-4e0d-b576-e6ff114c7672",
												"exec": [
													"var Name = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 9);\r",
													"pm.globals.set(\"Hybridfields_name_post\", Name);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5b5d681a-6e87-4b2b-bb5a-e4c1c79cbdba",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('ViewText');",
													"    pm.expect(jsonData).to.have.property('ViewHelpText');",
													"    pm.expect(jsonData).to.have.property('TableName');",
													"    pm.expect(jsonData).to.have.property('WhereText');",
													"    pm.expect(jsonData).to.have.property('ReturnRows');",
													"    pm.expect(jsonData).to.have.property('SeparateBy');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('Hybridfields_name_post'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var Id = jsonData.Id;",
													"    pm.globals.set(\"Hybridfields_get_id\", Id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Name\": \"{{Hybridfields_name_post}}\",\n\t\"ViewText\": \"string\",\n\t\"ViewHelpText\": \"string\",\n\t\"TableName\": \"string\",\n\t\"WhereText\": \"string\",\n\t\"ReturnRows\": 0,\n\t\"SeparateBy\": \"string\"\n}\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/HybridFields",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"HybridFields"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get HybridFields with children",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b39372f6-1280-4be7-8b08-9777059d6d40",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('ViewText');",
													"    pm.expect(jsonData).to.have.property('ViewHelpText');",
													"    pm.expect(jsonData).to.have.property('TableName');",
													"    pm.expect(jsonData).to.have.property('WhereText');",
													"    pm.expect(jsonData).to.have.property('ReturnRows');",
													"    pm.expect(jsonData).to.have.property('SeparateBy');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('Hybridfields_name_post'));",
													"\tpm.expect(jsonData.Id).to.eql(pm.variables.get('Hybridfields_get_id'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/HybridFields('{{Hybridfields_name_post}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"HybridFields('{{Hybridfields_name_post}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch HybridFields Class",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "184cd1a0-0b78-408d-b33e-ad5daf725217",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"ViewText\":  \"Postman patch HybridFields\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/HybridFields('{{Hybridfields_name_post}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"HybridFields('{{Hybridfields_name_post}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put HybridFields Class",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6dc8496a-169d-48b5-b0ef-f977023e9abe",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Id\": {{Hybridfields_get_id}},\r\n  \"Name\": \"{{Hybridfields_name_post}}\",\r\n  \"ViewText\": \"Postman put Hybrid Fields\",\r\n  \"ViewHelpText\": \"string\",\r\n  \"TableName\": \"string\",\r\n  \"WhereText\": \"string\",\r\n  \"ReturnRows\": 0,\r\n  \"SeparateBy\": \"string\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/HybridFields('{{Hybridfields_name_post}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"HybridFields('{{Hybridfields_name_post}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All HybridFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "106862c8-2a43-476e-b869-ec5d8e254598",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('value');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ViewText');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ViewHelpText');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('TableName');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('WhereText');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ReturnRows');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('SeparateBy');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify response body contains collection of categories\r",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/HybridFields",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"HybridFields"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Delete HybridField",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f215491f-7b97-4b83-8d0a-0ec5373d2e8b",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/HybridFields('{{Hybridfields_name_post}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"HybridFields('{{Hybridfields_name_post}}')"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Menus Access",
					"item": [
						{
							"name": "Test- Happy Path",
							"item": [
								{
									"name": "Get All Menus",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "375252f4-a14b-486f-b6fa-1a79f49769d4",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsHeader');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsDisabled');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsModalWindow');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsCollapsible');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('Url');",
													"    pm.expect(jsonData.value[0]).to.have.property('HeaderUrl');",
													"    pm.expect(jsonData.value[0]).to.have.property('Sequence');",
													"    pm.expect(jsonData.value[0]).to.have.property('AssemblyName');",
													"    pm.expect(jsonData.value[0]).to.have.property('ClassName');",
													"    pm.expect(jsonData.value[0]).to.have.property('WindowArgument');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/Menus",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Menus"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Get Menus with children",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e1b07136-fb57-43f6-a1f7-7dd5f3d6def0",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('IsHeader');\r",
													"    pm.expect(jsonData).to.have.property('IsDisabled');\r",
													"    pm.expect(jsonData).to.have.property('IsModalWindow');\r",
													"    pm.expect(jsonData).to.have.property('IsCollapsible');\r",
													"    pm.expect(jsonData).to.have.property('Id');\r",
													"    pm.expect(jsonData).to.have.property('Name');\r",
													"    pm.expect(jsonData).to.have.property('Description');\r",
													"    pm.expect(jsonData).to.have.property('Url');\r",
													"    pm.expect(jsonData).to.have.property('HeaderUrl');\r",
													"    pm.expect(jsonData).to.have.property('Sequence');\r",
													"    pm.expect(jsonData).to.have.property('AssemblyName');\r",
													"    pm.expect(jsonData).to.have.property('ClassName');\r",
													"    pm.expect(jsonData).to.have.property('WindowArgument');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/Menus(106)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Menus(106)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Menu Class",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ea425e48-60ea-49c7-a039-05b75266ef64",
												"exec": [
													"var Description = \"Menus Patch \"+Date.now();",
													"pm.globals.set(\"Menus_patch_description\", Description);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "dd3d7321-0b79-4cb2-9f81-1e91a40e0521",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Description\": \"{{Menus_patch_description}}\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Menus(106)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Menus(106)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Menu Class",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5b4121ba-13df-4b11-9b36-e678d4d0b26b",
												"exec": [
													"var Description = \"Menus Put \"+Date.now();",
													"pm.globals.set(\"Menus_put_description\", Description);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ec7a03d7-94c8-4169-918a-46566fc33d03",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"IsHeader\": false,\n  \"IsDisabled\": true,\n  \"IsModalWindow\": false,\n  \"IsCollapsible\": false,\n  \"Id\": 106,\n  \"Name\": \"Summary\",\n  \"Description\": \"{{Menus_put_description}}\",\n  \"Url\": \"http://www.savanainc.com\",\n  \"HeaderUrl\": \"images/i_menu_summary.gif\",\n  \"Sequence\": 4,\n  \"AssemblyName\": null,\n  \"ClassName\": null,\n  \"WindowArgument\": null\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Menus(106)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Menus(106)"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Stamps",
					"item": [
						{
							"name": "Test- Happy path",
							"item": [
								{
									"name": "Post Stamps",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b8fb29d0-22d3-4647-a892-0700b652bf0f",
												"exec": [
													"var Name = \"Stamps_\"+Date.now();",
													"pm.globals.set(\"Stamps_post_name\", Name);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ec23010e-83a5-456f-b449-73bd5bbf5f2b",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('IsBold');",
													"    pm.expect(jsonData).to.have.property('IsItalic');",
													"    pm.expect(jsonData).to.have.property('IsUnderline');",
													"    pm.expect(jsonData).to.have.property('IsStrikeOut');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Type');",
													"    pm.expect(jsonData).to.have.property('Text');",
													"    pm.expect(jsonData).to.have.property('Image');",
													"    pm.expect(jsonData).to.have.property('Width');",
													"    pm.expect(jsonData).to.have.property('Height');",
													"    pm.expect(jsonData).to.have.property('FontName');",
													"    pm.expect(jsonData).to.have.property('FontSize');",
													"    pm.expect(jsonData).to.have.property('Topleft');",
													"    pm.expect(jsonData).to.have.property('Topmiddle');",
													"    pm.expect(jsonData).to.have.property('Topright');",
													"    pm.expect(jsonData).to.have.property('Centerleft');",
													"    pm.expect(jsonData).to.have.property('Center');",
													"    pm.expect(jsonData).to.have.property('CenterRight');",
													"    pm.expect(jsonData).to.have.property('BottomLeft');",
													"    pm.expect(jsonData).to.have.property('BottomMiddle');",
													"    pm.expect(jsonData).to.have.property('FillColor');",
													"    pm.expect(jsonData).to.have.property('BottomRight');",
													"    pm.expect(jsonData).to.have.property('IsTransParentFillColor');",
													"    pm.expect(jsonData).to.have.property('AllowCustom');",
													"    pm.expect(jsonData).to.have.property('CustomMenuLabel');",
													"    pm.expect(jsonData).to.have.property('CustomTop');",
													"    pm.expect(jsonData).to.have.property('CustomLeft');",
													"    pm.expect(jsonData).to.have.property('BrushColor');",
													"    pm.expect(jsonData).to.have.property('BrushSize');",
													"",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('Stamps_post_name'));",
													"",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var Id = jsonData.Id;",
													"    pm.globals.set(\"Stamp_get_id\", Id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"IsBold\": true,\n\t\"IsItalic\": true,\n    \"IsUnderline\": false,\n    \"IsStrikeOut\": false,\n    \"Name\": \"{{Stamps_post_name}}\",\n\t\"Type\": 1,\n\t\"Text\": \"Postman test\",\n\t\"Image\": \"R0lGODlhGAAVAOZ/AOjUhfPnnPaWIvLag/ayZKmDSvalRvXGjfW2bO7YefWqUeW8OsqsZPavXPScM/SaLypbhP7y5PXZtvWhPUltf0lzmPawWv3u3DhjivXAgc62lPq2Zt+6KfW5cvXOnfXDhfrTpf/58/r9/vXTqPWeOP3lx/ibK/zQncmthreSXvTdvvfwrKp7J4G/3uDNhtfSk/WcKOHKd6C80erPZcWgTL7IzvW+efzfvenNX56yveLo7vi3aMKYLvPq1+fKWOG9M7aJJvfVq4WVnc+RNu3k1/jAffWXJ9vJr+PUlvH09/n28mebvbSuocTQ3JetweTu9eC7Lty7wajDxef1/a/H2m98guqmIeHSvPXQotHt/B5OeeTFyefbyujS1uXFS86lJfPgxOajQoehuPaiMsyVTPihOWmJprjX6vmvVvi+fJ/Ez/WrVvatVebIUbPY6rvS4oKerKyAOrqVUMGgXrXE01d8nPXWr0tmbfHgi09qdpCUjvXKlevSbHGLlfeUHf///yH5BAEAAH8ALAAAAAAYABUAAAf/gH+Cg4SFhoeIiYgXHhkIaReKhxEjElgZDQYhkoVBKj0SBwQTIIdNOocHdiojHwQkBIUVEBhadIYZB3sHHQoORYROdRgQZxVmSYQgCAgECiQPN39XGkwYT1FUWXBLGIQbEwYTDg9GBilzSHlvWyJTQm59LYMnH34CRkYCCgphKysUZHQRUSNHHzXz/kQwIcGPw4cNBwR4cUePhgIF4kiBIGiDBQ8PH4IhMSZGHDkMXAQIwCCPmD8l/NhAENLhAQt+hgDAg2dAggQ0qghC46fDhJp+2LDxA4PPDBw+2njhwUWhwzVI/ZhQ4HDBgh9QOHBgoQSmwwdZ/aD1Y+ULDyAsJ1KgELTQj5G0d/2QQXGEiKEQJ3aUQWrCwokInAZFKME4sePHkAkFAgA7\",\n\t\"Width\": 250,\n\t\"Height\": 100,\n\t\"FontName\": \"Times New Roman\",\n\t\"FontSize\": 10,\n\t\"Topleft\": 1,\n\t\"Topmiddle\": 1,\n\t\"Topright\": 1,\n\t\"Centerleft\": 1,\n\t\"Center\": 1,\n\t\"CenterRight\": 1,\n\t\"BottomLeft\": 1,\n\t\"BottomMiddle\": 1,\n\t\"FillColor\": 0,\n\t\"BottomRight\": 1,\n\t\"IsTransParentFillColor\": 1,\n\t\"AllowCustom\": 0,\n\t\"CustomMenuLabel\": \"\",\n\t\"CustomTop\": 0,\n\t\"CustomLeft\": 0,\n\t\"BrushColor\": 52224,\n\t\"BrushSize\": 0\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Stamps",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Stamps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Stamps with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36067806-aa64-4a54-940d-5d43db8cd7c8",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('IsBold');",
													"    pm.expect(jsonData).to.have.property('IsItalic');",
													"    pm.expect(jsonData).to.have.property('IsUnderline');",
													"    pm.expect(jsonData).to.have.property('IsStrikeOut');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Type');",
													"    pm.expect(jsonData).to.have.property('Text');",
													"    pm.expect(jsonData).to.have.property('Image');",
													"    pm.expect(jsonData).to.have.property('Width');",
													"    pm.expect(jsonData).to.have.property('Height');",
													"    pm.expect(jsonData).to.have.property('FontName');",
													"    pm.expect(jsonData).to.have.property('FontSize');",
													"    pm.expect(jsonData).to.have.property('Topleft');",
													"    pm.expect(jsonData).to.have.property('Topmiddle');",
													"    pm.expect(jsonData).to.have.property('Topright');",
													"    pm.expect(jsonData).to.have.property('Centerleft');",
													"    pm.expect(jsonData).to.have.property('Center');",
													"    pm.expect(jsonData).to.have.property('CenterRight');",
													"    pm.expect(jsonData).to.have.property('BottomLeft');",
													"    pm.expect(jsonData).to.have.property('BottomMiddle');",
													"    pm.expect(jsonData).to.have.property('FillColor');",
													"    pm.expect(jsonData).to.have.property('BottomRight');",
													"    pm.expect(jsonData).to.have.property('IsTransParentFillColor');",
													"    pm.expect(jsonData).to.have.property('AllowCustom');",
													"    pm.expect(jsonData).to.have.property('CustomMenuLabel');",
													"    pm.expect(jsonData).to.have.property('CustomTop');",
													"    pm.expect(jsonData).to.have.property('CustomLeft');",
													"    pm.expect(jsonData).to.have.property('BrushColor');",
													"    pm.expect(jsonData).to.have.property('BrushSize');",
													"",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('Stamps_post_name'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/Stamps({{Stamp_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Stamps({{Stamp_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Stamps",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04d3a14b-7ddf-43e1-b92f-43d348be839b",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Text\":\"Postman patch - Stamps\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Stamps({{Stamp_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Stamps({{Stamp_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Stamps",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bed2fe91-d137-4803-8182-5412329a2f92",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"IsBold\": true,\n\t\"IsItalic\": true,\n\t\"IsUnderline\": false,\n\t\"IsStrikeOut\": false,\n\t\"Id\": {{Stamp_get_id}},\n\t\"Name\": \"{{Stamps_post_name}}\",\n\t\"Type\": 1,\n\t\"Text\": \"Postman put - Stamps\",\n\t\"Image\": null,\n\t\"Width\": 250,\n\t\"Height\": 100,\n\t\"FontName\": \"Times New Roman\",\n\t\"FontSize\": 10,\n\t\"Topleft\": 1,\n\t\"Topmiddle\": 1,\n\t\"Topright\": 1,\n\t\"Centerleft\": 1,\n\t\"Center\": 1,\n\t\"CenterRight\": 1,\n\t\"BottomLeft\": 1,\n\t\"BottomMiddle\": 1,\n\t\"FillColor\": 0,\n\t\"BottomRight\": 1,\n\t\"IsTransParentFillColor\": 1,\n\t\"AllowCustom\": 0,\n\t\"CustomMenuLabel\": \"\",\n\t\"CustomTop\": 0,\n\t\"CustomLeft\": 0,\n\t\"BrushColor\": 52224,\n\t\"BrushSize\": 0\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Stamps({{Stamp_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Stamps({{Stamp_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Stamps",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c8e7e1c-a517-4019-985a-01485d628fa9",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('value');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('IsBold');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('IsItalic');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('IsUnderline');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('IsStrikeOut');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Type');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Text');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Image');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Width');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Height');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('FontName');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('FontSize');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Topleft');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Topmiddle');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Topright');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Centerleft');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Center');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CenterRight');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('BottomLeft');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('BottomMiddle');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('FillColor');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('BottomRight');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('IsTransParentFillColor');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('AllowCustom');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CustomMenuLabel');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CustomTop');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CustomLeft');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('BrushColor');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('BrushSize');  \r",
													"    \r",
													"    //Verify response body contains collection of categories\r",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/Stamps",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Stamps"
											]
										},
										"description": "Retrieves all DocType Property Interfaces records"
									},
									"response": []
								},
								{
									"name": "Delete Stamps",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e454e13-8703-4af8-aaa3-81523c65ea92",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/Stamps({{Stamp_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Stamps({{Stamp_get_id}})"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "System Registrations",
					"item": [
						{
							"name": "Test- Happy path",
							"item": [
								{
									"name": "Get All SystemRegistrations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "504c6c9f-c353-4884-8b82-4b47034aa72b",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Company');",
													"    pm.expect(jsonData.value[0]).to.have.property('Division');",
													"    pm.expect(jsonData.value[0]).to.have.property('Address1');",
													"    pm.expect(jsonData.value[0]).to.have.property('Address2');",
													"    pm.expect(jsonData.value[0]).to.have.property('Address3');",
													"    pm.expect(jsonData.value[0]).to.have.property('City');",
													"    pm.expect(jsonData.value[0]).to.have.property('State');",
													"    pm.expect(jsonData.value[0]).to.have.property('Province');",
													"    pm.expect(jsonData.value[0]).to.have.property('Country');",
													"    pm.expect(jsonData.value[0]).to.have.property('Postalcode');",
													"    pm.expect(jsonData.value[0]).to.have.property('Supportcontact');",
													"    pm.expect(jsonData.value[0]).to.have.property('Supportnumber');",
													"    pm.expect(jsonData.value[0]).to.have.property('Installationdate');",
													"    pm.expect(jsonData.value[0]).to.have.property('Registrationcode');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var company = jsonData.value[0].Company;",
													"    pm.globals.set(\"SystemRegistrations_get_company\", company);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/SystemRegistrations",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SystemRegistrations"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Get SystemRegistrations with children",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9186e521-b616-43b0-8e34-8eae31de05ca",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('Company');\r",
													"    pm.expect(jsonData).to.have.property('Division');\r",
													"    pm.expect(jsonData).to.have.property('Address1');\r",
													"    pm.expect(jsonData).to.have.property('Address2');\r",
													"    pm.expect(jsonData).to.have.property('Address3');\r",
													"    pm.expect(jsonData).to.have.property('City');\r",
													"    pm.expect(jsonData).to.have.property('State');\r",
													"    pm.expect(jsonData).to.have.property('Province');\r",
													"    pm.expect(jsonData).to.have.property('Country');\r",
													"    pm.expect(jsonData).to.have.property('Postalcode');\r",
													"    pm.expect(jsonData).to.have.property('Supportcontact');\r",
													"    pm.expect(jsonData).to.have.property('Supportnumber');\r",
													"    pm.expect(jsonData).to.have.property('Installationdate');\r",
													"    pm.expect(jsonData).to.have.property('Registrationcode');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/SystemRegistrations('{{SystemRegistrations_get_company}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SystemRegistrations('{{SystemRegistrations_get_company}}')"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "UIdGenerators",
					"item": [
						{
							"name": "Test- Happy path",
							"item": [
								{
									"name": "Post UIdGenerators",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6e6a6e38-1367-441a-b76e-3ef70a38ec14",
												"exec": [
													"var Name = \"UID_\"+Date.now();",
													"pm.globals.set(\"UIdGenerators_post_name\", Name);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8d7749be-9da1-4be2-94eb-0f456fa6d4dd",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('Type');",
													"    pm.expect(jsonData).to.have.property('TableName');",
													"    pm.expect(jsonData).to.have.property('Seed');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('UIdGenerators_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var Id = jsonData.Id;",
													"    pm.globals.set(\"UIdGenerators_get_id\", Id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Name\": \"{{UIdGenerators_post_name}}\",\n\t\"Description\": \"UId Generator Postman Description\",\n\t\"Type\": 0,\n\t\"TableName\": \"autogen100000\",\n\t\"Seed\": 1,\n\t\"IsDisabled\": false\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UIdGenerators",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UIdGenerators"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get UIdGenerators with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f1f0d240-89ab-41e7-b1d5-3b7d65244af0",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('Type');",
													"    pm.expect(jsonData).to.have.property('TableName');",
													"    pm.expect(jsonData).to.have.property('Seed');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('UIdGenerators_post_name'));",
													"\tpm.expect(jsonData.Id).to.eql(pm.variables.get('UIdGenerators_get_id'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/UIdGenerators({{UIdGenerators_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UIdGenerators({{UIdGenerators_get_id}})"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Patch UIdGenerators",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9179576c-a028-4ed8-9346-b08e9f23f2df",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Description\": \"Postman patch - UIdGenerators\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UIdGenerators({{UIdGenerators_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UIdGenerators({{UIdGenerators_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put UIdGenerators",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7baf5dbf-f9cf-43fb-80ee-0e358a28c233",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Id\": {{UIdGenerators_get_id}},\n\t\"Name\": \"{{UIdGenerators_post_name}}\",\n\t\"Description\": \"Postman put - UIdGenerators\",\n\t\"Type\": 0,\n\t\"TableName\": \"autogen100000\",\n\t\"Seed\": 1,\n\t\"IsDisabled\": false\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UIdGenerators({{UIdGenerators_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UIdGenerators({{UIdGenerators_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All UIdGenerators",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "459b8ed3-d858-446e-97b0-5790298a7699",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('Type');",
													"    pm.expect(jsonData.value[0]).to.have.property('TableName');",
													"    pm.expect(jsonData.value[0]).to.have.property('Seed');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/UIdGenerators",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UIdGenerators"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "UserAdminSecurity",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Create new user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ea01be19-e8af-46a6-bacb-d048457271c6",
												"exec": [
													"var userName = \"user_\"+Date.now();",
													"pm.globals.set(\"UserAdminSecurities_post_username\", userName);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3ff252ab-ca97-4e5a-9f18-d2505179a6dd",
												"exec": [
													"var jsonData;",
													"verifyUserCreated();",
													"",
													"function verifyUserCreated() {",
													"    ",
													"    try {",
													"        jsonData = pm.response.json();",
													"        pm.response.to.have.status(201);",
													"        pm.expect(jsonData).to.have.property('Id');",
													"        setData();",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"}",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"UserAdminSecurities_get_userid\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Prefer",
												"type": "text",
												"value": "return=representation"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"MustChangePwd\": false,\r\n\t\"PwdNeverExpires\": true,\r\n\t\"UPwd\": \"MyPassword1#\",\r\n\t\"SendWelcomeMessage\": false,\r\n\t\"User\": {\r\n\t\t\"Supervisor\": null,\r\n\t\t\"CategoryId\": 1,\r\n\t\t\"DomainName\": null,\r\n\t\t\"EmailAddress\": \"thisIsmail@mailserver.com\",\r\n\t\t\"FullUserName\": \"QA Automation\",\r\n\t\t\"IsDisabled\": false,\r\n\t\t\"IsExternalUser\": false,\r\n\t\t\"IsSecurityAdmin\": false,\r\n\t\t\"OrganizationId\": 1,\r\n\t\t\"SecurityConfigId\": 1,\r\n\t\t\"StartDate\": \"2017-09-01T00:00:00-04:00\",\r\n\t\t\"SupervisorId\": null,\r\n\t\t\"TerminationDate\": \"2047-09-01T00:00:00-04:00\",\r\n\t\t\"UserAcl\": null,\r\n\t\t\"UserName\": \"{{UserAdminSecurities_post_username}}\"\t\r\n\t}\r\n}\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserManagement",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserManagement"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post UserAdminSecurities (no children)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4795d2a1-d19b-4aff-aaff-4f735941dcdd",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(201);\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('Id');\r",
													"    pm.expect(jsonData).to.have.property('UserId');\r",
													"    pm.expect(jsonData).to.have.property('ModuleId');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"\tpm.expect(jsonData.UserId).to.eql(pm.variables.get('UserAdminSecurities_get_userid'));\r",
													"\tpm.expect(jsonData.ModuleId).to.eql(pm.variables.get('UserAdminSecurities_post_moduleId'));\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"    \r",
													"    setData();\r",
													"});\r",
													"\r",
													"function setData() {\r",
													"    var id = jsonData.Id;\r",
													"    pm.globals.set(\"UserAdminSecurities_get_id\", id);\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1af21125-a7d3-41ac-8e77-d92dafa8280a",
												"exec": [
													"pm.globals.set(\"UserAdminSecurities_post_moduleId\", 1);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"UserId\": {{UserAdminSecurities_get_userid}},\n   \"ModuleId\": {{UserAdminSecurities_post_moduleId}}\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserAdminSecurities",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserAdminSecurities"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get UserAdminSecurities with Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d602a5e-bb04-497b-a469-739e470f947b",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('Id');\r",
													"    pm.expect(jsonData).to.have.property('UserId');\r",
													"    pm.expect(jsonData).to.have.property('ModuleId');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"\tpm.expect(jsonData.UserId).to.eql(pm.variables.get('UserAdminSecurities_get_userid'));\r",
													"\tpm.expect(jsonData.ModuleId).to.eql(pm.variables.get('UserAdminSecurities_post_moduleId'));\r",
													"\tpm.expect(jsonData.Id).to.eql(pm.variables.get('UserAdminSecurities_get_id'));\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/UserAdminSecurities(UserId={{UserAdminSecurities_get_userid}},ModuleId={{UserAdminSecurities_post_moduleId}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserAdminSecurities(UserId={{UserAdminSecurities_get_userid}},ModuleId={{UserAdminSecurities_post_moduleId}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All UserAdminSecurities",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c5724ed-9c0e-483a-847f-640cc1f9de1f",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('value');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('UserId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModuleId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify response body contains collection of categories\r",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/UserAdminSecurities",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserAdminSecurities"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Delete UserAdminSecurities",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4cfc27c6-de3e-4968-94c6-138160307d69",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/UserAdminSecurities(UserId={{UserAdminSecurities_get_userid}},ModuleId={{UserAdminSecurities_post_moduleId}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserAdminSecurities(UserId={{UserAdminSecurities_get_userid}},ModuleId={{UserAdminSecurities_post_moduleId}})"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "UserMasterConfigurations",
					"item": [
						{
							"name": "Test-Happy path",
							"item": [
								{
									"name": "Post UserMasterConfigurations",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a93bec59-a0e4-4152-ae2f-64394647f6a1",
												"exec": [
													"var Name = \"Master_Config_\"+Date.now()",
													"pm.globals.set(\"UserMasterConfigurations_post_name\", Name);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0def8fe6-90b4-4a96-88aa-7a913c18f68a",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Type');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('SubType');",
													"    pm.expect(jsonData).to.have.property('Value');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('UserMasterConfigurations_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Name\": \"{{UserMasterConfigurations_post_name}}\",\n\t\"Value\": \"500\",\n\t\"Type\": 0,\n\t\"Help\": \"\",\n\t\"Params\": \"\",\n\t\"Description\": \"Create new user master configuration.\",\n\t\"SubType\": 0\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserMasterConfigurations",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserMasterConfigurations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get UserMasterConfigurations with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52cdb7a7-e6a9-4a61-9d1e-19733e77d6bb",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Type');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('SubType');",
													"    pm.expect(jsonData).to.have.property('Value');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('UserMasterConfigurations_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/UserMasterConfigurations('{{UserMasterConfigurations_post_name}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserMasterConfigurations('{{UserMasterConfigurations_post_name}}')"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Patch UserMasterConfigurations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf91db0f-92c4-41e8-997e-a65a96f96ea6",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Description\": \"Postman patch - UserMasterConfigurations.\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserMasterConfigurations('{{UserMasterConfigurations_post_name}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserMasterConfigurations('{{UserMasterConfigurations_post_name}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put UserMasterConfigurations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c9fe393-5b2b-42fa-b06a-76b3f9b9a18b",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Name\": \"{{UserMasterConfigurations_post_name}}\",\n\t\"Value\": \"500\",\n\t\"Type\": 0,\n\t\"Help\": \"\",\n\t\"Params\": \"\",\n\t\"Description\": \"Postman put - UserMasterConfigurations\",\n\t\"SubType\": 0\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserMasterConfigurations('{{UserMasterConfigurations_post_name}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserMasterConfigurations('{{UserMasterConfigurations_post_name}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All UserMasterConfigurations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f6a1aee-e803-42f6-ba27-85be08a55146",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('value');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Type');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('SubType');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Value');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify response body contains collection of categories\r",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/UserMasterConfigurations",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserMasterConfigurations"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "UserConfigs",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Create new user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ea01be19-e8af-46a6-bacb-d048457271c6",
												"exec": [
													"var userName = \"user_\"+Date.now();",
													"pm.globals.set(\"UserConfigs_post_username\", userName);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3ff252ab-ca97-4e5a-9f18-d2505179a6dd",
												"exec": [
													"var jsonData;",
													"verifyUserCreated();",
													"",
													"function verifyUserCreated() {",
													"    ",
													"    try {",
													"        jsonData = pm.response.json();",
													"        pm.response.to.have.status(201);",
													"        pm.expect(jsonData).to.have.property('Id');",
													"        setData();",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"}",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"UserConfigs_get_userid\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Prefer",
												"type": "text",
												"value": "return=representation"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"MustChangePwd\": false,\r\n\t\"PwdNeverExpires\": true,\r\n\t\"UPwd\": \"MyPassword1#\",\r\n\t\"SendWelcomeMessage\": false,\r\n\t\"User\": {\r\n\t\t\"Supervisor\": null,\r\n\t\t\"CategoryId\": 1,\r\n\t\t\"DomainName\": null,\r\n\t\t\"EmailAddress\": \"thisIsmail@mailserver.com\",\r\n\t\t\"FullUserName\": \"QA Automation\",\r\n\t\t\"IsDisabled\": false,\r\n\t\t\"IsExternalUser\": false,\r\n\t\t\"IsSecurityAdmin\": false,\r\n\t\t\"OrganizationId\": 1,\r\n\t\t\"SecurityConfigId\": 1,\r\n\t\t\"StartDate\": \"2017-09-01T00:00:00-04:00\",\r\n\t\t\"SupervisorId\": null,\r\n\t\t\"TerminationDate\": \"2047-09-01T00:00:00-04:00\",\r\n\t\t\"UserAcl\": null,\r\n\t\t\"UserName\": \"{{UserConfigs_post_username}}\"\t\r\n\t}\r\n}\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserManagement",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserManagement"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new MasterConfiguration",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a93bec59-a0e4-4152-ae2f-64394647f6a1",
												"exec": [
													"var Name = \"Master_Config_\"+Date.now()",
													"pm.globals.set(\"UserConfigs_post_masterConfigName\", Name);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0def8fe6-90b4-4a96-88aa-7a913c18f68a",
												"exec": [
													"var jsonData;",
													"verifyUserCreated();",
													"",
													"function verifyUserCreated() {",
													"    ",
													"    try {",
													"        jsonData = pm.response.json();",
													"        pm.response.to.have.status(201);",
													"        pm.expect(jsonData).to.have.property('Id');",
													"        setData();",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"}",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"UserConfigs_get_masterConfigId\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Name\": \"{{UserConfigs_post_masterConfigName}}\",\n\t\"Value\": \"500\",\n\t\"Type\": 0,\n\t\"Help\": \"\",\n\t\"Params\": \"\",\n\t\"Description\": \"Create new user master configuration.\",\n\t\"SubType\": 0\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserMasterConfigurations",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserMasterConfigurations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post UserConfigs",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a04e911-c1bc-4adc-b947-b4e8d0c5c37c",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(201);\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('Id');\r",
													"    pm.expect(jsonData).to.have.property('UserId');\r",
													"    pm.expect(jsonData).to.have.property('Name');\r",
													"    pm.expect(jsonData).to.have.property('Value');\r",
													"    pm.expect(jsonData).to.have.property('Type');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"\tpm.expect(jsonData.UserId).to.eql(pm.variables.get('UserConfigs_get_userid'));\r",
													"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('UserConfigs_post_masterConfigName'));\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"    \r",
													"    setData();\r",
													"});\r",
													"\r",
													"function setData() {\r",
													"    var id = jsonData.Id;\r",
													"    pm.globals.set(\"UserConfigs_get_id\", id);\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "74ed8f36-1d9b-4a87-adf7-b9bbd820bdf5",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"UserId\": {{UserConfigs_get_userid}},\n\t\"Name\": \"{{UserConfigs_post_masterConfigName}}\",\n\t\"Value\": \"336\",\n\t\"Type\": \"0\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserConfigs",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserConfigs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get UserConfigs with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7aedd99-504e-4605-a5a5-68eba7b01351",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('Id');\r",
													"    pm.expect(jsonData).to.have.property('UserId');\r",
													"    pm.expect(jsonData).to.have.property('Name');\r",
													"    pm.expect(jsonData).to.have.property('Value');\r",
													"    pm.expect(jsonData).to.have.property('Type');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"\tpm.expect(jsonData.UserId).to.eql(pm.variables.get('UserConfigs_get_userid'));\r",
													"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('UserConfigs_post_masterConfigName'));\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/UserConfigs(UserId={{UserConfigs_get_userid}},Name='{{UserConfigs_post_masterConfigName}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserConfigs(UserId={{UserConfigs_get_userid}},Name='{{UserConfigs_post_masterConfigName}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch UserConfigs",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ba40b74-65ea-45fa-98ed-0179f653cec8",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Value\": \"340\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserConfigs(UserId={{UserConfigs_get_userid}},Name='{{UserConfigs_post_masterConfigName}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserConfigs(UserId={{UserConfigs_get_userid}},Name='{{UserConfigs_post_masterConfigName}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put UserConfigs",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6722ea54-8eaa-4df1-82ef-9883f7ef627f",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Id\": {{UserConfigs_get_id}},\n\t\"UserId\": {{UserConfigs_get_userid}},\n\t\"Name\": \"{{UserConfigs_post_masterConfigName}}\",\n\t\"Value\": \"344\",\n\t\"Type\": \"0\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserConfigs(UserId={{UserConfigs_get_userid}},Name='{{UserConfigs_post_masterConfigName}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserConfigs(UserId={{UserConfigs_get_userid}},Name='{{UserConfigs_post_masterConfigName}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All UserConfigs",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "33d27d74-96ef-40cb-8dce-0ac119b27deb",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('UserId');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('Value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Type');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/UserConfigs",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserConfigs"
											]
										},
										"description": "Retrieves all DocType Property Interfaces records"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "UserMenus",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Create new user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ea01be19-e8af-46a6-bacb-d048457271c6",
												"exec": [
													"var userName = \"user_\"+Date.now();",
													"pm.globals.set(\"UserMenus_post_username\", userName);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3ff252ab-ca97-4e5a-9f18-d2505179a6dd",
												"exec": [
													"var jsonData;",
													"verifyUserCreated();",
													"",
													"function verifyUserCreated() {",
													"    ",
													"    try {",
													"        jsonData = pm.response.json();",
													"        pm.response.to.have.status(201);",
													"        pm.expect(jsonData).to.have.property('Id');",
													"        setData();",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"}",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"UserMenus_get_id\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Prefer",
												"type": "text",
												"value": "return=representation"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"MustChangePwd\": false,\r\n\t\"PwdNeverExpires\": true,\r\n\t\"UPwd\": \"MyPassword1#\",\r\n\t\"SendWelcomeMessage\": false,\r\n\t\"User\": {\r\n\t\t\"Supervisor\": null,\r\n\t\t\"CategoryId\": 1,\r\n\t\t\"DomainName\": null,\r\n\t\t\"EmailAddress\": \"thisIsmail@mailserver.com\",\r\n\t\t\"FullUserName\": \"QA Automation\",\r\n\t\t\"IsDisabled\": false,\r\n\t\t\"IsExternalUser\": false,\r\n\t\t\"IsSecurityAdmin\": false,\r\n\t\t\"OrganizationId\": 1,\r\n\t\t\"SecurityConfigId\": 1,\r\n\t\t\"StartDate\": \"2017-09-01T00:00:00-04:00\",\r\n\t\t\"SupervisorId\": null,\r\n\t\t\"TerminationDate\": \"2047-09-01T00:00:00-04:00\",\r\n\t\t\"UserAcl\": null,\r\n\t\t\"UserName\": \"{{UserMenus_post_username}}\"\t\r\n\t}\r\n}\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserManagement",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserManagement"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post UserMenus",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b704b6a5-e58e-45d7-9cc4-bb009c78a952",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(201);\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('IsAllowed');\r",
													"    pm.expect(jsonData).to.have.property('IsDefault');\r",
													"    pm.expect(jsonData).to.have.property('UserId');\r",
													"    pm.expect(jsonData).to.have.property('MenuId');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0289aa0f-45d3-4597-b0d4-61b115a98ddf",
												"exec": [
													"pm.globals.set(\"UserMenus_post_menuId\", 111);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"IsAllowed\": true,\n\t\"IsDefault\": false,\n\t\"UserId\": {{UserMenus_get_id}},\n\t\"MenuId\": {{UserMenus_post_menuId}}\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserMenus",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserMenus"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get UserMenus with Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "430aad0e-0196-46b0-86ac-d18c61b72b48",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('IsAllowed');\r",
													"    pm.expect(jsonData).to.have.property('IsDefault');\r",
													"    pm.expect(jsonData).to.have.property('UserId');\r",
													"    pm.expect(jsonData).to.have.property('MenuId');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/UserMenus(UserId={{UserMenus_get_id}},MenuId={{UserMenus_post_menuId}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserMenus(UserId={{UserMenus_get_id}},MenuId={{UserMenus_post_menuId}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch UserMenus",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4b7cc10d-3301-4ae4-ab2d-c382d5b6fce6",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"IsAllowed\": false\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserMenus(UserId={{UserMenus_get_id}},MenuId={{UserMenus_post_menuId}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserMenus(UserId={{UserMenus_get_id}},MenuId={{UserMenus_post_menuId}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put UserMenus",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b52ea33-fd1a-4914-8888-1c6d33b2f45c",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"IsAllowed\": true,\n\t\"IsDefault\": false,\n\t\"UserId\": {{UserMenus_get_id}},\n\t\"MenuId\": {{UserMenus_post_menuId}}\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserMenus(UserId={{UserMenus_get_id}},MenuId={{UserMenus_post_menuId}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserMenus(UserId={{UserMenus_get_id}},MenuId={{UserMenus_post_menuId}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All UserMenus",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d2e7660-aa72-4793-b55c-c22f92111373",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('value');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('IsAllowed');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('IsDefault');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('UserId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('MenuId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify response body contains collection of categories\r",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/UserMenus",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserMenus"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Delete UserMenus",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4163972e-8057-471a-af70-3286622519ff",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/UserMenus(UserId={{UserMenus_get_id}},MenuId={{UserMenus_post_menuId}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserMenus(UserId={{UserMenus_get_id}},MenuId={{UserMenus_post_menuId}})"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ViewerConfigurations",
					"item": [
						{
							"name": "Test-Happy path",
							"item": [
								{
									"name": "Post ViewerConfigurations with Children",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2c26c42c-890a-48fc-8c1b-2bdfba10b322",
												"exec": [
													"var key = \"VC\"+Date.now();",
													"pm.globals.set(\"ViewerConfigurations_post_key\", key);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "470a0d8b-c2f1-4606-be6f-b7be8624f19c",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Key');",
													"    pm.expect(jsonData).to.have.property('Value');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.Key).to.eql(pm.variables.get('ViewerConfigurations_post_key'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Key\": \"{{ViewerConfigurations_post_key}}\",\n  \"Value\": \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>  <!-- Root Node for Configuration -->  <EPMViewer>    <DefaultResolution>96</DefaultResolution></EPMViewer>  \",\n  \"Description\": \"Postman Post Configuration\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ViewerConfigurations",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ViewerConfigurations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ViewerConfigurations with children",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31ba2ff7-8152-44db-8890-1517d2c041aa",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Key');",
													"    pm.expect(jsonData).to.have.property('Value');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.Key).to.eql(pm.variables.get('ViewerConfigurations_post_key'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ViewerConfigurations('{{ViewerConfigurations_post_key}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ViewerConfigurations('{{ViewerConfigurations_post_key}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch ViewerConfigurations Class",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "82ec4729-8fc2-4902-b2ca-c7c0b36711f9",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Description\":  \"Postman Patch - Viewer configruation\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ViewerConfigurations('{{ViewerConfigurations_post_key}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ViewerConfigurations('{{ViewerConfigurations_post_key}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put ViewerConfigurations Class",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aae6abad-bfb5-4692-88df-4203a0c3cb7c",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Key\": \"{{ViewerConfigurations_post_key}}\",\n  \"Value\": \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>  <!-- Root Node for Configuration -->  <EPMViewer>    <DefaultResolution>96</DefaultResolution></EPMViewer>  \",\n  \"Description\": \"Postman put - Viewer configruation\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ViewerConfigurations('{{ViewerConfigurations_post_key}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ViewerConfigurations('{{ViewerConfigurations_post_key}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All ViewerConfigurations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad42a5b7-2830-4d28-a056-a55e1a965b2c",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Key');",
													"    pm.expect(jsonData.value[0]).to.have.property('Value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ViewerConfigurations",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ViewerConfigurations"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Delete ViewerConfigurations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b50f75b9-1961-46a4-83f0-350f22e83573",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ViewerConfigurations('{{ViewerConfigurations_post_key}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ViewerConfigurations('{{ViewerConfigurations_post_key}}')"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f99030fe-a794-4c94-910b-3a1a9a8b8e8d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "176a2f60-ed7c-4d5f-ad68-36fb371df172",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "03 FieldDefination",
			"item": [
				{
					"name": "FieldMasks",
					"item": [
						{
							"name": "Test-Happy path",
							"item": [
								{
									"name": "Create new FieldMasks",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Verify Id and Name field values in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('FieldMasks_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Expression');",
													"  pm.expect(jsonData).to.have.property('Replacement');",
													"  pm.expect(jsonData).to.have.property('CreatedById');",
													"});",
													"",
													"pm.test(\"Store Field Mask Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"FieldMasks_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"Field_Mask_\"+Date.now()",
													"    pm.globals.set(\"FieldMasks_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"Name\": \"{{FieldMasks_post_name}}\",\r\n \"Expression\": \"\\\\W\",\r\n \"Replacement\": \"M\",\r\n \"Enabled\": true\r\n}\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/FieldMasks",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"FieldMasks"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "Get FieldMasks(Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Verify Id and Name field values in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('FieldMasks_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Expression');",
													"  pm.expect(jsonData).to.have.property('Replacement');",
													"  pm.expect(jsonData).to.have.property('CreatedById');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/FieldMasks({{FieldMasks_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"FieldMasks({{FieldMasks_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch FieldMasks",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Replacement\": \"Postman patch test\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/FieldMasks({{FieldMasks_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"FieldMasks({{FieldMasks_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put FieldMasks",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Id\": {{FieldMasks_get_id}},\r\n\t\"Name\": \"{{FieldMasks_post_name}}\",\r\n\t\"Expression\": \"\\\\W\",\r\n\t\"Replacement\": \"Postman put test\",\r\n\t\"Enabled\": true\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/FieldMasks({{FieldMasks_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"FieldMasks({{FieldMasks_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All FieldMasks",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify all fields are present in response.\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('Expression');",
													"    pm.expect(jsonData.value[0]).to.have.property('Replacement');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/FieldMasks",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"FieldMasks"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Fields",
					"item": [
						{
							"name": "Test-Happy path",
							"item": [
								{
									"name": "Create new Fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Verify Id and Name values in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('Fields_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('ForeignDataSourceId');",
													"  pm.expect(jsonData).to.have.property('ColumnName');",
													"  pm.expect(jsonData).to.have.property('FieldMask');",
													"  pm.expect(jsonData).to.have.property('MinFieldLength');",
													"  pm.expect(jsonData).to.have.property('FieldLength');",
													"  pm.expect(jsonData).to.have.property('CategoryType');",
													"  pm.expect(jsonData).to.have.property('FieldType');",
													"  pm.expect(jsonData).to.have.property('Description');",
													"});",
													"",
													"pm.test(\"Store Fields Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"Fields_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"FIELD_NAME_\"+Date.now()",
													"    pm.globals.set(\"Fields_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"FieldPrecision\": 0,\r\n    \"Name\": \"{{Fields_post_name}}\",\r\n\t\"Description\": \"Postman Test field\",\r\n    \"FieldType\": 2,\r\n    \"CategoryType\": 1,\r\n    \"FieldLength\": 2000,\r\n    \"MinFieldLength\": 0,\r\n    \"ColumnName\": \"{{Fields_post_name}}\",\r\n    \"FieldMask\": \"\",\r\n    \"ForeignDataSourceId\": 0\r\n}\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/Fields",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Fields"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "Get Fields(Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Verify Id and Name values in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('Fields_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('ForeignDataSourceId');",
													"  pm.expect(jsonData).to.have.property('ColumnName');",
													"  pm.expect(jsonData).to.have.property('FieldMask');",
													"  pm.expect(jsonData).to.have.property('MinFieldLength');",
													"  pm.expect(jsonData).to.have.property('FieldLength');",
													"  pm.expect(jsonData).to.have.property('CategoryType');",
													"  pm.expect(jsonData).to.have.property('FieldType');",
													"  pm.expect(jsonData).to.have.property('Description');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/Fields({{Fields_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Fields({{Fields_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Description\": \"Postman patch test - Fields\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Fields({{Fields_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Fields({{Fields_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Id\":{{Fields_get_id}},\r\n    \"FieldPrecision\": 0,\r\n    \"Name\": \"{{Fields_post_name}}\",\r\n\t\"Description\": \"Postman put test - Fields\",\r\n    \"FieldType\": 2,\r\n    \"CategoryType\": 1,\r\n    \"FieldLength\": 2000,\r\n    \"MinFieldLength\": 0,\r\n    \"ColumnName\": \"{{Fields_post_name}}\",\r\n    \"FieldMask\": \"\",\r\n    \"ForeignDataSourceId\": 0\r\n}\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/Fields({{Fields_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Fields({{Fields_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify all fields are present in response.\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('ForeignDataSourceId');",
													"    pm.expect(jsonData.value[0]).to.have.property('ColumnName');",
													"    pm.expect(jsonData.value[0]).to.have.property('FieldMask');",
													"    pm.expect(jsonData.value[0]).to.have.property('MinFieldLength');",
													"    pm.expect(jsonData.value[0]).to.have.property('FieldLength');",
													"    pm.expect(jsonData.value[0]).to.have.property('CategoryType');",
													"    pm.expect(jsonData.value[0]).to.have.property('FieldType');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/Fields",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Fields"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ForeignDataSources",
					"item": [
						{
							"name": "Post Doc Tables with Fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c1f096e1-b988-4d0b-a88e-f72352261e9a",
										"exec": [
											"var tableName = \"F\"+Date.now();\r",
											"pm.globals.set(\"ForeignDatasource_post_tableName\", tableName);\r",
											"pm.globals.set(\"ForeignDatasource_post_docTableName\", 'DOCTBL_'+tableName);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "31592ba4-7def-4632-b4b3-2d0f44595d7c",
										"exec": [
											"var jsonData;",
											"verifyUserCreated();",
											"",
											"function verifyUserCreated() {",
											"    ",
											"    try {",
											"        jsonData = pm.response.json();",
											"        pm.response.to.have.status(201);",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
									},
									{
										"key": "OData-Version",
										"value": "4.0"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"DocTableName\": \"{{ForeignDatasource_post_docTableName}}\",\r\n\t\"DocTableDescription\": \"Create new doc table\",\r\n\t\"TableName\": \"{{ForeignDatasource_post_tableName}}\",\r\n\t\"IsDisabled\": false,\r\n\t\"DocInterfaceId\": 1,\r\n\t\"InterfaceConfig\": \"string\",\r\n\t\"DocTableXFields\": [\r\n\t\t{\r\n\t\t\t\"IsMultiValue\": false,\r\n\t\t\t\"IsDisabled\": false,\r\n\t\t\t\"MultiValueTable\": \"\",\r\n\t\t\t\"FieldId\": -1000\r\n\t\t},\r\n\t\t\t\t{\r\n\t\t\t\"IsMultiValue\": false,\r\n\t\t\t\"IsDisabled\": false,\r\n\t\t\t\"MultiValueTable\": \"\",\r\n\t\t\t\"FieldId\": -1001\r\n\t\t}\r\n\t]\r\n}"
								},
								"url": {
									"raw": "{{SiteURL}}api/DocTables",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"DocTables"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post ForeignDataSources",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0b4da622-c8d7-427b-aced-2078c0b8501a",
										"exec": [
											"var alias = \"A\"+Date.now();",
											"pm.globals.set(\"ForeignDatasource_post_alias\", alias);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "39df2c3b-458c-4f1d-aad7-1ca558bff700",
										"exec": [
											"var jsonData;\r",
											"\r",
											"pm.test('Verify Response status code and Response body.', function() {\r",
											"    \r",
											"    //Verify response status code.\r",
											"    pm.response.to.have.status(201);\r",
											"    \r",
											"    jsonData = pm.response.json();\r",
											"\r",
											"    //Verify all fields are present in response body.\r",
											"    pm.expect(jsonData).to.have.property('Id');\r",
											"    pm.expect(jsonData).to.have.property('Enabled');\r",
											"    pm.expect(jsonData).to.have.property('TableName');\r",
											"    pm.expect(jsonData).to.have.property('TableAlias');\r",
											"    pm.expect(jsonData).to.have.property('JoinClause');\r",
											"    pm.expect(jsonData).to.have.property('CreatedById');\r",
											"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
											"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
											"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
											"    \r",
											"    //Verify correct values are present in response body.\r",
											"\tpm.expect(jsonData.TableName).to.eql(pm.variables.get('ForeignDatasource_post_docTableName'));\r",
											"\tpm.expect(jsonData.TableAlias).to.eql(pm.variables.get('ForeignDatasource_post_alias'));\r",
											"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
											"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
											"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
											"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
											"    \r",
											"    setData();\r",
											"});\r",
											"\r",
											"function setData() {\r",
											"    var id = jsonData.Id;\r",
											"    pm.globals.set(\"ForeignDatasource_get_id\", id);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
									},
									{
										"key": "OData-Version",
										"value": "4.0"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Enabled\": true,\n  \"TableName\": \"{{ForeignDatasource_post_docTableName}}\",\n  \"TableAlias\": \"{{ForeignDatasource_post_alias}}\",\n  \"JoinClause\": \"1=7\"\n}"
								},
								"url": {
									"raw": "{{SiteURL}}api/ForeignDataSources",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"ForeignDataSources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get ForeignDataSources with Children",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1a5f9d2-fae9-409d-bf07-f7047004a184",
										"exec": [
											"var jsonData;\r",
											"\r",
											"pm.test('Verify Response status code and Response body.', function() {\r",
											"    \r",
											"    //Verify response status code.\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    jsonData = pm.response.json();\r",
											"\r",
											"    //Verify all fields are present in response body.\r",
											"    pm.expect(jsonData).to.have.property('Id');\r",
											"    pm.expect(jsonData).to.have.property('Enabled');\r",
											"    pm.expect(jsonData).to.have.property('TableName');\r",
											"    pm.expect(jsonData).to.have.property('TableAlias');\r",
											"    pm.expect(jsonData).to.have.property('JoinClause');\r",
											"    pm.expect(jsonData).to.have.property('CreatedById');\r",
											"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
											"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
											"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
											"    \r",
											"    //Verify correct values are present in response body.\r",
											"\tpm.expect(jsonData.TableName).to.eql(pm.variables.get('ForeignDatasource_post_docTableName'));\r",
											"\tpm.expect(jsonData.TableAlias).to.eql(pm.variables.get('ForeignDatasource_post_alias'));\r",
											"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
											"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
											"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
											"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "OData-Version",
										"value": "4.0"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization-Token",
										"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
									}
								],
								"url": {
									"raw": "{{SiteURL}}api/ForeignDataSources({{ForeignDatasource_get_id}})",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"ForeignDataSources({{ForeignDatasource_get_id}})"
									]
								},
								"description": "Retrieves all doc table records"
							},
							"response": []
						},
						{
							"name": "Patch ForeignDataSources",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c7c4040-4b88-4084-a65e-51306d107e1c",
										"exec": [
											"pm.test('Verify Response status code and Response body.', function() {\r",
											"    \r",
											"    //Verify response status code.\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
									},
									{
										"key": "OData-Version",
										"value": "4.0"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"JoinClause\": \"2=2\"\n}"
								},
								"url": {
									"raw": "{{SiteURL}}api/ForeignDataSources({{ForeignDatasource_get_id}})",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"ForeignDataSources({{ForeignDatasource_get_id}})"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put ForeignDataSources",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f28bba24-ac35-419d-9774-2db34c877959",
										"exec": [
											"pm.test('Verify Response status code and Response body.', function() {\r",
											"    \r",
											"    //Verify response status code.\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
									},
									{
										"key": "OData-Version",
										"value": "4.0"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"Id\":\"{{ForeignDatasource_get_id}}\",\n\t\"Enabled\": true,\n\t\"TableName\": \"{{ForeignDatasource_post_docTableName}}\",\n\t\"TableAlias\": \"{{ForeignDatasource_post_alias}}\",\n\t\"JoinClause\": \"8=9\"\n}"
								},
								"url": {
									"raw": "{{SiteURL}}api/ForeignDataSources({{ForeignDatasource_get_id}})",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"ForeignDataSources({{ForeignDatasource_get_id}})"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All ForeignDataSources",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f03e002e-5b83-4f5b-a925-7af25866b29b",
										"exec": [
											"var jsonData;\r",
											"\r",
											"pm.test('Verify Response status code and Response body.', function() {\r",
											"    \r",
											"    //Verify response status code.\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    jsonData = pm.response.json();\r",
											"\r",
											"    //Verify all fields are present in response body.\r",
											"    pm.expect(jsonData).to.have.property('value');\r",
											"    pm.expect(jsonData.value[0]).to.have.property('Id');\r",
											"    pm.expect(jsonData.value[0]).to.have.property('Enabled');\r",
											"    pm.expect(jsonData.value[0]).to.have.property('TableName');\r",
											"    pm.expect(jsonData.value[0]).to.have.property('TableAlias');\r",
											"    pm.expect(jsonData.value[0]).to.have.property('JoinClause');\r",
											"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');\r",
											"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');\r",
											"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');\r",
											"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');\r",
											"    \r",
											"    //Verify response body contains collection of categories\r",
											"    pm.expect(jsonData.value.length).to.be.greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "OData-Version",
										"value": "4.0"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization-Token",
										"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
									}
								],
								"url": {
									"raw": "{{SiteURL}}api/ForeignDataSources",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"ForeignDataSources"
									]
								},
								"description": "Retrieves all doc table records"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Lookup values",
					"item": [
						{
							"name": "Create Lookup",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c7a35871-11d8-48b4-a528-5afc1f33ace7",
										"exec": [
											"var lookupDescription = \"Lookup_\"+Date.now()",
											"var lookupTable = \"LookupTable_\"+Date.now()",
											"pm.globals.set(\"LookupValues_post_lookup_description\", lookupDescription);",
											"pm.globals.set(\"LookupValues_post_tablename\", lookupTable);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bbe6f927-20e1-430d-a7eb-8d1f6c29b330",
										"exec": [
											"var jsonData;",
											"verifyLookupCreated();",
											"",
											"function verifyLookupCreated() {",
											"    ",
											"    try {",
											"        jsonData = pm.response.json();",
											"        pm.response.to.have.status(201);",
											"        pm.expect(jsonData).to.have.property('Id');",
											"        setData();",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"}",
											"",
											"function setData() {",
											"    var id = jsonData.Id;",
											"    pm.globals.set(\"LookupValues_get_LookupId\", id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
									},
									{
										"key": "OData-Version",
										"value": "4.0"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"UseCurrentDatabase\": true,\n  \"CacheScope\": \"NoCache\",\n  \"AllowDisableValues\": false,\n  \"Description\": \"{{LookupValues_post_lookup_description}}\",\n  \"DataSource\": \"\",\n  \"ServerName\": \"\",\n  \"DatabaseName\": \"\",\n  \"DbUserId\": \"\",\n  \"DbPwd\": \"\",\n  \"ValidateSql\": \"\",\n  \"ValuesSql\": \"SELECT itemvalue as 'itemid', itemvalue FROM Lookup_PostmanTest3\",\n  \"ValidateParams\": 0,\n  \"ValuesParams\": 0,\n  \"Length\": 10,\n  \"ItemTextLength\": null,\n  \"TableName\": \"{{LookupValues_post_tablename}}\",\n  \"LookUpTableCreated\": 1,\n  \"DataType\": 1\n}"
								},
								"url": {
									"raw": "{{SiteURL}}api/Lookups",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"Lookups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post LookupValues",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "19a4207a-ced3-4488-83f5-bf8cff2ff20f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "61b45056-ea4a-4040-a81c-2cfab2aaf4e4",
										"exec": [
											"var jsonData;",
											"",
											"pm.test('Verify Response status code and Response body.', function() {",
											"    ",
											"    //Verify response status code.",
											"    pm.response.to.have.status(201);",
											"    ",
											"    //Initialize JsonBody",
											"    jsonData = pm.response.json();",
											"",
											"    //Verify all fields are present in response body.",
											"    pm.expect(jsonData).to.have.property('LookupId');",
											"    pm.expect(jsonData).to.have.property('LookupTableName');",
											"    pm.expect(jsonData).to.have.property('Disabled');",
											"    pm.expect(jsonData).to.have.property('Id');",
											"    pm.expect(jsonData).to.have.property('Value');",
											"    pm.expect(jsonData).to.have.property('Text');",
											"    pm.expect(jsonData).to.have.property('CreatedById');",
											"    pm.expect(jsonData).to.have.property('CreatedDate');",
											"    pm.expect(jsonData).to.have.property('ModifiedById');",
											"    pm.expect(jsonData).to.have.property('ModifiedDate');",
											"    ",
											"    //Verify correct values are present in response body.",
											"    pm.expect(jsonData.LookupId).to.eql(pm.variables.get('LookupValues_get_LookupId'));",
											"    pm.expect(jsonData.LookupTableName).to.eql(pm.variables.get('LookupValues_post_tablename'));",
											"    pm.expect(jsonData.CreatedById).not.eql(null);",
											"    pm.expect(jsonData.CreatedDate).not.eql(null);",
											"    pm.expect(jsonData.ModifiedById).not.eql(null);",
											"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
											"    ",
											"    setData();",
											"});",
											"",
											"function setData() {",
											"    var id = jsonData.Id;",
											"    pm.globals.set(\"LookupValue_get_id\", id);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
										"type": "text"
									},
									{
										"key": "OData-Version",
										"value": "4.0",
										"type": "text"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"LookupId\": {{LookupValues_get_LookupId}},\r\n  \"LookupTableName\": \"{{LookupValues_post_tablename}}\",\r\n  \"Value\": \"Value_A\",\r\n  \"Text\": \"Text_A\",\r\n  \"Disabled\": true\r\n}"
								},
								"url": {
									"raw": "{{SiteURL}}api/LookupValues",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"LookupValues"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch LookupValues",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2d922fb9-c4ee-4457-a6d1-78ff5f590f5a",
										"exec": [
											"pm.test(\"Verify Response status code and Response body.\", function () {",
											"    ",
											"    //Verify response status code.",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
										"type": "text"
									},
									{
										"key": "OData-Version",
										"value": "4.0",
										"type": "text"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"LookupId\": {{LookupValues_get_LookupId}},\n\t\"Disabled\": false\n}"
								},
								"url": {
									"raw": "{{SiteURL}}api/LookupValues({{LookupValue_get_id}})",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"LookupValues({{LookupValue_get_id}})"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put LookupValues",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2d922fb9-c4ee-4457-a6d1-78ff5f590f5a",
										"exec": [
											"pm.test(\"Verify Response status code and Response body.\", function () {",
											"    ",
											"    //Verify response status code.",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
										"type": "text"
									},
									{
										"key": "OData-Version",
										"value": "4.0",
										"type": "text"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"LookupId\": {{LookupValues_get_LookupId}},\r\n  \"LookupTableName\": \"{{LookupValues_post_tablename}}\",\r\n  \"Id\": {{LookupValue_get_id}},\r\n  \"Value\": \"Value_B\",\r\n  \"Text\": \"Text_B\",\r\n  \"Disabled\": true\r\n}"
								},
								"url": {
									"raw": "{{SiteURL}}api/LookupValues({{LookupValue_get_id}})",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"LookupValues({{LookupValue_get_id}})"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete LookupValues",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2d922fb9-c4ee-4457-a6d1-78ff5f590f5a",
										"exec": [
											"pm.test(\"Verify Response status code and Response body.\", function () {",
											"    ",
											"    //Verify response status code.",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization-Token",
										"type": "text",
										"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
									},
									{
										"key": "OData-Version",
										"type": "text",
										"value": "4.0"
									},
									{
										"key": "OData-MaxVersion",
										"type": "text",
										"value": "4.0"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"LookupId\": {{LookupValues_get_LookupId}}\n}"
								},
								"url": {
									"raw": "{{SiteURL}}api/LookupValues({{LookupValue_get_id}})",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"LookupValues({{LookupValue_get_id}})"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Lookups",
					"item": [
						{
							"name": "Post Lookups",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c7a35871-11d8-48b4-a528-5afc1f33ace7",
										"exec": [
											"var lookupDescription = \"Lookup_\"+Date.now()",
											"pm.globals.set(\"Lookups_post_description\", lookupDescription);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bbe6f927-20e1-430d-a7eb-8d1f6c29b330",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Verify Response status code and Response body.', function() {",
											"    ",
											"    //Verify response status code.",
											"    pm.response.to.have.status(201);",
											"    ",
											"    //Verify all fields are present in response body.",
											"    pm.expect(jsonData).to.have.property('UseCurrentDatabase');",
											"    pm.expect(jsonData).to.have.property('CacheScope');",
											"    pm.expect(jsonData).to.have.property('AllowDisableValues');",
											"    pm.expect(jsonData).to.have.property('Id');",
											"    pm.expect(jsonData).to.have.property('Description');",
											"    pm.expect(jsonData).to.have.property('DataSource');",
											"    pm.expect(jsonData).to.have.property('ServerName');",
											"    pm.expect(jsonData).to.have.property('DatabaseName');",
											"    pm.expect(jsonData).to.have.property('DbUserId');",
											"    pm.expect(jsonData).to.have.property('DbPwd');",
											"    pm.expect(jsonData).to.have.property('ValidateSql');",
											"    pm.expect(jsonData).to.have.property('ValuesSql');",
											"    pm.expect(jsonData).to.have.property('ValidateParams');",
											"    pm.expect(jsonData).to.have.property('ValuesParams');",
											"    pm.expect(jsonData).to.have.property('Length');",
											"    pm.expect(jsonData).to.have.property('ItemTextLength');",
											"    pm.expect(jsonData).to.have.property('TableName');",
											"    pm.expect(jsonData).to.have.property('LookUpTableCreated');",
											"    pm.expect(jsonData).to.have.property('DataType');",
											"    pm.expect(jsonData).to.have.property('CreatedById');",
											"    pm.expect(jsonData).to.have.property('CreatedDate');",
											"    pm.expect(jsonData).to.have.property('ModifiedById');",
											"    pm.expect(jsonData).to.have.property('ModifiedDate');",
											"    ",
											"    //Verify correct values are present in response body.",
											"    pm.expect(jsonData.Description).to.eql(pm.variables.get('Lookups_post_description'));",
											"    pm.expect(jsonData.CreatedById).not.eql(null);",
											"    pm.expect(jsonData.CreatedDate).not.eql(null);",
											"    pm.expect(jsonData.ModifiedById).not.eql(null);",
											"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
											"    ",
											"    setData();",
											"});",
											"",
											"function setData() {",
											"    var id = jsonData.Id;",
											"    pm.globals.set(\"Lookups_get_id\", id);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
									},
									{
										"key": "OData-Version",
										"value": "4.0"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"UseCurrentDatabase\": true,\n  \"CacheScope\": \"NoCache\",\n  \"AllowDisableValues\": false,\n  \"Description\": \"{{Lookups_post_description}}\",\n  \"DataSource\": \"\",\n  \"ServerName\": \"\",\n  \"DatabaseName\": \"\",\n  \"DbUserId\": \"\",\n  \"DbPwd\": \"\",\n  \"ValidateSql\": \"\",\n  \"ValuesSql\": \"SELECT itemvalue as 'itemid', itemvalue FROM Lookup_PostmanTest3\",\n  \"ValidateParams\": 0,\n  \"ValuesParams\": 0,\n  \"Length\": 10,\n  \"ItemTextLength\": null,\n  \"TableName\": \"Lookup_PostmanTest3\",\n  \"LookUpTableCreated\": 1,\n  \"DataType\": 1\n}"
								},
								"url": {
									"raw": "{{SiteURL}}api/Lookups",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"Lookups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lookups with key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9117b18-9d81-4ed2-8e03-e9621416e334",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Verify Response status code and Response body.', function() {",
											"    ",
											"    //Verify response status code.",
											"    pm.response.to.have.status(200);",
											"    ",
											"    //Verify all fields are present in response body.",
											"    pm.expect(jsonData).to.have.property('UseCurrentDatabase');",
											"    pm.expect(jsonData).to.have.property('CacheScope');",
											"    pm.expect(jsonData).to.have.property('AllowDisableValues');",
											"    pm.expect(jsonData).to.have.property('Id');",
											"    pm.expect(jsonData).to.have.property('Description');",
											"    pm.expect(jsonData).to.have.property('DataSource');",
											"    pm.expect(jsonData).to.have.property('ServerName');",
											"    pm.expect(jsonData).to.have.property('DatabaseName');",
											"    pm.expect(jsonData).to.have.property('DbUserId');",
											"    pm.expect(jsonData).to.have.property('DbPwd');",
											"    pm.expect(jsonData).to.have.property('ValidateSql');",
											"    pm.expect(jsonData).to.have.property('ValuesSql');",
											"    pm.expect(jsonData).to.have.property('ValidateParams');",
											"    pm.expect(jsonData).to.have.property('ValuesParams');",
											"    pm.expect(jsonData).to.have.property('Length');",
											"    pm.expect(jsonData).to.have.property('ItemTextLength');",
											"    pm.expect(jsonData).to.have.property('TableName');",
											"    pm.expect(jsonData).to.have.property('LookUpTableCreated');",
											"    pm.expect(jsonData).to.have.property('DataType');",
											"    pm.expect(jsonData).to.have.property('CreatedById');",
											"    pm.expect(jsonData).to.have.property('CreatedDate');",
											"    pm.expect(jsonData).to.have.property('ModifiedById');",
											"    pm.expect(jsonData).to.have.property('ModifiedDate');",
											"    ",
											"    //Verify correct values are present in response body.",
											"    pm.expect(jsonData.Id).to.eql(pm.variables.get('Lookups_get_id'));",
											"    pm.expect(jsonData.Description).to.eql(pm.variables.get('Lookups_post_description'));",
											"    pm.expect(jsonData.CreatedById).not.eql(null);",
											"    pm.expect(jsonData.CreatedDate).not.eql(null);",
											"    pm.expect(jsonData.ModifiedById).not.eql(null);",
											"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "OData-Version",
										"value": "4.0"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization-Token",
										"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
									}
								],
								"url": {
									"raw": "{{SiteURL}}api/Lookups({{Lookups_get_id}})",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"Lookups({{Lookups_get_id}})"
									]
								},
								"description": "Retrieves all doc table records"
							},
							"response": []
						},
						{
							"name": "Patch Lookups",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10911135-f5e4-4a41-91ed-452925cbca1e",
										"exec": [
											"pm.test('Verify Response status code and Response body.', function() {",
											"    ",
											"    //Verify response status code.",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
									},
									{
										"key": "OData-Version",
										"value": "4.0"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TableName\": \"Lookup_PostmanPatch\"\n}"
								},
								"url": {
									"raw": "{{SiteURL}}api/Lookups({{Lookups_get_id}})",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"Lookups({{Lookups_get_id}})"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Lookups",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ba50c56-f382-449c-b79c-539337a92785",
										"exec": [
											"pm.test('Verify Response status code and Response body.', function() {",
											"    ",
											"    //Verify response status code.",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
									},
									{
										"key": "OData-Version",
										"value": "4.0"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"Id\":{{Lookups_get_id}},\n\t\"UseCurrentDatabase\": true,\n\t\"CacheScope\": \"NoCache\",\n\t\"AllowDisableValues\": false,\n\t\"Description\": \"{{Lookups_post_description}}\",\n\t\"DataSource\": \"\",\n\t\"ServerName\": \"\",\n\t\"DatabaseName\": \"\",\n\t\"DbUserId\": \"\",\n\t\"DbPwd\": \"\",\n\t\"ValidateSql\": \"\",\n\t\"ValuesSql\": \"SELECT itemvalue as 'itemid', itemvalue FROM Lookup_PostmanTest3\",\n\t\"ValidateParams\": 0,\n\t\"ValuesParams\": 0,\n\t\"Length\": 10,\n\t\"ItemTextLength\": null,\n\t\"TableName\": \"Lookup_PostmanPut\",\n\t\"LookUpTableCreated\": 1,\n\t\"DataType\": 1\n}"
								},
								"url": {
									"raw": "{{SiteURL}}api/Lookups({{Lookups_get_id}})",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"Lookups({{Lookups_get_id}})"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All LookUps",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c93153e7-c4e4-4717-956c-5991794fb244",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Verify Response status code and Response body.\", function () {",
											"    ",
											"    //Verify response status code.",
											"    pm.response.to.have.status(200);",
											"    ",
											"    //Verify all fields are present in response body.",
											"    pm.expect(jsonData).to.have.property('value');",
											"    pm.expect(jsonData.value[0]).to.have.property('UseCurrentDatabase');",
											"    pm.expect(jsonData.value[0]).to.have.property('CacheScope');",
											"    pm.expect(jsonData.value[0]).to.have.property('AllowDisableValues');",
											"    pm.expect(jsonData.value[0]).to.have.property('Id');",
											"    pm.expect(jsonData.value[0]).to.have.property('Description');",
											"    pm.expect(jsonData.value[0]).to.have.property('DataSource');",
											"    pm.expect(jsonData.value[0]).to.have.property('ServerName');",
											"    pm.expect(jsonData.value[0]).to.have.property('DatabaseName');",
											"    pm.expect(jsonData.value[0]).to.have.property('DbUserId');",
											"    pm.expect(jsonData.value[0]).to.have.property('DbPwd');",
											"    pm.expect(jsonData.value[0]).to.have.property('ValidateSql');",
											"    pm.expect(jsonData.value[0]).to.have.property('ValuesSql');",
											"    pm.expect(jsonData.value[0]).to.have.property('ValidateParams');",
											"    pm.expect(jsonData.value[0]).to.have.property('ValuesParams');",
											"    pm.expect(jsonData.value[0]).to.have.property('Length');",
											"    pm.expect(jsonData.value[0]).to.have.property('ItemTextLength');",
											"    pm.expect(jsonData.value[0]).to.have.property('TableName');",
											"    pm.expect(jsonData.value[0]).to.have.property('LookUpTableCreated');",
											"    pm.expect(jsonData.value[0]).to.have.property('DataType');",
											"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
											"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
											"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
											"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
											"    ",
											"    //Verify response body contains collection of categories",
											"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "OData-Version",
										"value": "4.0"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization-Token",
										"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
									}
								],
								"url": {
									"raw": "{{SiteURL}}api/Lookups",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"Lookups"
									]
								},
								"description": "Retrieves all doc table records"
							},
							"response": []
						},
						{
							"name": "Delete Lookups",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7a02f57-e230-440d-ae4b-e2f6ab01c976",
										"exec": [
											"pm.test('Verify Response status code and Response body.', function() {",
											"    ",
											"    //Verify response status code.",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "OData-Version",
										"value": "4.0"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization-Token",
										"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{SiteURL}}api/Lookups({{Lookups_get_id}})",
									"host": [
										"{{SiteURL}}api"
									],
									"path": [
										"Lookups({{Lookups_get_id}})"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "04 DocumentClassification",
			"item": [
				{
					"name": "Doc Interfaces",
					"item": [
						{
							"name": "Test-Happy path",
							"item": [
								{
									"name": "Post DocInterface Interfaces Children",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f037b981-db28-4553-875f-4be9eb232a30",
												"exec": [
													"var InterfaceAssembly = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 9);\r",
													"pm.globals.set(\"InterfaceAssembly\", InterfaceAssembly);\r",
													"\r",
													"var DocInterfaceName = \"POST_\"+Date.now();\r",
													"pm.globals.set(\"DocInterfaceName_post_name\", DocInterfaceName);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "66e9dd33-9520-4ee9-97e9-7c1841042f39",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Initialize jsonData",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('DocInterfaceId');",
													"    pm.expect(jsonData).to.have.property('DocInterfaceName');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('InterfaceAssembly');",
													"    pm.expect(jsonData).to.have.property('InterfaceClass');",
													"    pm.expect(jsonData).to.have.property('InterfaceConfig');",
													"    pm.expect(jsonData).to.have.property('AdminUrl');",
													"    pm.expect(jsonData).to.have.property('DataTableProviderTypeId');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.DocInterfaceName).to.eql(pm.variables.get('DocInterfaceName_post_name'));",
													"    pm.expect(jsonData.InterfaceAssembly).to.eql(pm.variables.get('InterfaceAssembly'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var DocInterfaceId = jsonData.DocInterfaceId;",
													"    pm.globals.set(\"DocInterfaceId_get_id\", DocInterfaceId);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"DocInterfaceName\": \"{{DocInterfaceName_post_name}}\",\n    \"Description\": \"Create Doc Interface\",\n    \"InterfaceAssembly\": \"{{InterfaceAssembly}}\",\n    \"InterfaceClass\": \"aaa\",\n    \"InterfaceConfig\": null,\n    \"AdminUrl\": \"\",\n    \"DataTableProviderTypeId\": 1\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocInterfaces"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get DocInterface Interface with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5b572af9-4dfd-4bf2-bf12-bfc012fd9885",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Initialize jsonData",
													"    jsonData = pm.response.json();",
													"",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('DocInterfaceId');",
													"    pm.expect(jsonData).to.have.property('DocInterfaceName');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('InterfaceAssembly');",
													"    pm.expect(jsonData).to.have.property('InterfaceClass');",
													"    pm.expect(jsonData).to.have.property('InterfaceConfig');",
													"    pm.expect(jsonData).to.have.property('AdminUrl');",
													"    pm.expect(jsonData).to.have.property('DataTableProviderTypeId');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.DocInterfaceId).to.eql(pm.variables.get('DocInterfaceId_get_id'));",
													"    pm.expect(jsonData.DocInterfaceName).to.eql(pm.variables.get('DocInterfaceName_post_name'));",
													"    pm.expect(jsonData.InterfaceAssembly).to.eql(pm.variables.get('InterfaceAssembly'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/DocInterfaces({{DocInterfaceId_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocInterfaces({{DocInterfaceId_get_id}})"
											]
										},
										"description": "Get DocType with key =500"
									},
									"response": []
								},
								{
									"name": "Patch DocInterface Interfaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4b9a13d3-2a92-4e49-9632-5b31d545a2aa",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Description\": \"Postman patch - DocInterfaces\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocInterfaces({{DocInterfaceId_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocInterfaces({{DocInterfaceId_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put DocInterface Interfaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1045dcc5-2a0b-472e-a536-ad5aba6186d5",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"DocInterfaceId\": {{DocInterfaceId_get_id}},\n    \"DocInterfaceName\": \"{{DocInterfaceName_post_name}}\",\n    \"Description\": \"Postman put - DocInterfaces\",\n    \"InterfaceAssembly\": \"{{InterfaceAssembly}}\",\n    \"InterfaceClass\": \"xxx.yyy.zzzzzz\",\n    \"InterfaceConfig\": null,\n    \"AdminUrl\": \"\",\n    \"DataTableProviderTypeId\": 1\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocInterfaces({{DocInterfaceId_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocInterfaces({{DocInterfaceId_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All DocInterface Interfaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b7362847-9d95-4596-a7ab-615c0d41d1c0",
												"exec": [
													"var jsonData;",
													"",
													"pm.test(\"Verify Response status code and Response body.\", function () {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Initialize jsonData",
													"    jsonData = pm.response.json();",
													"",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('DocInterfaceId');",
													"    pm.expect(jsonData.value[0]).to.have.property('DocInterfaceName');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('InterfaceAssembly');",
													"    pm.expect(jsonData.value[0]).to.have.property('InterfaceClass');",
													"    pm.expect(jsonData.value[0]).to.have.property('InterfaceConfig');",
													"    pm.expect(jsonData.value[0]).to.have.property('AdminUrl');",
													"    pm.expect(jsonData.value[0]).to.have.property('DataTableProviderTypeId');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/DocInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocInterfaces"
											]
										},
										"description": "Retrieves all DocType Property Interfaces records"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Doc Tables",
					"item": [
						{
							"name": "Test-Happy path",
							"item": [
								{
									"name": "Post Doc Tables with Fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c1f096e1-b988-4d0b-a88e-f72352261e9a",
												"exec": [
													"var tableName = \"T\"+Date.now();\r",
													"pm.globals.set(\"DocTables_post_tableName\", tableName);\r",
													"pm.globals.set(\"DocTables_post_docTableName\", 'DOCTBL_'+tableName);\r",
													"pm.globals.set(\"DocTables_post_FieldAName\", 'FieldA'+Date.now());\r",
													"pm.globals.set(\"DocTables_post_FieldBName\", 'FieldB'+Date.now());\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "31592ba4-7def-4632-b4b3-2d0f44595d7c",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(201);\r",
													"    \r",
													"    jsonData = pm.response.json();\r",
													"\r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('DocTableId');\r",
													"    pm.expect(jsonData).to.have.property('DocTableName');\r",
													"    pm.expect(jsonData).to.have.property('DocTableDescription');\r",
													"    pm.expect(jsonData).to.have.property('TableName');\r",
													"    pm.expect(jsonData).to.have.property('IsDisabled');\r",
													"    pm.expect(jsonData).to.have.property('DocInterfaceId');\r",
													"    pm.expect(jsonData).to.have.property('InterfaceConfig');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"\tpm.expect(jsonData.TableName).to.eql(pm.variables.get('DocTables_post_tableName'));\r",
													"\tpm.expect(jsonData.DocTableName).to.eql(pm.variables.get('DocTables_post_docTableName'));\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"    \r",
													"    setData();\r",
													"});\r",
													"\r",
													"function setData() {\r",
													"    var docTableId = jsonData.DocTableId;\r",
													"    pm.globals.set(\"DocTables_get_id\", docTableId);\r",
													"    //pm.globals.set(\"DocTables_get_id\", 1000063); //This needs to be removed once bug is fixed\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"DocTableName\": \"{{DocTables_post_docTableName}}\",\r\n\t\"DocTableDescription\": \"Create new doc table\",\r\n\t\"TableName\": \"{{DocTables_post_tableName}}\",\r\n\t\"IsDisabled\": false,\r\n\t\"DocInterfaceId\": 1,\r\n\t\"InterfaceConfig\": \"string\",\r\n\t\"DocTableXFields\": [\r\n\t\t{\r\n\t\t\t\"IsMultiValue\": false,\r\n\t\t\t\"IsDisabled\": false,\r\n\t\t\t\"MultiValueTable\": \"\",\r\n\t\t\t\"FieldType\": {\r\n\t\t\t\t\"Name\": \"{{DocTables_post_FieldAName}}\",\r\n\t\t\t\t\"Description\": \"Create Field for doctable\",\r\n\t\t\t\t\"FieldType\": 7,\r\n\t\t\t\t\"CategoryType\": 1,\r\n\t\t\t\t\"FieldLength\": 2147483646,\r\n\t\t\t\t\"MinFieldLength\": 0,\r\n\t\t\t\t\"ColumnName\": \"DBColName\",\r\n\t\t\t\t\"FieldMask\": null,\r\n\t\t\t\t\"FieldPrecision\": 0,\r\n\t\t\t\t\"ForeignDataSourceId\": 0\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"IsMultiValue\": false,\r\n\t\t\t\"IsDisabled\": false,\r\n\t\t\t\"MultiValueTable\": \"\",\r\n\t\t\t\"FieldType\": {\r\n\t\t\t\t\"Name\": \"{{DocTables_post_FieldBName}}\",\r\n\t\t\t\t\"Description\": \"Create field for doctable\",\r\n\t\t\t\t\"FieldType\": 7,\r\n\t\t\t\t\"CategoryType\": 1,\r\n\t\t\t\t\"FieldLength\": 2147483646,\r\n\t\t\t\t\"MinFieldLength\": 0,\r\n\t\t\t\t\"ColumnName\": \"DBColName\",\r\n\t\t\t\t\"FieldMask\": null,\r\n\t\t\t\t\"FieldPrecision\": 0,\r\n\t\t\t\t\"ForeignDataSourceId\": 0\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"IsMultiValue\": false,\r\n\t\t\t\"IsDisabled\": false,\r\n\t\t\t\"MultiValueTable\": \"\",\r\n\t\t\t\"FieldId\": -1000\r\n\t\t},\r\n\t\t\t\t{\r\n\t\t\t\"IsMultiValue\": false,\r\n\t\t\t\"IsDisabled\": false,\r\n\t\t\t\"MultiValueTable\": \"\",\r\n\t\t\t\"FieldId\": -1001\r\n\t\t}\r\n\t]\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocTables",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTables"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get DocTables with Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2380f8b7-fde8-4dd9-80e5-677fb08f0a5b",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    jsonData = pm.response.json();\r",
													"\r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('DocTableId');\r",
													"    pm.expect(jsonData).to.have.property('DocTableName');\r",
													"    pm.expect(jsonData).to.have.property('DocTableDescription');\r",
													"    pm.expect(jsonData).to.have.property('TableName');\r",
													"    pm.expect(jsonData).to.have.property('IsDisabled');\r",
													"    pm.expect(jsonData).to.have.property('DocInterfaceId');\r",
													"    pm.expect(jsonData).to.have.property('InterfaceConfig');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"\tpm.expect(jsonData.TableName).to.eql(pm.variables.get('DocTables_post_tableName'));\r",
													"\tpm.expect(jsonData.DocTableName).to.eql(pm.variables.get('DocTables_post_docTableName'));\r",
													"\tpm.expect(jsonData.DocTableId).to.eql(pm.variables.get('DocTables_get_id'));\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											},
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/DocTables({{DocTables_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTables({{DocTables_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch DocTables",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2380f8b7-fde8-4dd9-80e5-677fb08f0a5b",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"DocTableDescription\": \"Postman Patch - DocTables\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocTables({{DocTables_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTables({{DocTables_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put DocTables",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2380f8b7-fde8-4dd9-80e5-677fb08f0a5b",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"DocTableId\": {{DocTables_get_id}},\r\n\t\"DocTableName\": \"{{DocTables_post_docTableName}}\",\r\n\t\"DocTableDescription\": \"Postman Put - DocTables\",\r\n\t\"TableName\": \"{{DocTables_post_tableName}}\",\r\n\t\"IsDisabled\": false,\r\n\t\"DocInterfaceId\": 1,\r\n\t\"InterfaceConfig\": \"string\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocTables({{DocTables_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTables({{DocTables_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All DocTables",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2380f8b7-fde8-4dd9-80e5-677fb08f0a5b",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    jsonData = pm.response.json();\r",
													"\r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('value');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('DocTableId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('DocTableName');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('DocTableDescription');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('TableName');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('IsDisabled');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('DocInterfaceId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('InterfaceConfig');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify response body contains collection of categories\r",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/DocTables",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTables"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "DocTableFields",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "Create new DocTableFields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1df8e54f-7b93-49d6-9f10-c5a764d300b2",
												"exec": [
													"pm.globals.set(\"DocTables_post_FieldCName\", 'FieldC'+Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0f64a810-ee8e-4e0c-876f-b3481ce9fbb5",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    jsonData = pm.response.json();\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(201);\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('Id');\r",
													"    pm.expect(jsonData).to.have.property('DocTableId');\r",
													"    pm.expect(jsonData).to.have.property('FieldId');\r",
													"    pm.expect(jsonData).to.have.property('IsMultiValue');\r",
													"    pm.expect(jsonData).to.have.property('MultiValueTable');\r",
													"    pm.expect(jsonData).to.have.property('IsDisabled');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"    \r",
													"    setData();\r",
													"});\r",
													"\r",
													"function setData() {\r",
													"    var id = jsonData.Id;\r",
													"    pm.globals.set(\"DocTableFields_get_id\", id);\r",
													"\r",
													"    var fieldId = jsonData.FieldId;\r",
													"    pm.globals.set(\"DocTableFields_get_FieldId\", id);\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											},
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\t\r\n\t\"DocTableId\": {{DocTables_get_id}},\r\n\t\"IsMultiValue\": false,\r\n\t\"IsDisabled\": false,\r\n\t\"MultiValueTable\": \"\",\r\n\t\"FieldType\": {\r\n\t\t\"Name\": \"{{DocTables_post_FieldCName}}\",\r\n\t\t\"Description\": \"Create Field for doctable\",\r\n\t\t\"FieldType\": 7,\r\n\t\t\"CategoryType\": 1,\r\n\t\t\"FieldLength\": 2147483646,\r\n\t\t\"MinFieldLength\": 0,\r\n\t\t\"ColumnName\": \"DBColName\",\r\n\t\t\"FieldMask\": null,\r\n\t\t\"FieldPrecision\": 0,\r\n\t\t\"ForeignDataSourceId\": 0\r\n\t}\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocTableFields",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTableFields"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get DocTableFields with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b86ce2f2-64e6-4290-8480-feaacdcf9303",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    jsonData = pm.response.json();\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('Id');\r",
													"    pm.expect(jsonData).to.have.property('DocTableId');\r",
													"    pm.expect(jsonData).to.have.property('FieldId');\r",
													"    pm.expect(jsonData).to.have.property('IsMultiValue');\r",
													"    pm.expect(jsonData).to.have.property('MultiValueTable');\r",
													"    pm.expect(jsonData).to.have.property('IsDisabled');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/DocTableFields({{DocTableFields_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTableFields({{DocTableFields_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch DocTableFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f423fc0-8128-42c2-bfa0-b8fd121f2822",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"IsDisabled\": true\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocTableFields({{DocTableFields_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTableFields({{DocTableFields_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put DocTableFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04414935-a8c5-4d70-8f80-097e2246f39f",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Id\":{{DocTableFields_get_id}},\n\t\"DocTableId\": {{DocTables_get_id}},\n\t\"IsMultiValue\": false,\n\t\"IsDisabled\": false,\n\t\"MultiValueTable\": \"\",\n\t\"FieldId\": {{DocTableFields_get_FieldId}}\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocTableFields({{DocTableFields_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTableFields({{DocTableFields_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All DocTableFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a6498cd-333c-44a5-a641-2059831863bc",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify Response status code and Response body.\", function () {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('value');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('DocTableId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('FieldId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('IsMultiValue');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('MultiValueTable');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('IsDisabled');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify response body contains collection of categories\r",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/DocTableFields",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTableFields"
											]
										},
										"description": "Retrieves all DocType Property Interfaces records"
									},
									"response": []
								},
								{
									"name": "Delete DocTableFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c076f3a-9521-451f-83a9-6cc14564c7de",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/DocTableFields({{DocTableFields_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTableFields({{DocTableFields_get_id}})"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Doc Classes",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "Post Doc Classes with Children",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4594990e-db6e-44ba-8c3e-1c058196e5f8",
												"exec": [
													"var Name = \"DC\"+Date.now();\r",
													"pm.globals.set(\"DocClasses_post_name\", Name);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5227a0af-691f-449e-9069-0b3f1d125c64",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(201);\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"\r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('IsSearchEnabled');\r",
													"    pm.expect(jsonData).to.have.property('IsManaged');\r",
													"    pm.expect(jsonData).to.have.property('DocClassName');\r",
													"    pm.expect(jsonData).to.have.property('DocClassDescription');\r",
													"    pm.expect(jsonData).to.have.property('CustomFlags');\r",
													"    pm.expect(jsonData).to.have.property('DocTableId');\r",
													"    pm.expect(jsonData).to.have.property('DocClassView');\r",
													"    pm.expect(jsonData).to.have.property('SearchInterfaceId');\r",
													"    pm.expect(jsonData).to.have.property('DocumentInterfaceId');\r",
													"    pm.expect(jsonData).to.have.property('RecordsManagementId');\r",
													"    pm.expect(jsonData).to.have.property('StoragePathId');\r",
													"    pm.expect(jsonData).to.have.property('StorageServerId');\r",
													"    pm.expect(jsonData).to.have.property('InterfaceConfig');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"\tpm.expect(jsonData.DocClassName).to.eql(pm.variables.get('DocClasses_post_name'));\r",
													"\tpm.expect(jsonData.DocTableId).to.eql(pm.variables.get('DocTables_get_id'));\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"    \r",
													"    setData();\r",
													"});\r",
													"\r",
													"function setData() {\r",
													"    var id = jsonData.DocClassId;\r",
													"    pm.globals.set(\"DocClasses_get_id\", id);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"IsSearchEnabled\": true,\n  \"IsManaged\": true,\n  \"DocClassName\": \"{{DocClasses_post_name}}\",\n  \"DocClassDescription\": \"Create new Doc Class\",\n  \"CustomFlags\": null,\n  \"DocTableId\": {{DocTables_get_id}},\n  \"DocClassView\": null,\n  \"SearchInterfaceId\": 1,\n  \"DocumentInterfaceId\": 0,\n  \"RecordsManagementId\": 1,\n  \"StoragePathId\": 1,\n  \"StorageServerId\": 1,\n  \"InterfaceConfig\": \"string\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocClasses",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocClasses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Doc Classes with children",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e90bbaed-1b9f-477f-bdc9-32a377b2c60d",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('IsSearchEnabled');\r",
													"    pm.expect(jsonData).to.have.property('IsManaged');\r",
													"    pm.expect(jsonData).to.have.property('DocClassId');\r",
													"    pm.expect(jsonData).to.have.property('DocClassName');\r",
													"    pm.expect(jsonData).to.have.property('DocClassDescription');\r",
													"    pm.expect(jsonData).to.have.property('CustomFlags');\r",
													"    pm.expect(jsonData).to.have.property('DocTableId');\r",
													"    pm.expect(jsonData).to.have.property('DocClassView');\r",
													"    pm.expect(jsonData).to.have.property('SearchInterfaceId');\r",
													"    pm.expect(jsonData).to.have.property('DocumentInterfaceId');\r",
													"    pm.expect(jsonData).to.have.property('RecordsManagementId');\r",
													"    pm.expect(jsonData).to.have.property('StoragePathId');\r",
													"    pm.expect(jsonData).to.have.property('StorageServerId');\r",
													"    pm.expect(jsonData).to.have.property('InterfaceConfig');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"\tpm.expect(jsonData.DocClassName).to.eql(pm.variables.get('DocClasses_post_name'));\r",
													"\tpm.expect(jsonData.DocTableId).to.eql(pm.variables.get('DocTables_get_id'));\r",
													"\tpm.expect(jsonData.DocClassId).to.eql(pm.variables.get('DocClasses_get_id'));\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/DocClasses({{DocClasses_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocClasses({{DocClasses_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Doc Classes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "51da8e59-cbb8-4e9d-b93e-9bb32115d2a8",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"DocClassDescription\": \"Postman PATCH Doc class desc\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocClasses({{DocClasses_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocClasses({{DocClasses_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Doc Classes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "abc18fa2-2b13-4d1c-9f1e-84ef2c7aa082",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"IsSearchEnabled\": true,\n  \"IsManaged\": true,\n  \"DocClassId\": {{DocClasses_get_id}},\n  \"DocClassName\": \"{{DocClasses_post_name}}\",\n  \"DocClassDescription\": \"Postman PUT Doc class desc\",\n  \"CustomFlags\": null,\n  \"DocTableId\": {{DocTables_get_id}},\n  \"DocClassView\": null,\n  \"SearchInterfaceId\": 1,\n  \"DocumentInterfaceId\": 0,\n  \"RecordsManagementId\": 1,\n  \"StoragePathId\": 1,\n  \"StorageServerId\": 1,\n  \"InterfaceConfig\": \"string\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocClasses({{DocClasses_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocClasses({{DocClasses_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Doc Classes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74024a4d-5e8d-4ada-a630-0632f7e0d40f",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('DocClassId');",
													"    pm.expect(jsonData.value[0]).to.have.property('DocClassName');",
													"    pm.expect(jsonData.value[0]).to.have.property('DocClassDescription');",
													"    pm.expect(jsonData.value[0]).to.have.property('CustomFlags');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/DocClasses",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocClasses"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "DocClassFields",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "Post DocClassFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1a69363-c657-4539-82ae-c3e1781e9c97",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(201);\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"\r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('Id');\r",
													"    pm.expect(jsonData).to.have.property('HideOnImport');\r",
													"    pm.expect(jsonData).to.have.property('Required');\r",
													"    pm.expect(jsonData).to.have.property('ForceConstraint');\r",
													"    pm.expect(jsonData).to.have.property('FieldId');\r",
													"    pm.expect(jsonData).to.have.property('DocClassId');\r",
													"    pm.expect(jsonData).to.have.property('LookUpIdEdit');\r",
													"    pm.expect(jsonData).to.have.property('Sequence');\r",
													"    pm.expect(jsonData).to.have.property('OverrideFieldName');\r",
													"    pm.expect(jsonData).to.have.property('OverrideFieldMask');\r",
													"    pm.expect(jsonData).to.have.property('ForcedValue');\r",
													"    pm.expect(jsonData).to.have.property('FieldValidationId');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"\tpm.expect(jsonData.DocClassId).to.eql(pm.variables.get('DocClasses_get_id'));\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"    \r",
													"    setData();\r",
													"});\r",
													"\r",
													"function setData() {\r",
													"    var id = jsonData.Id;\r",
													"    pm.globals.set(\"DocClassFields_get_id\", id);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"HideOnImport\": false,\n\t\"Required\": false,\n\t\"ForceConstraint\": false,\n\t\"FieldId\": -1000,\n\t\"DocClassId\": {{DocClasses_get_id}},\n\t\"LookUpIdEdit\": 0,\n\t\"Sequence\": 5,\n\t\"OverrideFieldName\": \"\",\n\t\"OverrideFieldMask\": \"\",\n\t\"ForcedValue\": \"\",\n\t\"FieldValidationId\": 0\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocClassFields",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocClassFields"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get DocClassFields with Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "410b6f3d-d277-483a-b9e2-28e22731651d",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('HideOnImport');\r",
													"    pm.expect(jsonData).to.have.property('Required');\r",
													"    pm.expect(jsonData).to.have.property('ForceConstraint');\r",
													"    pm.expect(jsonData).to.have.property('FieldId');\r",
													"    pm.expect(jsonData).to.have.property('DocClassId');\r",
													"    pm.expect(jsonData).to.have.property('LookUpIdEdit');\r",
													"    pm.expect(jsonData).to.have.property('Sequence');\r",
													"    pm.expect(jsonData).to.have.property('OverrideFieldName');\r",
													"    pm.expect(jsonData).to.have.property('OverrideFieldMask');\r",
													"    pm.expect(jsonData).to.have.property('ForcedValue');\r",
													"    pm.expect(jsonData).to.have.property('FieldValidationId');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"\tpm.expect(jsonData.DocClassId).to.eql(pm.variables.get('DocClasses_get_id'));\r",
													"\tpm.expect(jsonData.Id).to.eql(pm.variables.get('DocClassFields_get_id'));\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/DocClassFields({{DocClassFields_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocClassFields({{DocClassFields_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch DocClassFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b1f14c1-4f61-45d3-a2ea-8b2a704fb4ea",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Sequence\": 6\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocClassFields({{DocClassFields_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocClassFields({{DocClassFields_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put DocClassFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2cb3a3e6-7df0-4502-bdd0-839f25b56181",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Id\":{{DocClassFields_get_id}},\n\t\"HideOnImport\": false,\n\t\"Required\": false,\n\t\"ForceConstraint\": false,\n\t\"FieldId\": -1000,\n\t\"DocClassId\": {{DocClasses_get_id}},\n\t\"LookUpIdEdit\": 0,\n\t\"Sequence\": 5,\n\t\"OverrideFieldName\": \"\",\n\t\"OverrideFieldMask\": \"\",\n\t\"ForcedValue\": \"\",\n\t\"FieldValidationId\": 0\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocClassFields({{DocClassFields_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocClassFields({{DocClassFields_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All DocClassFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c0fa7aa2-8cdf-42c3-a064-d9e6454ab6d3",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('value');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('HideOnImport');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Required');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ForceConstraint');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('FieldId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('DocClassId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('LookUpIdEdit');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Sequence');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('OverrideFieldName');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('OverrideFieldMask');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ForcedValue');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('FieldValidationId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify response body contains collection of categories\r",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/DocClassFields",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocClassFields"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Delete DocClassFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88e252d7-0a73-4c4a-ac48-5a0f9ca27e55",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{SiteURL}}api/DocClassFields({{DocClassFields_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocClassFields({{DocClassFields_get_id}})"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "DocClassAccess",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "Post DocClassAccess",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc9c1ce7-cc9c-4fc4-b36d-513d7d54d379",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(201);\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"\r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('DocClassId');\r",
													"    pm.expect(jsonData).to.have.property('UserGroupId');\r",
													"    pm.expect(jsonData).to.have.property('CanCreate');\r",
													"    pm.expect(jsonData).to.have.property('CanDelete');\r",
													"    pm.expect(jsonData).to.have.property('CanModify');\r",
													"    pm.expect(jsonData).to.have.property('CanRevise');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"\tpm.expect(jsonData.DocClassId).to.eql(pm.variables.get('DocClasses_get_id'));\r",
													"\tpm.expect(jsonData.UserGroupId).to.eql(pm.variables.get('DocClassesAccess_post_usergroupid'));\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d020b10c-06c3-419f-9e2b-5875464f6fc7",
												"exec": [
													"var Name = \"DC\"+Date.now();\r",
													"pm.globals.set(\"DocClassesAccess_post_usergroupid\", 1);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											},
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"DocClassId\": {{DocClasses_get_id}},\r\n  \"UserGroupId\": {{DocClassesAccess_post_usergroupid}},\r\n  \"CanCreate\": true,\r\n  \"CanDelete\": true,\r\n  \"CanModify\": true,\r\n  \"CanRevise\": true\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocClassAccess",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocClassAccess"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get DocClassAccess with Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc9c1ce7-cc9c-4fc4-b36d-513d7d54d379",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"\r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('DocClassId');\r",
													"    pm.expect(jsonData).to.have.property('UserGroupId');\r",
													"    pm.expect(jsonData).to.have.property('CanCreate');\r",
													"    pm.expect(jsonData).to.have.property('CanDelete');\r",
													"    pm.expect(jsonData).to.have.property('CanModify');\r",
													"    pm.expect(jsonData).to.have.property('CanRevise');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"\tpm.expect(jsonData.DocClassId).to.eql(pm.variables.get('DocClasses_get_id'));\r",
													"\tpm.expect(jsonData.UserGroupId).to.eql(pm.variables.get('DocClassesAccess_post_usergroupid'));\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/DocClassAccess(DocClassId={{DocClasses_get_id}},UserGroupId={{DocClassesAccess_post_usergroupid}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocClassAccess(DocClassId={{DocClasses_get_id}},UserGroupId={{DocClassesAccess_post_usergroupid}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch DocClassAccess",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc9c1ce7-cc9c-4fc4-b36d-513d7d54d379",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"CanCreate\": false\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocClassAccess(DocClassId={{DocClasses_get_id}},UserGroupId={{DocClassesAccess_post_usergroupid}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocClassAccess(DocClassId={{DocClasses_get_id}},UserGroupId={{DocClassesAccess_post_usergroupid}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put DocClassAccess",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc9c1ce7-cc9c-4fc4-b36d-513d7d54d379",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"DocClassId\": {{DocClasses_get_id}},\r\n  \"UserGroupId\": {{DocClassesAccess_post_usergroupid}},\r\n  \"CanCreate\": true,\r\n  \"CanDelete\": false,\r\n  \"CanModify\": true,\r\n  \"CanRevise\": true\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocClassAccess(DocClassId={{DocClasses_get_id}},UserGroupId={{DocClassesAccess_post_usergroupid}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocClassAccess(DocClassId={{DocClasses_get_id}},UserGroupId={{DocClassesAccess_post_usergroupid}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All DocClassAccess",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc9c1ce7-cc9c-4fc4-b36d-513d7d54d379",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"\r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('value');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('DocClassId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('UserGroupId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CanCreate');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CanDelete');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CanModify');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CanRevise');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify response body contains collection of categories\r",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/DocClassAccess",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocClassAccess"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete DocClassAccess",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc9c1ce7-cc9c-4fc4-b36d-513d7d54d379",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/DocClassAccess(DocClassId={{DocClasses_get_id}},UserGroupId={{DocClassesAccess_post_usergroupid}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocClassAccess(DocClassId={{DocClasses_get_id}},UserGroupId={{DocClassesAccess_post_usergroupid}})"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Doc Types",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Post DocTypes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e74dd61d-a2f7-41ac-aacb-2c005ef2c0cd",
												"exec": [
													"var Name = \"DT\"+Date.now();\r",
													"pm.globals.set(\"DocTypes_post_name\", Name);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3aad0fa9-4cf6-4d4d-9155-a4690786c682",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(201);\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"\r",
													"\t//Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('AutoTitleFlag');\r",
													"    pm.expect(jsonData).to.have.property('UseDefaultWmiConfig');\r",
													"    pm.expect(jsonData).to.have.property('ContentMode');\r",
													"    pm.expect(jsonData).to.have.property('AllowDeleteAllPages');\r",
													"    pm.expect(jsonData).to.have.property('Disabled');\r",
													"    pm.expect(jsonData).to.have.property('Id');\r",
													"    pm.expect(jsonData).to.have.property('Name');\r",
													"\tpm.expect(jsonData).to.have.property('CustomFlags');\r",
													"    pm.expect(jsonData).to.have.property('DocClassId');\r",
													"    pm.expect(jsonData).to.have.property('AutoTitle');\r",
													"    pm.expect(jsonData).to.have.property('AssemblyName');\r",
													"    pm.expect(jsonData).to.have.property('AssemblyClassName');\r",
													"    pm.expect(jsonData).to.have.property('AdminAssemblyName');\r",
													"\tpm.expect(jsonData).to.have.property('AdminAssemblyClassName');\r",
													"\tpm.expect(jsonData).to.have.property('Url');\r",
													"\tpm.expect(jsonData).to.have.property('PropInterfaceId');\r",
													"\tpm.expect(jsonData).to.have.property('WmConfigData');\r",
													"\tpm.expect(jsonData).to.have.property('WmiInterfaceId');\r",
													"\tpm.expect(jsonData).to.have.property('IndexContent');\r",
													"\tpm.expect(jsonData).to.have.property('LibraryId');\r",
													"\tpm.expect(jsonData).to.have.property('AuditControlType');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('DocTypes_post_name'));\r",
													"\tpm.expect(jsonData.DocClassId).to.eql(pm.variables.get('DocClasses_get_id'));\r",
													"\tpm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"    \r",
													"    setData();\r",
													"});\r",
													"\r",
													"function setData() {\r",
													"    var id = jsonData.Id;\r",
													"    pm.globals.set(\"DocTypes_get_id\", id);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Name\": \"{{DocTypes_post_name}}\",\r\n  \"CustomFlags\": \"@CURRDATE\",\r\n  \"DocClassId\": {{DocClasses_get_id}},\r\n  \"AutoTitleFlag\": true,\r\n  \"AutoTitle\": \"Auto_Title\",\r\n  \"AssemblyName\": \"com.edm.assembly\",\r\n  \"AssemblyClassName\": \"com.edm.assembly.classname\",\r\n  \"AdminAssemblyName\": \"com.edm.adminassembly\",\r\n  \"AdminAssemblyClassName\": \"com.edm.adminassembly.classname\",\r\n  \"Url\": \"string\",\r\n  \"PropInterfaceId\": 1,\r\n  \"WmConfigData\": \"string\",\r\n  \"WmiInterfaceId\": 1,\r\n  \"UseDefaultWmiConfig\": true,\r\n  \"ContentMode\": 0,\r\n  \"IndexContent\": 0,\r\n  \"LibraryId\": 0,\r\n  \"AllowDeleteAllPages\": true,\r\n  \"AuditControlType\": 0,\r\n  \"Disabled\": true\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocTypes",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTypes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get DocType with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d47b0274-c3da-4497-8aba-6664cd09bfdf",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"\r",
													"\t//Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('AutoTitleFlag');\r",
													"    pm.expect(jsonData).to.have.property('UseDefaultWmiConfig');\r",
													"    pm.expect(jsonData).to.have.property('ContentMode');\r",
													"    pm.expect(jsonData).to.have.property('AllowDeleteAllPages');\r",
													"    pm.expect(jsonData).to.have.property('Disabled');\r",
													"    pm.expect(jsonData).to.have.property('Id');\r",
													"    pm.expect(jsonData).to.have.property('Name');\r",
													"\tpm.expect(jsonData).to.have.property('CustomFlags');\r",
													"    pm.expect(jsonData).to.have.property('DocClassId');\r",
													"    pm.expect(jsonData).to.have.property('AutoTitle');\r",
													"    pm.expect(jsonData).to.have.property('AssemblyName');\r",
													"    pm.expect(jsonData).to.have.property('AssemblyClassName');\r",
													"    pm.expect(jsonData).to.have.property('AdminAssemblyName');\r",
													"\tpm.expect(jsonData).to.have.property('AdminAssemblyClassName');\r",
													"\tpm.expect(jsonData).to.have.property('Url');\r",
													"\tpm.expect(jsonData).to.have.property('PropInterfaceId');\r",
													"\tpm.expect(jsonData).to.have.property('WmConfigData');\r",
													"\tpm.expect(jsonData).to.have.property('WmiInterfaceId');\r",
													"\tpm.expect(jsonData).to.have.property('IndexContent');\r",
													"\tpm.expect(jsonData).to.have.property('LibraryId');\r",
													"\tpm.expect(jsonData).to.have.property('AuditControlType');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('DocTypes_post_name'));\r",
													"\tpm.expect(jsonData.DocClassId).to.eql(pm.variables.get('DocClasses_get_id'));\r",
													"\tpm.expect(jsonData.Id).to.eql(pm.variables.get('DocTypes_get_id'));\r",
													"\tpm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/DocTypes({{DocTypes_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTypes({{DocTypes_get_id}})"
											]
										},
										"description": "Get DocType with key =500"
									},
									"response": []
								},
								{
									"name": "Patch DocType",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b96cbcc9-c3b1-4e1e-813a-55e6fd60bf11",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a1d414a9-fc2a-45ea-9238-bcc7f851ad4f",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"AutoTitle\": \"Postman Patch - DocTypes\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocTypes({{DocTypes_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTypes({{DocTypes_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put DocTypes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1e85a5bf-40d8-4fdc-8ece-33f91981efba",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1d42369e-39ec-40e4-87c2-2a8db84de5b3",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Id\": {{DocTypes_get_id}},\r\n  \"Name\": \"{{DocTypes_post_name}}\",\r\n  \"CustomFlags\": \"@CURRDATE\",\r\n  \"DocClassId\": {{DocClasses_get_id}},\r\n  \"AutoTitleFlag\": true,\r\n  \"AutoTitle\": \"Postman put - DocTypes\",\r\n  \"AssemblyName\": \"com.edm.assembly\",\r\n  \"AssemblyClassName\": \"com.edm.assembly.classname\",\r\n  \"AdminAssemblyName\": \"com.edm.adminassembly\",\r\n  \"AdminAssemblyClassName\": \"com.edm.adminassembly.classname\",\r\n  \"Url\": \"string\",\r\n  \"PropInterfaceId\": 1,\r\n  \"WmConfigData\": \"string\",\r\n  \"WmiInterfaceId\": 1,\r\n  \"UseDefaultWmiConfig\": true,\r\n  \"ContentMode\": 0,\r\n  \"IndexContent\": 0,\r\n  \"LibraryId\": 0,\r\n  \"AllowDeleteAllPages\": true,\r\n  \"AuditControlType\": 0,\r\n  \"Disabled\": true\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocTypes({{DocTypes_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTypes({{DocTypes_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All DocTypes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22ce63fd-78ce-405c-a6c8-fee02f9af0a0",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"\r",
													"\t//Verify all fields are present in response body.\r",
													"\tpm.expect(jsonData).to.have.property('value');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('AutoTitleFlag');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('UseDefaultWmiConfig');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ContentMode');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('AllowDeleteAllPages');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Disabled');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');\r",
													"\tpm.expect(jsonData.value[0]).to.have.property('CustomFlags');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('DocClassId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('AutoTitle');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('AssemblyName');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('AssemblyClassName');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('AdminAssemblyName');\r",
													"\tpm.expect(jsonData.value[0]).to.have.property('AdminAssemblyClassName');\r",
													"\tpm.expect(jsonData.value[0]).to.have.property('Url');\r",
													"\tpm.expect(jsonData.value[0]).to.have.property('PropInterfaceId');\r",
													"\tpm.expect(jsonData.value[0]).to.have.property('WmConfigData');\r",
													"\tpm.expect(jsonData.value[0]).to.have.property('WmiInterfaceId');\r",
													"\tpm.expect(jsonData.value[0]).to.have.property('IndexContent');\r",
													"\tpm.expect(jsonData.value[0]).to.have.property('LibraryId');\r",
													"\tpm.expect(jsonData.value[0]).to.have.property('AuditControlType');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify response body contains collection of categories\r",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/DocTypes",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTypes"
											]
										},
										"description": "Retrieves all DocType Property Interfaces records"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "DocTypeFields",
					"item": [
						{
							"name": "Test-Happy path",
							"item": [
								{
									"name": "Create DocClassFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1a69363-c657-4539-82ae-c3e1781e9c97",
												"exec": [
													"var jsonData;\r",
													"verifyDocClassXFieldCreated();\r",
													"\r",
													"function verifyDocClassXFieldCreated() {\r",
													"    \r",
													"    try {\r",
													"        jsonData = pm.response.json();\r",
													"        pm.response.to.have.status(201);\r",
													"        pm.expect(jsonData).to.have.property('Id');\r",
													"        setData();\r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"}\r",
													"\r",
													"function setData() {\r",
													"    var id = jsonData.Id;\r",
													"    pm.globals.set(\"DocTypesFields_get_DocClassXFieldsId\", id);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"HideOnImport\": false,\n\t\"Required\": false,\n\t\"ForceConstraint\": false,\n\t\"FieldId\": -1001,\n\t\"DocClassId\": {{DocClasses_get_id}},\n\t\"LookUpIdEdit\": 0,\n\t\"Sequence\": 5,\n\t\"OverrideFieldName\": \"\",\n\t\"OverrideFieldMask\": \"\",\n\t\"ForcedValue\": \"\",\n\t\"FieldValidationId\": 0\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocClassFields",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocClassFields"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post DocTypeFields",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"DocClassXFieldsId\": {{DocTypesFields_get_DocClassXFieldsId}},\r\n  \"DocTypeId\": {{DocTypes_get_id}},\r\n  \"FieldNameOverride\": \"string\",\r\n  \"LookupIdEdit\": 0,\r\n  \"FieldValidationId\": 0,\r\n  \"ForceConstraint\": true,\r\n  \"IsRequired\": true,\r\n  \"Sequence\": 0,\r\n  \"ForceValue\": \"string\",\r\n  \"HideOnImport\": true,\r\n  \"FieldMaskOverride\": \"string\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocTypeFields",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTypeFields"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "DocEvent Interfaces",
					"item": [
						{
							"name": "Test - Happy Path",
							"item": [
								{
									"name": "Post DocEvent Interfaces Children",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b7252cd1-e26d-4abb-9532-3e5d7ffdd400",
												"exec": [
													"var Name = \"DocInterface_\"+Date.now();\r",
													"var className = \"Class\"+Date.now();\r",
													"var assemblyName = \"Assembly\"+Date.now();\r",
													"pm.globals.set(\"DocEventInterface_post_name\", Name);\r",
													"pm.globals.set(\"DocEventInterface_post_className\", className);\r",
													"pm.globals.set(\"DocEventInterface_post_assemblyName\", assemblyName);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cfef6877-03c8-46ce-8f85-287d115758cc",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(201);\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"\r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('Id');\r",
													"    pm.expect(jsonData).to.have.property('Name');\r",
													"    pm.expect(jsonData).to.have.property('Description');\r",
													"    pm.expect(jsonData).to.have.property('InterfaceClass');\r",
													"    pm.expect(jsonData).to.have.property('InterfaceAssembly');\r",
													"    pm.expect(jsonData).to.have.property('AdminInterfaceClass');\r",
													"    pm.expect(jsonData).to.have.property('AdminInterfaceAssembly');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('DocEventInterface_post_name'));\r",
													"\tpm.expect(jsonData.InterfaceClass).to.eql(pm.variables.get('DocEventInterface_post_className'));\r",
													"\tpm.expect(jsonData.InterfaceAssembly).to.eql(pm.variables.get('DocEventInterface_post_assemblyName'));\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"    \r",
													"    setData();\r",
													"});\r",
													"\r",
													"function setData() {\r",
													"    var Id = jsonData.Id;\r",
													"    pm.globals.set(\"DocEventInterface_get_id\", Id);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Name\": \"{{DocEventInterface_post_name}}\",\n\t\"Description\": \"Create new DocInterface\",\n\t\"InterfaceClass\": \"{{DocEventInterface_post_className}}\",\n\t\"InterfaceAssembly\": \"{{DocEventInterface_post_assemblyName}}\",\n\t\"AdminInterfaceClass\": \"Events/Standard/PostmanTest.ascx\",\n\t\"AdminInterfaceAssembly\": \"eIDM.DocEvent.PostmanTest\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocEventInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocEventInterfaces"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get DocEvent Interface with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64973a90-2d5f-4d9f-b5b4-4a706a2355a7",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"\r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('Id');\r",
													"    pm.expect(jsonData).to.have.property('Name');\r",
													"    pm.expect(jsonData).to.have.property('Description');\r",
													"    pm.expect(jsonData).to.have.property('InterfaceClass');\r",
													"    pm.expect(jsonData).to.have.property('InterfaceAssembly');\r",
													"    pm.expect(jsonData).to.have.property('AdminInterfaceClass');\r",
													"    pm.expect(jsonData).to.have.property('AdminInterfaceAssembly');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('DocEventInterface_post_name'));\r",
													"\tpm.expect(jsonData.Id).to.eql(pm.variables.get('DocEventInterface_get_id'));\r",
													"\tpm.expect(jsonData.InterfaceClass).to.eql(pm.variables.get('DocEventInterface_post_className'));\r",
													"\tpm.expect(jsonData.InterfaceAssembly).to.eql(pm.variables.get('DocEventInterface_post_assemblyName'));\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/DocEventInterfaces({{DocEventInterface_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocEventInterfaces({{DocEventInterface_get_id}})"
											]
										},
										"description": "Get DocType with key =500"
									},
									"response": []
								},
								{
									"name": "Patch DocEvent Interfaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3829ea5c-5d6e-4be5-98fe-984e166312d8",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Description\":\"Postman Patch - DocEventInterfaces\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocEventInterfaces({{DocEventInterface_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocEventInterfaces({{DocEventInterface_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put DocEvent Interfaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2440171d-334c-4cb1-b0c3-8b0f228797d0",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Id\": {{DocEventInterface_get_id}},\n\t\"Name\": \"{{DocEventInterface_post_name}}\",\n\t\"Description\": \"Postman Put - DocEventInterfaces\",\n\t\"InterfaceClass\": \"{{DocEventInterface_post_className}}\",\n\t\"InterfaceAssembly\": \"{{DocEventInterface_post_assemblyName}}\",\n\t\"AdminInterfaceClass\": \"Events/Standard/PostmanTest.ascx\",\n\t\"AdminInterfaceAssembly\": \"eIDM.DocEvent.PostmanTest\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocEventInterfaces({{DocEventInterface_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocEventInterfaces({{DocEventInterface_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All DocEvent Interfaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f5297a2-144a-494d-a566-2bd8cb6c6620",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"\r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('value');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('InterfaceClass');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('InterfaceAssembly');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('AdminInterfaceClass');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('AdminInterfaceAssembly');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify response body contains collection of categories\r",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/DocEventInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocEventInterfaces"
											]
										},
										"description": "Retrieves all DocType Property Interfaces records"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "DocEvents",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Post DocEvents Children",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "03a155ec-3d41-4a2a-aa4d-701592e17bce",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(201);\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"\r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('DocEventId');\r",
													"    pm.expect(jsonData).to.have.property('Description');\r",
													"    pm.expect(jsonData).to.have.property('DocClassId');\r",
													"    pm.expect(jsonData).to.have.property('DocTypeId');\r",
													"    pm.expect(jsonData).to.have.property('EventType');\r",
													"    pm.expect(jsonData).to.have.property('EventSequence');\r",
													"    pm.expect(jsonData).to.have.property('EventId');\r",
													"    pm.expect(jsonData).to.have.property('EventData');\r",
													"    pm.expect(jsonData).to.have.property('IgnoreFailure');\r",
													"    pm.expect(jsonData).to.have.property('CauseCascadeRollback');\r",
													"    pm.expect(jsonData).to.have.property('AllowRollback');\r",
													"    pm.expect(jsonData).to.have.property('IsDisabled');\r",
													"    pm.expect(jsonData).to.have.property('DisplayLabel');\r",
													"    pm.expect(jsonData).to.have.property('EventCondition');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"\tpm.expect(jsonData.DocClassId).to.eql(pm.variables.get('DocClasses_get_id'));\r",
													"\tpm.expect(jsonData.DocTypeId).to.eql(pm.variables.get('DocTypes_get_id'));\r",
													"\tpm.expect(jsonData.EventId).to.eql(pm.variables.get('DocEventInterface_get_id'));\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"    \r",
													"    setData();\r",
													"});\r",
													"\r",
													"function setData() {\r",
													"    var Id = jsonData.DocEventId;\r",
													"    pm.globals.set(\"DocEvents_get_id\", Id);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Description\": \"Create new DocEvent\",\n\t\"DocClassId\": {{DocClasses_get_id}},\n\t\"DocTypeId\": {{DocTypes_get_id}},\n\t\"EventType\": 2,\n\t\"EventSequence\": 1,\n\t\"EventId\": {{DocEventInterface_get_id}},\n\t\"EventData\": \"string\",\n\t\"IgnoreFailure\": true,\n\t\"CauseCascadeRollback\": true,\n\t\"AllowRollback\": true,\n\t\"IsDisabled\": true,\n\t\"DisplayLabel\": \"DocEvent\",\n\t\"EventCondition\": \"string\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocEvents",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocEvents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get DocEvent with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eaa590c8-9944-469e-ac1a-17ed6f43eb35",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"\r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('DocEventId');\r",
													"    pm.expect(jsonData).to.have.property('Description');\r",
													"    pm.expect(jsonData).to.have.property('DocClassId');\r",
													"    pm.expect(jsonData).to.have.property('DocTypeId');\r",
													"    pm.expect(jsonData).to.have.property('EventType');\r",
													"    pm.expect(jsonData).to.have.property('EventSequence');\r",
													"    pm.expect(jsonData).to.have.property('EventId');\r",
													"    pm.expect(jsonData).to.have.property('EventData');\r",
													"    pm.expect(jsonData).to.have.property('IgnoreFailure');\r",
													"    pm.expect(jsonData).to.have.property('CauseCascadeRollback');\r",
													"    pm.expect(jsonData).to.have.property('AllowRollback');\r",
													"    pm.expect(jsonData).to.have.property('IsDisabled');\r",
													"    pm.expect(jsonData).to.have.property('DisplayLabel');\r",
													"    pm.expect(jsonData).to.have.property('EventCondition');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"\tpm.expect(jsonData.DocClassId).to.eql(pm.variables.get('DocClasses_get_id'));\r",
													"\tpm.expect(jsonData.DocTypeId).to.eql(pm.variables.get('DocTypes_get_id'));\r",
													"\tpm.expect(jsonData.EventId).to.eql(pm.variables.get('DocEventInterface_get_id'));\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/DocEvents({{DocEvents_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocEvents({{DocEvents_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch DocEvents",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36428764-679c-4947-8505-4abfd8a8b300",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Description\": \"Postman Patch - DocEvents\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocEvents({{DocEvents_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocEvents({{DocEvents_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put DocEvent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77ed6474-9e57-4cca-8b26-231950b2d9e5",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"DocEventId\": {{DocEvents_get_id}},\n\t\"Description\": \"Postman Put - DocEvents\",\n\t\"DocClassId\": {{DocClasses_get_id}},\n\t\"DocTypeId\": {{DocTypes_get_id}},\n\t\"EventType\": 2,\n\t\"EventSequence\": 1,\n\t\"EventId\": {{DocEventInterface_get_id}},\n\t\"EventData\": \"string\",\n\t\"IgnoreFailure\": true,\n\t\"CauseCascadeRollback\": true,\n\t\"AllowRollback\": true,\n\t\"IsDisabled\": true,\n\t\"DisplayLabel\": \"DocEvent\",\n\t\"EventCondition\": \"string\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocEvents({{DocEvents_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocEvents({{DocEvents_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All DocEvents",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "53e0c15f-4110-46a1-a4ff-0cee199a14d5",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"\r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('value');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('DocEventId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('DocClassId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('DocTypeId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('EventType');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('EventSequence');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('EventId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('EventData');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('IgnoreFailure');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CauseCascadeRollback');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('AllowRollback');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('IsDisabled');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('DisplayLabel');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('EventCondition');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify response body contains collection of categories\r",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/DocEvents",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocEvents"
											]
										},
										"description": "Retrieves all DocType Property Interfaces records"
									},
									"response": []
								},
								{
									"name": "Delete DocEvent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c9e5bc5-a4e2-438f-b8ad-cc944792eec3",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/DocEvents({{DocEvents_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocEvents({{DocEvents_get_id}})"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "External Data Interfaces",
					"item": [
						{
							"name": "Test- Happy Path",
							"item": [
								{
									"name": "Post ExternalDataInterfaces Children",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3d5f925e-0088-466b-a747-1cf669e5d0bf",
												"exec": [
													"",
													"",
													"pm.globals.set(\"ExternalDataInterfaceName_post_name\", 'POST_'+Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "20ca6521-cfa0-4d6d-afe7-414d86001a72",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Assembly');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"     //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('ExternalDataInterfaceName_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"ExternalDataInterfacesId\", id);",
													"}   "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \n \"Name\": \"{{ExternalDataInterfaceName_post_name}}\",\n  \"Description\":\"Postman Post Test Data Adapter\",\n  \"Assembly\": \"eIDM.dummy\",\n  \"Class\": \"dummy\",\n  \"AdminAssembly\": \"eIDM.dummy\",\n  \"AdminClass\": \"InterfaceAdmin/dummyConfigAdmin.ascx\"\n }"
										},
										"url": {
											"raw": "{{SiteURL}}api/ExternalDataInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ExternalDataInterfaces"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ExternalDataInterfaces with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "695c9d2f-fc0b-4f8f-bc3c-a206a2e0eea6",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Assembly');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"     //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('ExternalDataInterfaceName_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ExternalDataInterfaces({{ExternalDataInterfacesId}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ExternalDataInterfaces({{ExternalDataInterfacesId}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch ExternalDataInterfaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f6c4cdda-622a-4359-86ef-cdd29ba4979d",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Name\": \"{{ExternalDataInterfaceName_post_name}}\",\n  \"Description\":\"Postman Post Patch Test Data Adapter\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ExternalDataInterfaces({{ExternalDataInterfacesId}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ExternalDataInterfaces({{ExternalDataInterfacesId}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put ExternalDataInterfaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cbb6fc1f-7e3e-4604-9cce-ba5aedbdc26d",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cef558da-53b3-4d78-86a1-2b6ca139a1aa",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Id\": {{ExternalDataInterfacesId}},\n  \"Name\": \"{{ExternalDataInterfaceName_post_name}}\",\n  \"Description\":\"Postman Post Test Data Adapter\",\n  \"Assembly\": \"eIDM.dummy\",\n  \"Class\": \"dummy\",\n  \"AdminAssembly\": \"eIDM.dummy\",\n  \"AdminClass\": \"InterfaceAdmin/dummyConfigAdmin.ascx\"\n }\n \n "
										},
										"url": {
											"raw": "{{SiteURL}}api/ExternalDataInterfaces({{ExternalDataInterfacesId}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ExternalDataInterfaces({{ExternalDataInterfacesId}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All ExternalDataInterfaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60e9d81f-0a4b-4b7e-87a9-9a7d3e60c844",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"     pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Assembly');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsMultiValue');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"  //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ExternalDataInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ExternalDataInterfaces"
											]
										},
										"description": "Retrieves all DocType Property Interfaces records"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "DocTypes ExternalData",
					"item": [
						{
							"name": "Test-Happy path",
							"item": [
								{
									"name": "Post DocTypesExternalData Children",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b0481e62-1781-4875-a756-453f0febde80",
												"exec": [
													"pm.globals.set(\"DocTypesExternalData_post_interfaceId\", 101);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "552cbc15-3636-4c59-95da-9a6ffb063387",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(201);\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"\r",
													"\t//Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('Id');\r",
													"    pm.expect(jsonData).to.have.property('DocTypeId');\r",
													"    pm.expect(jsonData).to.have.property('ExternalDataInterfaceidId');\r",
													"    pm.expect(jsonData).to.have.property('DisplayName');\r",
													"    pm.expect(jsonData).to.have.property('Configuration');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"\tpm.expect(jsonData.DocTypeId).to.eql(pm.variables.get('DocTypes_get_id'));\r",
													"\tpm.expect(jsonData.ExternalDataInterfaceidId).to.eql(pm.variables.get('DocTypesExternalData_post_interfaceId'));\r",
													"\tpm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"    \r",
													"    setData();\r",
													"});\r",
													"\r",
													"function setData() {\r",
													"    var id = jsonData.Id;\r",
													"    pm.globals.set(\"DocTypesExternalData_get_id\", id);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"DocTypeId\": {{DocTypes_get_id}},\n  \"ExternalDataInterfaceidId\": {{DocTypesExternalData_post_interfaceId}},\n  \"DisplayName\": \"Create DocTypesExternalData\",\n  \"Configuration\": \"Config\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocTypesExternalData",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTypesExternalData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get DocTypesExternalData with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "82c3542b-72a5-4e31-81a6-7dd0c5353e99",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"\r",
													"\t//Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('Id');\r",
													"    pm.expect(jsonData).to.have.property('DocTypeId');\r",
													"    pm.expect(jsonData).to.have.property('ExternalDataInterfaceidId');\r",
													"    pm.expect(jsonData).to.have.property('DisplayName');\r",
													"    pm.expect(jsonData).to.have.property('Configuration');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"\tpm.expect(jsonData.DocTypeId).to.eql(pm.variables.get('DocTypes_get_id'));\r",
													"\tpm.expect(jsonData.ExternalDataInterfaceidId).to.eql(pm.variables.get('DocTypesExternalData_post_interfaceId'));\r",
													"\tpm.expect(jsonData.Id).to.eql(pm.variables.get('DocTypesExternalData_get_id'));\r",
													"\tpm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/DocTypesExternalData({{DocTypesExternalData_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTypesExternalData({{DocTypesExternalData_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch DocTypesExternalData",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a034fa02-2f17-474b-88e4-c98dbe7ffe95",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"DisplayName\": \"Postman Patch - DocTypesExternalData\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocTypesExternalData({{DocTypesExternalData_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTypesExternalData({{DocTypesExternalData_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put DocTypesExternalData",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "699bb39f-1ed6-4710-a6a4-fdc64275fb0d",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Id\":{{DocTypesExternalData_get_id}},\n  \"DocTypeId\": {{DocTypes_get_id}},\n  \"ExternalDataInterfaceidId\": {{DocTypesExternalData_post_interfaceId}},\n  \"DisplayName\": \"Postman Put - DocTypesExternalData\",\n  \"Configuration\": \"Config\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocTypesExternalData({{DocTypesExternalData_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTypesExternalData({{DocTypesExternalData_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All DocTypesExternalData",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "93d453b5-885a-443d-97b9-8353c6c05452",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Initialize JsonBody\r",
													"    jsonData = pm.response.json();\r",
													"\r",
													"\t//Verify all fields are present in response body.\r",
													"\tpm.expect(jsonData).to.have.property('value');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('DocTypeId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ExternalDataInterfaceidId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('DisplayName');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Configuration');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify response body contains collection of categories\r",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/DocTypesExternalData",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTypesExternalData"
											]
										},
										"description": "Retrieves all DocType Property Interfaces records"
									},
									"response": []
								},
								{
									"name": "Delete DocTypesExternalData",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "34cf6748-4729-4f45-9a58-074c3faa1143",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/DocTypesExternalData({{DocTypesExternalData_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTypesExternalData({{DocTypesExternalData_get_id}})"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ExtFieldSets",
					"item": [
						{
							"name": "Test - Happy Path",
							"item": [
								{
									"name": "Post Doc Tables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c1f096e1-b988-4d0b-a88e-f72352261e9a",
												"exec": [
													"var tableName = \"T\"+Date.now();\r",
													"pm.globals.set(\"ExtFieldSets_post_tableName\", tableName);\r",
													"pm.globals.set(\"ExtFieldSets_post_docTableName\", 'DOCTBL_'+tableName);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "31592ba4-7def-4632-b4b3-2d0f44595d7c",
												"exec": [
													"var jsonData;\r",
													"verifyDocTableCreated();\r",
													"\r",
													"function verifyDocTableCreated() {\r",
													"    \r",
													"    try {\r",
													"        jsonData = pm.response.json();\r",
													"        pm.response.to.have.status(201);\r",
													"        pm.expect(jsonData).to.have.property('DocTableId');\r",
													"        setData();\r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"}\r",
													"\r",
													"function setData() {\r",
													"    var docTableId = jsonData.DocTableId;\r",
													"    pm.globals.set(\"ExtFieldSets_get_docTableId\", docTableId);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"DocTableName\": \"{{ExtFieldSets_post_docTableName}}\",\r\n\t\"DocTableDescription\": \"Create new doc table\",\r\n\t\"TableName\": \"{{ExtFieldSets_post_tableName}}\",\r\n\t\"IsDisabled\": false,\r\n\t\"DocInterfaceId\": 101,\r\n\t\"InterfaceConfig\": \"string\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocTables",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTables"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post ExtFieldSets",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "85834896-018b-4dd2-99da-1c4a263af708",
												"exec": [
													"var extFieldSet = \"ExtFieldSet\"+Date.now();\r",
													"pm.globals.set(\"ExtFieldSet_post_name\", extFieldSet);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0da1e4e5-7a4f-4861-80ae-ceb5541e7ab1",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(201);\r",
													"    \r",
													"    //Initialize jsonData\r",
													"    jsonData = pm.response.json();\r",
													"\r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('Id');\r",
													"    pm.expect(jsonData).to.have.property('DocTableId');\r",
													"    pm.expect(jsonData).to.have.property('Name');\r",
													"    pm.expect(jsonData).to.have.property('Description');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"\tpm.expect(jsonData.DocTableId).to.eql(pm.variables.get('DocTables_get_id'));\r",
													"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('ExtFieldSet_post_name'));\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"    \r",
													"    setData();\r",
													"});\r",
													"\r",
													"function setData() {\r",
													"    var id = jsonData.Id;\r",
													"    pm.globals.set(\"ExtFieldSets_get_id\", id);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"DocTableId\": {{ExtFieldSets_get_docTableId}},\n\t\"Name\": \"{{ExtFieldSet_post_name}}\",\n\t\"Description\": \"Create new ExtFieldSets\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ExtFieldSets",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ExtFieldSets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All ExtFieldSets with children",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ExtFieldSets(100000)?$expand=DocTable,ExtFieldSetConfigs,ExtFieldSetItems,ExtFieldSetItemXDocFields",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ExtFieldSets(100000)"
											],
											"query": [
												{
													"key": "$expand",
													"value": "DocTable,ExtFieldSetConfigs,ExtFieldSetItems,ExtFieldSetItemXDocFields"
												}
											]
										},
										"description": "Retrieves all DocType Property Interfaces records"
									},
									"response": []
								},
								{
									"name": "Patch ExtFieldSets",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"Description\" : \"Postman test patch update\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ExtFieldSets(100003)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ExtFieldSets(100003)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put ExtFieldSets",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Id\": 100003,\n  \"DocTableId\": 100003,\n  \"Name\": \"Postman\",\n  \"Description\": \"Postman test Put update\",\n  \"CreatedById\": 1,\n  \"CreatedDate\": \"2017-05-12T12:53:23.867-04:00\",\n  \"ModifiedById\": 1,\n  \"ModifiedDate\": \"2017-05-12T12:59:13.67-04:00\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ExtFieldSets(100003)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ExtFieldSets(100003)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All ExtFieldSets",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ExtFieldSets",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ExtFieldSets"
											]
										},
										"description": "Retrieves all DocType Property Interfaces records"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ExtFieldSetConfigs",
					"item": [
						{
							"name": "Test - Happy Path",
							"item": [
								{
									"name": "Post ExtFieldSetConfigs",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"ExtFieldSetId\": 100000,\n  \"Key\": \"PostmanTest\",\n  \"Value\": \"Postman Test Value\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ExtFieldSetConfigs",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ExtFieldSetConfigs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ExtFieldSetConfigs with key",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ExtFieldSetConfigs(100000)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ExtFieldSetConfigs(100000)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch ExtFieldSetConfigs",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"Value\": \"Postman value Patch update\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ExtFieldSetConfigs(100013)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ExtFieldSetConfigs(100013)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put ExtFieldSetConfigs",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Id\": 100013,\n  \"ExtFieldSetId\": 100000,\n  \"Key\": \"PostmanTest\",\n  \"Value\": \"Postman value Put update\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ExtFieldSetConfigs(100013)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ExtFieldSetConfigs(100013)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All ExtFieldSetConfigs",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ExtFieldSetConfigs",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ExtFieldSetConfigs"
											]
										},
										"description": "Retrieves all DocType Property Interfaces records"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ExtFieldSetItems",
					"item": [
						{
							"name": "Test - Happy Path",
							"item": [
								{
									"name": "Post ExtFieldSetItems",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"IsPrimaryKey\": false,\n  \"IsRequired\": false,\n  \"ExtFieldSetId\": 100000,\n  \"Name\": \"Postmantest\",\n  \"Description\": \"Postman test\",\n  \"DataType\": \"String\",\n  \"Size\": 12,\n  \"CreatedById\": 100006,\n  \"CreatedDate\": \"2017-05-12T08:28:44.457-04:00\",\n  \"ModifiedById\": 100006,\n  \"ModifiedDate\": \"2017-05-12T08:28:44.457-04:00\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ExtFieldSetItems",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ExtFieldSetItems"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ExtFieldSetItems with key",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ExtFieldSetItems(100000)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ExtFieldSetItems(100000)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch ExtFieldSetItems",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"Description\": \"Postman value Patch update\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ExtFieldSetItems(100001)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ExtFieldSetItems(100001)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put ExtFieldSetItems",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"IsPrimaryKey\": false,\n  \"IsRequired\": false,\n  \"Id\": 100001,\n  \"ExtFieldSetId\": 100000,\n  \"Name\": \"Postmantest\",\n  \"Description\": \"Postman value Put update\",\n  \"DataType\": \"String\",\n  \"Size\": 12,\n  \"CreatedById\": 1,\n  \"CreatedDate\": \"2017-05-12T13:19:04.463-04:00\",\n  \"ModifiedById\": 1,\n  \"ModifiedDate\": \"2017-05-12T13:19:35.547-04:00\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ExtFieldSetItems(100001)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ExtFieldSetItems(100001)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All ExtFieldSetItems",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ExtFieldSetItems",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ExtFieldSetItems"
											]
										},
										"description": "Retrieves all DocType Property Interfaces records"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ExtFieldSetItemDocFields",
					"item": [
						{
							"name": "Test - Happy Path",
							"item": [
								{
									"name": "Post ExtFieldSetItemDocFields",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n      \"ExtFieldSetId\": 100000,\n      \"DocTableXFieldId\": 100026,\n      \"ExtFieldSetItemId\": 100003,\n      \"CreatedById\": 100006,\n      \"MapToFieldValueIndex\": 0,\n      \"CreatedDate\": \"2017-05-12T08:28:44.847-04:00\",\n      \"ModifiedById\": 100006,\n      \"ModifiedDate\": \"2017-05-12T08:28:44.847-04:00\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ExtFieldSetItemDocFields",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ExtFieldSetItemDocFields"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ExtFieldSetItemDocFields with key",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ExtFieldSetItemDocFields(100000)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ExtFieldSetItemDocFields(100000)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch ExtFieldSetItemDocFields",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"MapToFieldValueIndex\": \"1\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ExtFieldSetItemDocFields(100000)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ExtFieldSetItemDocFields(100000)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put ExtFieldSetItemDocFields",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"Id\": 100000,\n  \"ExtFieldSetId\": 100000,\n  \"DocTableXFieldId\": 100026,\n  \"ExtFieldSetItemId\": 100000,\n  \"CreatedById\": 100006,\n  \"MapToFieldValueIndex\": 0,\n  \"CreatedDate\": \"2017-05-12T08:28:44.847-04:00\",\n  \"ModifiedById\": 1,\n  \"ModifiedDate\": \"2017-05-12T14:09:39.35-04:00\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ExtFieldSetItemDocFields(100000)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ExtFieldSetItemDocFields(100000)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All ExtFieldSetItemDocFields",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ExtFieldSetItemDocFields",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ExtFieldSetItemDocFields"
											]
										},
										"description": "Retrieves all DocType Property Interfaces records"
									},
									"response": []
								},
								{
									"name": "Delete ExtFieldSetItemDocFields",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{SiteURL}}api/ExtFieldSetItemDocFields(100000)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ExtFieldSetItemDocFields(100000)"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Action Audit Types",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "Post ActionAuditTypes Children",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9fedf1a4-6bf9-4440-9c0b-34a8c72e8d4c",
												"exec": [
													"var actionType = Math.floor(Math.random() * 100000);",
													"pm.globals.set(\"ActionAdutiTypes_post_actionType\", actionType);",
													"",
													"var Name = \"ActionAuditTypes_Name_\"+Date.now();",
													"pm.globals.set(\"ActionAdutiTypes_post_name\", Name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0c4bc5b1-7a1b-4541-9415-89cea38b9f55",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('ActionType');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.ActionType).to.eql(pm.variables.get('ActionAdutiTypes_post_actionType'));",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('ActionAdutiTypes_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"ActionType\": {{ActionAdutiTypes_post_actionType}},  \n  \"Name\": \"{{ActionAdutiTypes_post_name}}\",\n  \"Description\": \"Create new Action Audit types\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ActionAuditTypes",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ActionAuditTypes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ActionAuditTypes with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae5c9108-184f-49a7-bcca-ef339e6a126d",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('ActionType');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.ActionType).to.eql(pm.variables.get('ActionAdutiTypes_post_actionType'));",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('ActionAdutiTypes_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ActionAuditTypes({{ActionAdutiTypes_post_actionType}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ActionAuditTypes({{ActionAdutiTypes_post_actionType}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch ActionAuditTypes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5d35552-fad3-47aa-b960-c50dafaba315",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Description\": \"Postman patch - Action Audit Types\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ActionAuditTypes({{ActionAdutiTypes_post_actionType}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ActionAuditTypes({{ActionAdutiTypes_post_actionType}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put ActionAuditTypes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8af5dc17-ed53-4546-9344-70be0b6b5291",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"ActionType\": {{ActionAdutiTypes_post_actionType}},  \n  \"Name\": \"{{ActionAdutiTypes_post_name}}\",\n  \"Description\": \"Postman put - Action Audit types\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ActionAuditTypes({{ActionAdutiTypes_post_actionType}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ActionAuditTypes({{ActionAdutiTypes_post_actionType}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All ActionAuditTypes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0846a45b-1fbc-47ac-9c1f-bd9c0bcfddf5",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Verify Response status code and Response body.\", function () {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('ActionType');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ActionAuditTypes",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ActionAuditTypes"
											]
										},
										"description": "Retrieves all DocType Property Interfaces records"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "DocType Prop Interfaces",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "Post Doc Type Prop Interfaces with Children",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fdbf452f-2eb2-44df-af40-49972a6e062b",
												"exec": [
													"var Name = \"DocTypePropInterface_Name_\"+Date.now()",
													"pm.globals.set(\"DocTypePropInterface_post_name\", Name);",
													"pm.globals.set(\"DocTypePropInterface_post_assemblyName\", 'eIDM.Core.'+Date.now());",
													"pm.globals.set(\"DocTypePropInterface_post_assemblyClass\", 'eIDM.DocumentManagement.Test'+Date.now());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c9fdd694-a0d7-41ec-8b92-cb3b1d74e83e",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(201);\r",
													"    \r",
													"    //Initialize jsonData\r",
													"    jsonData = pm.response.json();\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('Id');\r",
													"    pm.expect(jsonData).to.have.property('Name');\r",
													"    pm.expect(jsonData).to.have.property('Description');\r",
													"    pm.expect(jsonData).to.have.property('AssemblyName');\r",
													"    pm.expect(jsonData).to.have.property('AssemblyClassName');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"\r",
													"    //Verify correct values are present in response body.\r",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('DocTypePropInterface_post_name'));\r",
													"    pm.expect(jsonData.AssemblyName).to.eql(pm.variables.get('DocTypePropInterface_post_assemblyName'));\r",
													"    pm.expect(jsonData.AssemblyClassName).to.eql(pm.variables.get('DocTypePropInterface_post_assemblyClass'));\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"    \r",
													"    setData();\r",
													"});\r",
													"\r",
													"function setData() {\r",
													"    var id = jsonData.Id;\r",
													"    pm.globals.set(\"DocTypePropInterface_get_id\", id);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Name\": \"{{DocTypePropInterface_post_name}}\",\n  \"Description\": \"Create new Doc Type Prop Interface\",\n  \"AssemblyName\": \"{{DocTypePropInterface_post_assemblyName}}\",\n  \"AssemblyClassName\": \"{{DocTypePropInterface_post_assemblyClass}}\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocTypePropInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTypePropInterfaces"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get DocType Prop Interfaces with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8f53d952-b695-46db-a6ff-dee5eb9a67c1",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Initialize jsonData\r",
													"    jsonData = pm.response.json();\r",
													"\r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('Id');\r",
													"    pm.expect(jsonData).to.have.property('Name');\r",
													"    pm.expect(jsonData).to.have.property('Description');\r",
													"    pm.expect(jsonData).to.have.property('AssemblyName');\r",
													"    pm.expect(jsonData).to.have.property('AssemblyClassName');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"\r",
													"\r",
													"    //Verify correct values are present in response body.\r",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('DocTypePropInterface_get_id'));\r",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('DocTypePropInterface_post_name'));\r",
													"    pm.expect(jsonData.AssemblyName).to.eql(pm.variables.get('DocTypePropInterface_post_assemblyName'));\r",
													"    pm.expect(jsonData.AssemblyClassName).to.eql(pm.variables.get('DocTypePropInterface_post_assemblyClass'));\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/DocTypePropInterfaces({{DocTypePropInterface_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTypePropInterfaces({{DocTypePropInterface_get_id}})"
											]
										},
										"description": "Get DocType Prop Interfaces with key =1"
									},
									"response": []
								},
								{
									"name": "Patch DocType Prop Interfaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bcd17026-6ae0-406a-94b3-b83e2c218d62",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Description\": \"Postman PATCH - DocTypePropIntefaces\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocTypePropInterfaces({{DocTypePropInterface_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTypePropInterfaces({{DocTypePropInterface_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put DocType Prop Interfaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8bcfb050-d192-43a2-b9d9-66aabe8e2ff4",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Id\":{{DocTypePropInterface_get_id}},\n\t\"Name\": \"{{DocTypePropInterface_post_name}}\",\n\t\"Description\": \"Postman patch - DocTypePropInteface\",\n\t\"AssemblyName\": \"{{DocTypePropInterface_post_assemblyName}}\",\n\t\"AssemblyClassName\": \"{{DocTypePropInterface_post_assemblyClass}}\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocTypePropInterfaces({{DocTypePropInterface_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTypePropInterfaces({{DocTypePropInterface_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All DocType Prop Interfaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da783c9b-215c-4886-9a36-74b51c603a98",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test(\"Verify Response status code and Response body.\", function () {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Initialize jsonData\r",
													"    jsonData = pm.response.json();\r",
													"\r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('value');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('AssemblyName');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('AssemblyClassName');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify response body contains collection of categories\r",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/DocTypePropInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTypePropInterfaces"
											]
										},
										"description": "Retrieves all DocType Property Interfaces records"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "WmInterfaces",
					"item": [
						{
							"name": "Test-Happy path",
							"item": [
								{
									"name": "Post WmInterfaces Children",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "19ace98c-15e8-42ef-84f6-fe82f9161fcb",
												"exec": [
													"var Name = \"POST_\"+Date.now();",
													"pm.globals.set(\"WmiInterfaces_post_name\", Name);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f8920544-b412-4079-872e-30af272e7b8f",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('UseInterceptor');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('WebFormUrl');",
													"    pm.expect(jsonData).to.have.property('WebFormUrlType');",
													"    pm.expect(jsonData).to.have.property('WinFormAssembly');",
													"    pm.expect(jsonData).to.have.property('WinFormClass');",
													"    pm.expect(jsonData).to.have.property('AdminFormAssembly');",
													"    pm.expect(jsonData).to.have.property('AdminFormClass');",
													"    pm.expect(jsonData).to.have.property('DefaultConfigData');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('WmiInterfaces_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"WmiInterfaces_get_id\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"UseInterceptor\": false,\n  \"Name\": \"{{WmiInterfaces_post_name}}\",\n  \"Description\": \"WMI Interface used by document management.\",\n  \"WebFormUrl\": \"DefaultWMI/Default.aspx\",\n  \"WebFormUrlType\": 0,\n  \"WinFormAssembly\": \"                                                                                                    \",\n  \"WinFormClass\": \"                                                                                                    \",\n  \"AdminFormAssembly\": \"Admin is web based\",\n  \"AdminFormClass\": \"WMI/DefaultWMI/Admin/WMIAdminMenu.aspx\",\n  \"DefaultConfigData\": \"\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/WmInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WmInterfaces"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get WmInterface with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2af2196d-f416-4f6f-9baa-b1ab10c2fa41",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('UseInterceptor');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('WebFormUrl');",
													"    pm.expect(jsonData).to.have.property('WebFormUrlType');",
													"    pm.expect(jsonData).to.have.property('WinFormAssembly');",
													"    pm.expect(jsonData).to.have.property('WinFormClass');",
													"    pm.expect(jsonData).to.have.property('AdminFormAssembly');",
													"    pm.expect(jsonData).to.have.property('AdminFormClass');",
													"    pm.expect(jsonData).to.have.property('DefaultConfigData');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('WmiInterfaces_post_name'));",
													"\tpm.expect(jsonData.Id).to.eql(pm.variables.get('WmiInterfaces_get_id'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/WmInterfaces({{WmiInterfaces_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WmInterfaces({{WmiInterfaces_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch WmInterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e130b03a-6262-4938-9f72-fcf9e44dfa14",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "93e9bf67-7f6c-43a1-b35c-78c1d3a3d272",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Description\": \"Postman patch - WmiInterfaces\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/WmInterfaces({{WmiInterfaces_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WmInterfaces({{WmiInterfaces_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put WmInterface",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e005aba-3fcd-4399-8aba-cdc987c54dc4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f11d351b-c673-453a-aaf5-7e5c8e12947f",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Id\": {{WmiInterfaces_get_id}},\n\t\"UseInterceptor\": false,\n\t\"Name\": \"{{WmiInterfaces_post_name}}\",\n\t\"Description\": \"Postman put - WmiInterfaces\",\n\t\"WebFormUrl\": \"DefaultWMI/Default.aspx\",\n\t\"WebFormUrlType\": 0,\n\t\"WinFormAssembly\": \"                                                                                                    \",\n\t\"WinFormClass\": \"                                                                                                    \",\n\t\"AdminFormAssembly\": \"Admin is web based\",\n\t\"AdminFormClass\": \"WMI/DefaultWMI/Admin/WMIAdminMenu.aspx\",\n\t\"DefaultConfigData\": \"\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/WmInterfaces({{WmiInterfaces_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WmInterfaces({{WmiInterfaces_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All WmInterfaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "df50339e-3e7f-46e1-9cb1-db012cb51aca",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify Response status code and Response body.\", function () {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('value');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('UseInterceptor');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('WebFormUrl');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('WebFormUrlType');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('WinFormAssembly');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('WinFormClass');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('AdminFormAssembly');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('AdminFormClass');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('DefaultConfigData');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify response body contains collection of categories\r",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/WmInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WmInterfaces"
											]
										},
										"description": "Retrieves all DocType Property Interfaces records"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "719c9b3c-1ddc-41cc-a6f6-7e61c48e1fcc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "90ff1892-b814-45a5-b9aa-333b7f8b6f4c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Wmi Segments",
					"item": [
						{
							"name": "Test-Happy path",
							"item": [
								{
									"name": "Post WmiSegments Children",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "43cc9584-ea9f-4067-aaee-c392ef05e7db",
												"exec": [
													"var Name = \"WMISegments_\"+Date.now();",
													"pm.globals.set(\"WmiSegments_post_name\", Name);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "199a03b3-6603-42b8-90fe-fe3e90c2ebd0",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('Type');",
													"    pm.expect(jsonData).to.have.property('ConfigData');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('WmiSegments_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"WmiSegments_get_id\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Name\": \"{{WmiSegments_post_name}}\",\n    \"Description\": \"Create new WMI Segments\",\n    \"Type\": null,\n    \"ConfigData\": \"\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/WmiSegments",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WmiSegments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get WmiSegments with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2a28d69-2e59-4563-ab3f-f92d6892c3c8",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('Type');",
													"    pm.expect(jsonData).to.have.property('ConfigData');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('WmiSegments_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c37c65a2-53ee-4fb6-a9d7-a79dc9fa5d23",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/WmiSegments({{WmiSegments_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WmiSegments({{WmiSegments_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch WmiSegments",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6a3dd4e4-092c-4c7a-9930-23d362ce3be7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fa8523dd-bd47-4b86-ad1a-635b978c5776",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Description\": \"Postman patch - WmiSegments\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/WmiSegments({{WmiSegments_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WmiSegments({{WmiSegments_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put WmiSegments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c4f22a54-e95f-46e8-90ee-c96be1ddeb68",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Id\":{{WmiSegments_get_id}},\n\t\"Name\": \"{{WmiSegments_post_name}}\",\n    \"Description\": \"Postman put - WmiSegments\",\n    \"Type\": null,\n    \"ConfigData\": \"\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/WmiSegments({{WmiSegments_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WmiSegments({{WmiSegments_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All WmiSegments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3b21657-0ee3-4f51-827a-d5ca94e6a9c4",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify Response status code and Response body.\", function () {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('value');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Type');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ConfigData');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify response body contains collection of categories\r",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/WmiSegments",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WmiSegments"
											]
										},
										"description": "Retrieves all DocType Property Interfaces records"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "51490a9e-1e9a-4da0-9e6b-d75661644e2c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "174eccbd-b144-4e8d-a470-33152bad5d7f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "05 SearchManagement",
			"item": [
				{
					"name": "SearchInterfaces",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Create new Seach Interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Initialize jsonData",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('ClassName');",
													"    pm.expect(jsonData).to.have.property('AssemblyName');",
													"    pm.expect(jsonData).to.have.property('Configuration');",
													"    pm.expect(jsonData).to.have.property('AdminUrl');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('SearchInterface_post_name'));",
													"    pm.expect(jsonData.ClassName).to.eql(pm.variables.get('SearchInterface_post_classname'));",
													"    pm.expect(jsonData.AssemblyName).to.eql(pm.variables.get('SearchInterface_post_assemblyname'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"SearchInterface_get_id\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"var Name = \"Search_Interface_Name_\"+Date.now();",
													"pm.globals.set(\"SearchInterface_post_name\", Name);",
													"pm.globals.set(\"SearchInterface_post_classname\", 'edmCore.class.'+Date.now());",
													"pm.globals.set(\"SearchInterface_post_assemblyname\", 'edmCore.assembly.'+Date.now());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"IsWorkflow\": false,\r\n\t\"Name\": \"{{SearchInterface_post_name}}\",\r\n\t\"Description\": \"Create new search interface\",\r\n\t\"ClassName\": \"{{SearchInterface_post_classname}}\",\r\n\t\"AssemblyName\": \"{{SearchInterface_post_assemblyname}}\",\r\n\t\"Configuration\": null,\r\n\t\"AdminUrl\": null\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/SearchInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchInterfaces"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "Get Search Interface with Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Initialize jsonData",
													"    jsonData = pm.response.json();",
													"",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('ClassName');",
													"    pm.expect(jsonData).to.have.property('AssemblyName');",
													"    pm.expect(jsonData).to.have.property('Configuration');",
													"    pm.expect(jsonData).to.have.property('AdminUrl');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.Name).to.eql(pm.variables.get('SearchInterface_post_name'));",
													"    pm.expect(jsonData.ClassName).to.eql(pm.variables.get('SearchInterface_post_classname'));",
													"    pm.expect(jsonData.AssemblyName).to.eql(pm.variables.get('SearchInterface_post_assemblyname'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/SearchInterfaces({{SearchInterface_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchInterfaces({{SearchInterface_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Search Interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Description\": \"Postman Patch - Search Interface\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/SearchInterfaces({{SearchInterface_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchInterfaces({{SearchInterface_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Search Interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Id\":{{SearchInterface_get_id}},\r\n\t\"IsWorkflow\": false,\r\n\t\"Name\": \"{{SearchInterface_post_name}}\",\r\n\t\"Description\": \"Postman put - Search Interface\",\r\n\t\"ClassName\": \"{{SearchInterface_post_name}}\",\r\n\t\"AssemblyName\": \"{{SearchInterface_post_name}}\",\r\n\t\"Configuration\": null,\r\n\t\"AdminUrl\": null\r\n}\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/SearchInterfaces({{SearchInterface_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchInterfaces({{SearchInterface_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Search Interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"var jsonData;",
													"",
													"pm.test(\"Verify Response status code and Response body.\", function () {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Initialize jsonData",
													"    jsonData = pm.response.json();",
													"",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsWorkflow');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('ClassName');",
													"    pm.expect(jsonData.value[0]).to.have.property('AssemblyName');",
													"    pm.expect(jsonData.value[0]).to.have.property('Configuration');",
													"    pm.expect(jsonData.value[0]).to.have.property('AdminUrl');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/SearchInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchInterfaces"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "SearchClasses",
					"item": [
						{
							"name": "Test-Happy path",
							"item": [
								{
									"name": "Post SearchClasses Children",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "901b1b76-c704-4bbb-91a5-fd5545f72dc1",
												"exec": [
													"var description = \"SearchClass_\"+Date.now()",
													"pm.globals.set(\"SearchClasses_post_description\", description);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a3e702ba-b3ed-4b43-ba2f-fb8fd06ddd18",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Initialize jsonData",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('UseOrOperatorInUserGroupFilter');",
													"    pm.expect(jsonData).to.have.property('ShowSla');",
													"    pm.expect(jsonData).to.have.property('UsePagination');",
													"    pm.expect(jsonData).to.have.property('NoFoldering');",
													"    pm.expect(jsonData).to.have.property('EditableFoldering');",
													"    pm.expect(jsonData).to.have.property('NoDocIdSorting');",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('ViewName');",
													"    pm.expect(jsonData).to.have.property('CustomFilter');",
													"    pm.expect(jsonData).to.have.property('InterfaceId');",
													"    pm.expect(jsonData).to.have.property('Timeout');",
													"    pm.expect(jsonData).to.have.property('LockIsolation');",
													"    pm.expect(jsonData).to.have.property('MaxRows');",
													"    pm.expect(jsonData).to.have.property('PageRecords');",
													"    pm.expect(jsonData).to.have.property('Level1FieldId');",
													"    pm.expect(jsonData).to.have.property('Level2FieldId');",
													"    pm.expect(jsonData).to.have.property('Level3FieldId');",
													"    pm.expect(jsonData).to.have.property('Level1FieldSorting');",
													"    pm.expect(jsonData).to.have.property('Level2FieldSorting');",
													"    pm.expect(jsonData).to.have.property('Level3FieldSorting');",
													"    pm.expect(jsonData).to.have.property('InterfaceConfig');",
													"    pm.expect(jsonData).to.have.property('IndexHint');",
													"    pm.expect(jsonData).to.have.property('QuickSearchFieldCount');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.Description).to.eql(pm.variables.get('SearchClasses_post_description'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"SearchClasses_get_id\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Description\": \"{{SearchClasses_post_description}}\",\r\n\t\"ViewName\": \"view\",\r\n\t\"CustomFilter\": \"filter\",\r\n\t\"UseOrOperatorInUserGroupFilter\": true,\r\n\t\"InterfaceId\": 106,\r\n\t\"Timeout\": 0,\r\n\t\"LockIsolation\": \"string\",\r\n\t\"MaxRows\": 0,\r\n\t\"ShowSla\": true,\r\n\t\"UsePagination\": true,\r\n\t\"PageRecords\": 0,\r\n\t\"Level1FieldId\": 0,\r\n\t\"Level2FieldId\": 0,\r\n\t\"Level3FieldId\": 0,\r\n\t\"Level1FieldSorting\": 0,\r\n\t\"Level2FieldSorting\": 0,\r\n\t\"Level3FieldSorting\": 0,\r\n\t\"NoFoldering\": true,\r\n\t\"EditableFoldering\": true,\r\n\t\"NoDocIdSorting\": true,\r\n\t\"InterfaceConfig\": \"string\",\r\n\t\"IndexHint\": \"string\",\r\n\t\"QuickSearchFieldCount\": 0\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/SearchClasses",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchClasses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get SearchClasses with Children",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e61e58a4-cfee-4a6d-bff7-6a5ba52bf357",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Initialize jsonData",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('UseOrOperatorInUserGroupFilter');",
													"    pm.expect(jsonData).to.have.property('ShowSla');",
													"    pm.expect(jsonData).to.have.property('UsePagination');",
													"    pm.expect(jsonData).to.have.property('NoFoldering');",
													"    pm.expect(jsonData).to.have.property('EditableFoldering');",
													"    pm.expect(jsonData).to.have.property('NoDocIdSorting');",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('ViewName');",
													"    pm.expect(jsonData).to.have.property('CustomFilter');",
													"    pm.expect(jsonData).to.have.property('InterfaceId');",
													"    pm.expect(jsonData).to.have.property('Timeout');",
													"    pm.expect(jsonData).to.have.property('LockIsolation');",
													"    pm.expect(jsonData).to.have.property('MaxRows');",
													"    pm.expect(jsonData).to.have.property('PageRecords');",
													"    pm.expect(jsonData).to.have.property('Level1FieldId');",
													"    pm.expect(jsonData).to.have.property('Level2FieldId');",
													"    pm.expect(jsonData).to.have.property('Level3FieldId');",
													"    pm.expect(jsonData).to.have.property('Level1FieldSorting');",
													"    pm.expect(jsonData).to.have.property('Level2FieldSorting');",
													"    pm.expect(jsonData).to.have.property('Level3FieldSorting');",
													"    pm.expect(jsonData).to.have.property('InterfaceConfig');",
													"    pm.expect(jsonData).to.have.property('IndexHint');",
													"    pm.expect(jsonData).to.have.property('QuickSearchFieldCount');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.Description).to.eql(pm.variables.get('SearchClasses_post_description'));",
													"\tpm.expect(jsonData.Id).to.eql(pm.variables.get('SearchClasses_get_id'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/SearchClasses({{SearchClasses_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchClasses({{SearchClasses_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch SearchClasses",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41fa82c9-9aed-4ee2-accc-c50bc3f80e88",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"ViewName\": \"Postman patch - Search classes\"\n}\n  "
										},
										"url": {
											"raw": "{{SiteURL}}api/SearchClasses({{SearchClasses_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchClasses({{SearchClasses_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put SearchClasses",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21f3d515-f513-4fcc-8249-4b94c3c6a8ed",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c254c793-26e9-42a4-9e68-5db45d0860ae",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Id\": {{SearchClasses_get_id}},  \r\n\t\"Description\": \"{{SearchClasses_post_description}}\",\r\n\t\"ViewName\": \"Postman put - Search classes\",\r\n\t\"CustomFilter\": \"filter\",\r\n\t\"UseOrOperatorInUserGroupFilter\": true,\r\n\t\"InterfaceId\": 100,\r\n\t\"Timeout\": 0,\r\n\t\"LockIsolation\": \"string\",\r\n\t\"MaxRows\": 0,\r\n\t\"ShowSla\": true,\r\n\t\"UsePagination\": true,\r\n\t\"PageRecords\": 0,\r\n\t\"Level1FieldId\": 0,\r\n\t\"Level2FieldId\": 0,\r\n\t\"Level3FieldId\": 0,\r\n\t\"Level1FieldSorting\": 0,\r\n\t\"Level2FieldSorting\": 0,\r\n\t\"Level3FieldSorting\": 0,\r\n\t\"NoFoldering\": true,\r\n\t\"EditableFoldering\": true,\r\n\t\"NoDocIdSorting\": true,\r\n\t\"InterfaceConfig\": \"string\",\r\n\t\"IndexHint\": \"string\",\r\n\t\"QuickSearchFieldCount\": 0\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/SearchClasses({{SearchClasses_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchClasses({{SearchClasses_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All SearchClasses",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f46517fa-ac20-4193-98e3-30d9cf9babcd",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test(\"Verify Response status code and Response body.\", function () {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Initialize jsonData\r",
													"    jsonData = pm.response.json();\r",
													"\r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('value');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('UseOrOperatorInUserGroupFilter');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ShowSla');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('UsePagination');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('NoFoldering');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('EditableFoldering');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('NoDocIdSorting');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ViewName');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CustomFilter');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('InterfaceId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Timeout');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('LockIsolation');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('MaxRows');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('PageRecords');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Level1FieldId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Level2FieldId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Level3FieldId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Level1FieldSorting');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Level2FieldSorting');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Level3FieldSorting');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('InterfaceConfig');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('IndexHint');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('QuickSearchFieldCount');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify response body contains collection of categories\r",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/SearchClasses",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchClasses"
											]
										},
										"description": "Retrieves all DocType Property Interfaces records"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "SearchClassDocClasses",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "Post SearchClassDocClasses",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"SearchClassId\": {{SearchClasses_get_id}},\n\t\"DocClassId\": {{DocClasses_get_id}},\n\t\"CustomFilter\": \"Create SearchClassDocClasses\"\n}\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/SearchClassDocClasses",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchClassDocClasses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get SearchClassDocClasses with Key",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/SearchClassDocClasses(SearchClassId=1,DocClassId= 101)?$expand=SearchClass,DocClass",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchClassDocClasses(SearchClassId=1,DocClassId= 101)"
											],
											"query": [
												{
													"key": "$expand",
													"value": "SearchClass,DocClass"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch SearchClassDocClasses",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\n  {\n  \"SearchClassId\": 100011,\n  \"DocClassId\": 101\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/SearchClassDocClasses(SearchClassId=100011,DocClassId= 101)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchClassDocClasses(SearchClassId=100011,DocClassId= 101)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put SearchClassDocClasses",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"SearchClassId\": 100011,\n  \"DocClassId\": 101\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/SearchClassDocClasses(SearchClassId=100011,DocClassId= 101)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchClassDocClasses(SearchClassId=100011,DocClassId= 101)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All SearchClassDocClasses",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/SearchClassDocClasses",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchClassDocClasses"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Delete SearchClassDocClasses",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/SearchClassDocClasses(SearchClassId=100011,DocClassId= 101)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchClassDocClasses(SearchClassId=100011,DocClassId= 101)"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "SearchClassFields",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "SearchClassFieldSorts",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "SearchClassForeignDataSources",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "Post SearchClassForeignDataSources",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b85ac54-465d-4814-be17-105ec851414c",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(201);\r",
													"    \r",
													"    jsonData = pm.response.json();\r",
													"\r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('SearchClassId');\r",
													"    pm.expect(jsonData).to.have.property('ForeignDataSourceId');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"\tpm.expect(jsonData.SearchClassId).to.eql(pm.variables.get('SearchClasses_get_id'));\r",
													"\tpm.expect(jsonData.ForeignDataSourceId).to.eql(pm.variables.get('ForeignDatasource_get_id'));\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"SearchClassId\": {{SearchClasses_get_id}},\n\t\"ForeignDataSourceId\": {{ForeignDatasource_get_id}}\n}\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/SearchClassForeignDataSources",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchClassForeignDataSources"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get SearchClassForeignDataSources with Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "27c8d8ac-0966-4002-a1c3-5257b17f03bb",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    jsonData = pm.response.json();\r",
													"\r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('SearchClassId');\r",
													"    pm.expect(jsonData).to.have.property('ForeignDataSourceId');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"\tpm.expect(jsonData.SearchClassId).to.eql(pm.variables.get('SearchClasses_get_id'));\r",
													"\tpm.expect(jsonData.ForeignDataSourceId).to.eql(pm.variables.get('ForeignDatasource_get_id'));\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/SearchClassForeignDataSources(SearchClassId={{SearchClasses_get_id}},ForeignDataSourceId={{ForeignDatasource_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchClassForeignDataSources(SearchClassId={{SearchClasses_get_id}},ForeignDataSourceId={{ForeignDatasource_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All SearchClassForeignDataSources",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec0a7f21-2f06-4e58-8488-6dda2557cb8d",
												"exec": [
													"var jsonData;\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    jsonData = pm.response.json();\r",
													"\r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('value');\r",
													"    pm.expect(jsonData).to.have.property('SearchClassId');\r",
													"    pm.expect(jsonData).to.have.property('ForeignDataSourceId');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify response body contains collection of categories\r",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/SearchClassForeignDataSources",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchClassForeignDataSources"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Delete SearchClassForeignDataSources",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db4bdc1e-ff82-42a3-af5e-2fb3490bf0fd",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/SearchClassForeignDataSources(SearchClassId={{SearchClasses_get_id}},ForeignDataSourceId={{ForeignDatasource_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchClassForeignDataSources(SearchClassId={{SearchClasses_get_id}},ForeignDataSourceId={{ForeignDatasource_get_id}})"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "SearchClassUserGroups",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "Post SearchClassUserGroups",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "824b15fd-1718-4fcd-b733-be9313a71150",
												"exec": [
													"pm.globals.set(\"SearchClassUserGroup_post_groupId\", 1);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f1ef9d0e-426d-4d76-a047-13f971ddc6ae",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Initialize jsonData",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('ShowSecureField');",
													"    pm.expect(jsonData).to.have.property('AllowExport');",
													"    pm.expect(jsonData).to.have.property('UserGroupId');",
													"    pm.expect(jsonData).to.have.property('SearchClassId');",
													"    pm.expect(jsonData).to.have.property('CustomFilter');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.UserGroupId).to.eql(pm.variables.get('SearchClassUserGroup_post_groupId'));",
													"\tpm.expect(jsonData.SearchClassId).to.eql(pm.variables.get('SearchClasses_get_id'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"ShowSecureField\": false,\n\t\"AllowExport\": false,\n\t\"UserGroupId\": {{SearchClassUserGroup_post_groupId}},\n\t\"SearchClassId\": {{SearchClasses_get_id}},\n\t\"CustomFilter\": \"Potsman Post SearchClassUserGroup\"\n}\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/SearchClassUserGroups",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchClassUserGroups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get SearchClassUserGroups with Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b9e57d3-a498-4eb6-8af3-af25724803de",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Initialize jsonData",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('ShowSecureField');",
													"    pm.expect(jsonData).to.have.property('AllowExport');",
													"    pm.expect(jsonData).to.have.property('UserGroupId');",
													"    pm.expect(jsonData).to.have.property('SearchClassId');",
													"    pm.expect(jsonData).to.have.property('CustomFilter');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.UserGroupId).to.eql(pm.variables.get('SearchClassUserGroup_post_groupId'));",
													"\tpm.expect(jsonData.SearchClassId).to.eql(pm.variables.get('SearchClasses_get_id'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/SearchClassUserGroups(UserGroupId={{SearchClassUserGroup_post_groupId}},SearchClassId={{SearchClasses_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchClassUserGroups(UserGroupId={{SearchClassUserGroup_post_groupId}},SearchClassId={{SearchClasses_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch SearchClassUserGroups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c57ce3e9-8d48-44c7-ab70-a91ad2671793",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"CustomFilter\": \"Potsman Patch SearchClassUserGroup\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/SearchClassUserGroups(UserGroupId={{SearchClassUserGroup_post_groupId}},SearchClassId={{SearchClasses_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchClassUserGroups(UserGroupId={{SearchClassUserGroup_post_groupId}},SearchClassId={{SearchClasses_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put SearchClassUserGroups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dc48baa2-ea5d-480f-b3e4-e9e3d4a17b62",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"ShowSecureField\": false,\n\t\"AllowExport\": false,\n\t\"UserGroupId\": {{SearchClassUserGroup_post_groupId}},\n\t\"SearchClassId\": {{SearchClasses_get_id}},\n\t\"CustomFilter\": \"Potsman Put SearchClassUserGroup\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/SearchClassUserGroups(UserGroupId={{SearchClassUserGroup_post_groupId}},SearchClassId={{SearchClasses_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchClassUserGroups(UserGroupId={{SearchClassUserGroup_post_groupId}},SearchClassId={{SearchClasses_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All SearchClassUserGroups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "818377c5-76cd-4bab-a564-aedfe213800f",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Initialize jsonData",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('ShowSecureField');",
													"    pm.expect(jsonData.value[0]).to.have.property('AllowExport');",
													"    pm.expect(jsonData.value[0]).to.have.property('UserGroupId');",
													"    pm.expect(jsonData.value[0]).to.have.property('SearchClassId');",
													"    pm.expect(jsonData.value[0]).to.have.property('CustomFilter');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"\tpm.expect(jsonData.UserGroupId).to.eql(pm.variables.get('SearchClassUserGroup_post_groupId'));",
													"\tpm.expect(jsonData.SearchClassId).to.eql(pm.variables.get('SearchClasses_get_id'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/SearchClassUserGroups",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchClassUserGroups"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Delete SearchClassUserGroups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c2a6cfe-5876-45fe-9c2c-82dade1e4774",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/SearchClassUserGroups(UserGroupId={{SearchClassUserGroup_post_groupId}},SearchClassId={{SearchClasses_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchClassUserGroups(UserGroupId={{SearchClassUserGroup_post_groupId}},SearchClassId={{SearchClasses_get_id}})"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Edms",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Create new Edms",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Initialize jsonData",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Type');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('Configuration');",
													"    pm.expect(jsonData).to.have.property('WebFormUrl');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('Edms_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var Id = jsonData.Id;",
													"    pm.globals.set(\"Edms_get_id\", Id);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"EDM_NAME_\"+Date.now()",
													"    pm.globals.set(\"Edms_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Name\": \"{{Edms_post_name}}\",\r\n\t\"Type\": 0,\r\n\t\"Description\": \"Create new EDM\",\r\n\t\"Configuration\": \"\",\r\n\t\"WebFormUrl\": \"\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Edms",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Edms"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "Get Edms(Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Initialize jsonData",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Type');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('Configuration');",
													"    pm.expect(jsonData).to.have.property('WebFormUrl');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('Edms_post_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('Edms_get_id'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/Edms({{Edms_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Edms({{Edms_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Edms",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Description\": \"Postman patch - EDM\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Edms({{Edms_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Edms({{Edms_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Edms",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Id\":{{Edms_get_id}},\r\n\t\"Name\": \"{{Edms_post_name}}\",\r\n\t\"Type\": 0,\r\n\t\"Description\": \"Postman put - EDM\",\r\n\t\"Configuration\": \"\",\r\n\t\"WebFormUrl\": \"\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Edms({{Edms_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Edms({{Edms_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Edms",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Initialize jsonData",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('Type');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('Configuration');",
													"    pm.expect(jsonData.value[0]).to.have.property('WebFormUrl');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/Edms",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Edms"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "EdmSearchClasses",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "EdmUserGroups",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Post EdmSearchClasses",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \n  \"UserGroupId\": 1,\n      \"EdmId\": 100004\n  \n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/EdmUserGroups",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EdmUserGroups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All EdmSearchClasses",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/EdmUserGroups",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EdmUserGroups"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Delete EdmSearchClasses",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/EdmUserGroups(UserGroupId=1,EdmId=100004)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EdmUserGroups(UserGroupId=1,EdmId=100004)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch EdmSearchClasses",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"UserGroupId\": 1,\n      \"EdmId\": 100004\n  \n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/EdmUserGroups(UserGroupId=1,EdmId=100004)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EdmUserGroups(UserGroupId=1,EdmId=100004)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put EdmSearchClasses",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"UserGroupId\": 1,\n      \"EdmId\": 100004\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/EdmUserGroups(UserGroupId=1,EdmId=100004)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EdmUserGroups(UserGroupId=1,EdmId=100004)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get EdmSearchClasses with Key",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/EdmUserGroups(UserGroupId=1,EdmId=1)?$expand=UserGroup,Edm",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EdmUserGroups(UserGroupId=1,EdmId=1)"
											],
											"query": [
												{
													"key": "$expand",
													"value": "UserGroup,Edm"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "af7e1493-789d-4620-a65f-64354778a2ab",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b8a0df8c-e5e5-4f3c-b642-99c7447f5120",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "06 BPMConfiguration",
			"item": [
				{
					"name": "Action Rule Type Interfaces",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Post Action Rule Type Interfaces Children",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "28d42426-a14f-49dc-a9f8-c6de709bfc5e",
												"exec": [
													"var Name = \"ActionRuleType_\"+Date.now()",
													"var assembly = \"Assembly_\"+Date.now()",
													"pm.globals.set(\"ActionRuleTypeInterface_post_name\", Name);",
													"pm.globals.set(\"ActionRuleTypeInterface_post_assembly\",assembly);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b3949368-3635-400a-8e16-ebecdac99fe3",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('Class');",
													"    pm.expect(jsonData).to.have.property('AdminClass');",
													"    pm.expect(jsonData).to.have.property('InterfaceGroupBy');",
													"    pm.expect(jsonData).to.have.property('ImageId');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Assembly).to.eql(pm.variables.get('Assembly_post'));",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('ActionRuleTypeInterface_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"ActionRuleTypeInterfaces_get_id\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Name\": \"{{ActionRuleTypeInterface_post_name}}\",\n\t\"Description\": \"PostMan Post ActionRuleInterfaces\",\n\t\"Class\": \"PostManPostActionRules\",\n\t\"AdminClass\": \"PostManPostActionRulesAdmin\",\n\t\"Assembly\": \"{{ActionRuleTypeInterface_post_assembly}}\",\n\t\"InterfaceGroupBy\": \"Process Instance Related\",\n\t\"ImageId\": 0\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ActionRuleTypeInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ActionRuleTypeInterfaces"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Action Rule Type Interfaces post-Patch",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e4d3665-8bdd-4848-87d5-b67769b715e2",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('Class');",
													"    pm.expect(jsonData).to.have.property('AdminClass');",
													"    pm.expect(jsonData).to.have.property('InterfaceGroupBy');",
													"    pm.expect(jsonData).to.have.property('ImageId');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Assembly).to.eql(pm.variables.get('Assembly_post'));",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('ActionRuleTypeInterface_post_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('ActionRuleTypeInterfaces_get_id'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ActionRuleTypeInterfaces({{ActionRuleTypeInterfaces_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ActionRuleTypeInterfaces({{ActionRuleTypeInterfaces_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Action Rule Type Interfaces",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "715b2f76-4259-44ec-a874-edaedc0887c9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9b508158-8d29-47c1-8005-e8787aeccc73",
												"exec": [
													"pm.test(\"Verify Response status code and Response body.\", function () {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Description\": \"PostMan Patch ActionRuleTypeInterfaces\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ActionRuleTypeInterfaces({{ActionRuleTypeInterfaces_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ActionRuleTypeInterfaces({{ActionRuleTypeInterfaces_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Action Rule Type Interfaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c35181c4-cdd1-4704-b5b6-dfb78b42d41d",
												"exec": [
													"pm.test(\"Verify Response status code and Response body.\", function () {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Id\": {{ActionRuleTypeInterfaces_get_id}},\n\t\"Name\": \"{{ActionRuleTypeInterface_post_name}}\",\n\t\"Description\": \"PostMan Put ActionRuleInterfaces\",\n\t\"Class\": \"PostManPostActionRules\",\n\t\"AdminClass\": \"PostManPostActionRulesAdmin\",\n\t\"Assembly\": \"{{ActionRuleTypeInterface_post_assembly}}\",\n\t\"InterfaceGroupBy\": \"Process Instance Related\",\n\t\"ImageId\": 0\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ActionRuleTypeInterfaces({{ActionRuleTypeInterfaces_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ActionRuleTypeInterfaces({{ActionRuleTypeInterfaces_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Action Rule Type Interfaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a5f09ea-2158-46d7-b4f6-6cacb4e226c2",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('Class');",
													"    pm.expect(jsonData.value[0]).to.have.property('AdminClass');",
													"    pm.expect(jsonData.value[0]).to.have.property('InterfaceGroupBy');",
													"    pm.expect(jsonData.value[0]).to.have.property('ImageId');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ActionRuleTypeInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ActionRuleTypeInterfaces"
											]
										},
										"description": "Retrieves all DocType Property Interfaces records"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Action Type Interfaces",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Create new Action Type Interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('Class');",
													"    pm.expect(jsonData).to.have.property('AdminClass');",
													"    pm.expect(jsonData).to.have.property('Assembly');",
													"    pm.expect(jsonData).to.have.property('ImageId');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('ActionTypeInterfaces_post_name'));",
													"    pm.expect(jsonData.Class).to.eql(pm.variables.get('ActionTypeInterfaces_post_classname'));",
													"    pm.expect(jsonData.Assembly).to.eql(pm.variables.get('ActionTypeInterfaces_post_assemblyname'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"ActionTypeInterfaces_get_id\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"var Name = \"Action_Type_Interface_\"+Date.now();",
													"var Class = \"Class_\"+Date.now();",
													"var Assembly = \"Assembly_\"+Date.now();",
													"pm.globals.set(\"ActionTypeInterfaces_post_name\", Name);",
													"pm.globals.set(\"ActionTypeInterfaces_post_classname\", Class);",
													"pm.globals.set(\"ActionTypeInterfaces_post_assemblyname\", Assembly);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Name\": \"{{ActionTypeInterfaces_post_name}}\",\r\n\t\"Description\": \"Postman Post ActionTypeInterface\",\r\n\t\"Class\": \"{{ActionTypeInterfaces_post_classname}}\",\r\n\t\"AdminClass\": \"PostManRouteAdmin\",\r\n\t\"Assembly\": \"{{ActionTypeInterfaces_post_assemblyname}}\",\r\n\t\"ImageId\": 0\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ActionTypeInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ActionTypeInterfaces"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "Get Action Type Interface with Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('Class');",
													"    pm.expect(jsonData).to.have.property('AdminClass');",
													"    pm.expect(jsonData).to.have.property('Assembly');",
													"    pm.expect(jsonData).to.have.property('ImageId');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('ActionTypeInterfaces_get_id'));",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('ActionTypeInterfaces_post_name'));",
													"    pm.expect(jsonData.Class).to.eql(pm.variables.get('ActionTypeInterfaces_post_classname'));",
													"    pm.expect(jsonData.Assembly).to.eql(pm.variables.get('ActionTypeInterfaces_post_assemblyname'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ActionTypeInterfaces({{ActionTypeInterfaces_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ActionTypeInterfaces({{ActionTypeInterfaces_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Action Type Interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Verify Response status code and Response body.\", function () {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Description\": \"Postman pacth - ActionTypeInterfaces\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ActionTypeInterfaces({{ActionTypeInterfaces_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ActionTypeInterfaces({{ActionTypeInterfaces_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Action Type Interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Verify Response status code and Response body.\", function () {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Id\": {{ActionTypeInterfaces_get_id}},\r\n\t\"Name\": \"{{ActionTypeInterfaces_post_name}}\",\r\n\t\"Description\": \"Postman Put ActionTypeInterface\",\r\n\t\"Class\": \"{{ActionTypeInterfaces_post_classname}}\",\r\n\t\"AdminClass\": \"PostManRouteAdmin\",\r\n\t\"Assembly\": \"{{ActionTypeInterfaces_post_assemblyname}}\",\r\n\t\"ImageId\": 0\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ActionTypeInterfaces({{ActionTypeInterfaces_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ActionTypeInterfaces({{ActionTypeInterfaces_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Action Type Interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('Class');",
													"    pm.expect(jsonData.value[0]).to.have.property('AdminClass');",
													"    pm.expect(jsonData.value[0]).to.have.property('Assembly');",
													"    pm.expect(jsonData.value[0]).to.have.property('ImageId');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ActionTypeInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ActionTypeInterfaces"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "BPM User Groups",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Create new BPM User Groups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('BPMUserGroups_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"BPMUserGroups_get_id\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"var Name = \"BPM_User_Group_Name\"+Date.now();",
													"pm.globals.set(\"BPMUserGroups_post_name\", Name);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Name\": \"{{BPMUserGroups_post_name}}\",\r\n  \"Description\": \"PostMan Post - BPMUserGroups\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/BPMUserGroups",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"BPMUserGroups"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "Get BPM User Groups (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('BPMUserGroups_post_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('BPMUserGroups_get_id'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/BPMUserGroups({{BPMUserGroups_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"BPMUserGroups({{BPMUserGroups_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch BPM User Groups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Verify Response status code and Response body.\", function () {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Description\": \"PostMan Patch - BPMUserGroups\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/BPMUserGroups({{BPMUserGroups_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"BPMUserGroups({{BPMUserGroups_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put BPM User Groups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Verify Response status code and Response body.\", function () {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Id\":{{BPMUserGroups_get_id}},\r\n\t\"Name\": \"{{BPMUserGroups_post_name}}\",\r\n\t\"Description\": \"PostMan Put - BPM User Groups\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/BPMUserGroups({{BPMUserGroups_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"BPMUserGroups({{BPMUserGroups_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All BPM User Groups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"var jsonData;",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Initialize JsonBody",
													"    jsonData = pm.response.json();",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/BPMUserGroups",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"BPMUserGroups"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "BPM User User Groups",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Post BPM User User Groups with Children",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"UserId\": 100009,\n  \"GroupId\": 100004\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/BPMUserUserGroups",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"BPMUserUserGroups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get BPM User User Groups with children",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/BPMUserUserGroups(UserId=100009,GroupId=100001)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"BPMUserUserGroups(UserId=100009,GroupId=100001)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch BPM User User Groups Class",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"UserId\": 100009,\n  \"GroupId\": 100004\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/BPMUserUserGroups(UserId=100009,GroupId=100004)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"BPMUserUserGroups(UserId=100009,GroupId=100004)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put BPM User User Groups Class",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"UserId\": 100009,\n  \"GroupId\": 100004\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/BPMUserUserGroups(UserId=100009,GroupId=100004)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"BPMUserUserGroups(UserId=100009,GroupId=100004)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All BPM User User Groups",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/BPMUserUserGroups",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"BPMUserUserGroups"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Delete BPM User User Groups Class",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/BPMUserUserGroups(UserId=100009,GroupId=100004)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"BPMUserUserGroups(UserId=100009,GroupId=100004)"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Duration Type Interfaces",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Create new Duration Type Interfaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Verify Id and Name values in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('DurationTypeInterface_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Description');",
													"  pm.expect(jsonData).to.have.property('InterfaceClass');",
													"  pm.expect(jsonData).to.have.property('InterfaceAdminClass');",
													"  pm.expect(jsonData).to.have.property('InterfaceAssembly');",
													"});",
													"",
													"",
													"pm.test(\"Store Duration Type Interface Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"DurationTypeInterface_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"DurationTypeInterface_\"+Date.now()",
													"    pm.globals.set(\"DurationTypeInterface_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"Name\": \"{{DurationTypeInterface_post_name}}\",\r\n   \"Description\": \"PostMan Duration Type Test Engine Calculation Object\",\r\n   \"InterfaceClass\":\"{{DurationTypeInterface_post_name}}\",\r\n   \"InterfaceAdminClass\":\"B\",\r\n   \"InterfaceAssembly\":\"{{DurationTypeInterface_post_name}}\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DurationTypeInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DurationTypeInterfaces"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "Get Duration Type Interface with Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Verify Id and Name values in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('DurationTypeInterface_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Description');",
													"  pm.expect(jsonData).to.have.property('InterfaceClass');",
													"  pm.expect(jsonData).to.have.property('InterfaceAdminClass');",
													"  pm.expect(jsonData).to.have.property('InterfaceAssembly');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/DurationTypeInterfaces({{DurationTypeInterface_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DurationTypeInterfaces({{DurationTypeInterface_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Duration Type Interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Description\": \"Postman patch - Duration Type Inteface\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DurationTypeInterfaces({{DurationTypeInterface_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DurationTypeInterfaces({{DurationTypeInterface_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Duration Type Interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"Id\": {{DurationTypeInterface_get_id}},\r\n   \"Name\": \"{{DurationTypeInterface_post_name}}\",\r\n   \"Description\": \"Postman put - Duration type interface\",\r\n   \"InterfaceClass\":\"{{DurationTypeInterface_post_name}}\",\r\n   \"InterfaceAdminClass\":\"B\",\r\n   \"InterfaceAssembly\":\"{{DurationTypeInterface_post_name}}\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DurationTypeInterfaces({{DurationTypeInterface_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DurationTypeInterfaces({{DurationTypeInterface_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Duration Type Interfaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify all fields are present in response.\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('InterfaceClass');",
													"    pm.expect(jsonData.value[0]).to.have.property('InterfaceAdminClass');",
													"    pm.expect(jsonData.value[0]).to.have.property('InterfaceAssembly');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/DurationTypeInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DurationTypeInterfaces"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "LoadBalanceInterfaces",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "Create new Load Balancer Interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Verify Id and Name values in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('LoadBalancerInterface_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('IsManual');",
													"  pm.expect(jsonData).to.have.property('Description');",
													"  pm.expect(jsonData).to.have.property('InterfaceClass');",
													"  pm.expect(jsonData).to.have.property('InterfaceAdminClass');",
													"  pm.expect(jsonData).to.have.property('InterfaceAssembly');",
													"  pm.expect(jsonData).to.have.property('ImageId');",
													"});",
													"",
													"pm.test(\"Store Load balancer interface Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"LoadBalancerInterface_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"LoadBalancerInterface_\"+Date.now()",
													"    pm.globals.set(\"LoadBalancerInterface_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Name\": \"{{LoadBalancerInterface_post_name}}\",\r\n\t\"Description\": \"PostMan Duration Type Test Engine Calculation Object\",\r\n\t\"InterfaceClass\": \"{{LoadBalancerInterface_post_name}}\",\r\n\t\"InterfaceAdminClass\": \"A\",\r\n\t\"InterfaceAssembly\": \"{{LoadBalancerInterface_post_name}}\",\r\n\t\"ImageId\": 0,\r\n\t\"IsManual\": false\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/LoadBalanceInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"LoadBalanceInterfaces"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "Get Load Balancer Interface with Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Verify Id and Name values in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('LoadBalancerInterface_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('IsManual');",
													"  pm.expect(jsonData).to.have.property('Description');",
													"  pm.expect(jsonData).to.have.property('InterfaceClass');",
													"  pm.expect(jsonData).to.have.property('InterfaceAdminClass');",
													"  pm.expect(jsonData).to.have.property('InterfaceAssembly');",
													"  pm.expect(jsonData).to.have.property('ImageId');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/LoadBalanceInterfaces({{LoadBalancerInterface_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"LoadBalanceInterfaces({{LoadBalancerInterface_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Load Balancer Interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Description\": \"Postman patch - Load balancer interface\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/LoadBalanceInterfaces({{LoadBalancerInterface_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"LoadBalanceInterfaces({{LoadBalancerInterface_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Load Balancer Interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PUT_\"+Date.now()",
													"    pm.globals.set(\"categories_put_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n\t\"Id\": {{LoadBalancerInterface_get_id}},\r\n\t\"Name\": \"{{LoadBalancerInterface_post_name}}\",\r\n\t\"Description\": \"Postman put - Load balancer interface\",\r\n\t\"InterfaceClass\": \"{{LoadBalancerInterface_post_name}}\",\r\n\t\"InterfaceAdminClass\": \"A\",\r\n\t\"InterfaceAssembly\": \"{{LoadBalancerInterface_post_name}}\",\r\n\t\"ImageId\": 0,\r\n\t\"IsManual\": false\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/LoadBalanceInterfaces({{LoadBalancerInterface_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"LoadBalanceInterfaces({{LoadBalancerInterface_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Load Balancer Interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify all fields are listed in response.\", function () {",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsManual');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('InterfaceClass');",
													"    pm.expect(jsonData.value[0]).to.have.property('InterfaceAdminClass');",
													"    pm.expect(jsonData.value[0]).to.have.property('InterfaceAssembly');",
													"    pm.expect(jsonData.value[0]).to.have.property('ImageId');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/LoadBalanceInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"LoadBalanceInterfaces"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfAction Rules",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Post WfAction Rules",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"ActionId\": 1001,\n    \"Description\": \"PostMan Post Action Rule\",\n    \"InterfaceId\": 1003,\n    \"AuditFlag\": 0,\n    \"AllowModification\": 0,\n    \"AllowConfig\": 0\n }"
										},
										"url": {
											"raw": "{{SiteURL}}api/WfActionRules",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WfActionRules"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get WfAction Rules with Children",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/WfActionRules(100003)?$expand=ActionRuleTypeInterface,Action",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WfActionRules(100003)"
											],
											"query": [
												{
													"key": "$expand",
													"value": "ActionRuleTypeInterface,Action"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All WfAction Rules",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/WfActionRules",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WfActionRules"
											]
										},
										"description": "Retrieves all DocType Property Interfaces records"
									},
									"response": []
								},
								{
									"name": "Patch WfAction Rules",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Description\": \"PostMan Patch Action Rule\",\n  \"InterfaceId\": 100001\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/WfActionRules(100278)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WfActionRules(100278)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put WfAction Rules",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Id\": 100278,\n  \"ActionId\": 1001,\n  \"Description\": \"PostMan Put Action Rule\",\n  \"InterfaceId\": 100001,\n  \"ActionRuleData\": null,\n  \"AuditFlag\": 0,\n  \"AllowModification\": 0,\n  \"AllowConfig\": 0\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/WfActionRules(100278)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WfActionRules(100278)"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfActionAcls",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Get All WfActionAcls",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/WfActionAcls",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WfActionAcls"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Post WfActionAcls",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "  {\n  \"ActionId\": 100165,\n  \"EntityId\": 1,\n  \"EntityTypeEnum\": \"UserGroup\"\n}\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/WfActionAcls",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WfActionAcls"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete WfActionAcls",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/WfActionAcls(ActionId=1000,EntityId= 1,EntityType= 1)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WfActionAcls(ActionId=1000,EntityId= 1,EntityType= 1)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get WfActionAcls with Key",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/WfActionAcls(ActionId=100165,EntityId= 100069,EntityType= 0)?$expand=Action",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WfActionAcls(ActionId=100165,EntityId= 100069,EntityType= 0)"
											],
											"query": [
												{
													"key": "$expand",
													"value": "Action"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfActions",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Get All WfActions",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/WfActions",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WfActions"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Get All WfActions with key",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/WfActions(100932)?$expand=Process,Activity,ActionTypeInterface",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WfActions(100932)"
											],
											"query": [
												{
													"key": "$expand",
													"value": "Process,Activity,ActionTypeInterface"
												}
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Post WfActions",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"ActionTypeInterfaceId\": 0,\n  \"IsAudit\": true,\n  \"AllowBaModification\": false,\n  \"AllowBaConfig\": false,\n  \"ActionLevel\": 0,\n  \"UseLatestDocument\": true,\n  \"Name\": \"Postman test\",\n  \"Description\": \"\",\n  \"ProcessId\": 100006,\n  \"ActivityId\": 100013,\n  \"ActivityState\": 2,\n  \"ExecutionSequence\": 2,\n  \"ParentId\": 100928,\n  \"ImageId\": 0,\n  \"ActionData\": \"\",\n  \"ElseActionId\": 0,\n  \"CustomFlags\": \"\",\n  \"ActivityLevelActionConfig\": \"\",\n  \"ConditionalMacroId\": \"\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/WfActions",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WfActions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete WfActions",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/WfActions(100945)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WfActions(100945)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch WfActions",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Description\": \"Postman Test Patch update\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/WfActions(100945)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WfActions(100945)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put WfActions",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"ActionTypeInterfaceId\": 0,\n  \"IsAudit\": true,\n  \"AllowBaModification\": false,\n  \"AllowBaConfig\": false,\n  \"ActionLevel\": 0,\n  \"UseLatestDocument\": true,\n  \"Id\": 100945,\n  \"Name\": \"Postman test\",\n  \"Description\": \"Postman Test Put update\",\n  \"ProcessId\": 100006,\n  \"ActivityId\": 100013,\n  \"ActivityState\": 2,\n  \"ExecutionSequence\": 2,\n  \"ParentId\": 100928,\n  \"ImageId\": 0,\n  \"ActionData\": \"\",\n  \"ElseActionId\": 0,\n  \"CustomFlags\": \"\",\n  \"ActivityLevelActionConfig\": \"\",\n  \"ConditionalMacroId\": \"\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/WfActions(100945)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WfActions(100945)"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfActivities",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Get All  WfActivities",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/WfActivities",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WfActivities"
											]
										},
										"description": "Retrieves all DocType Property Interfaces records"
									},
									"response": []
								},
								{
									"name": "Post WfActivities Children",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"UseDefaultWmConfigData\": false,\n  \"IsEnabled\": false,\n  \"IsAudit\": true,\n  \"AllowBaModification\": true,\n  \"MustSearch\": false,\n  \"ShowAssignedOnly\": false,\n  \"DisableAssign\": false,\n  \"DisableUnassign\": false,\n  \"DisableUnlock\": false,\n  \"HideOnUi\": false,\n  \"Name\": \"Postman Test\",\n  \"Description\": \"Postaman Post\",\n  \"WmInterfaceId\": 0,\n  \"WmConfigData\": \"\",\n  \"DefaultActivityMenuId\": \"\",\n  \"ProcessId\": 100007,\n  \"ActivityTypeInterfaceId\": 1,\n  \"DurationInterfaceId\": 1,\n  \"DurationMetric\": \"DAYS\",\n  \"DurationUnit\": 5,\n  \"DurationModel\": \"FIXED\",\n  \"Priority\": 0,\n  \"EscalationActivityId\": 0,\n  \"EscalationMode\": 0,\n  \"DefaultClosureActivityId\": 1,\n  \"ImageId\": 16444375,\n  \"ActivityData\": \"\",\n  \"LoadBalanceInterfaceId\": 0,\n  \"AdminSearchClassId\": 0,\n  \"GoalDurationInterfaceId\": 1,\n  \"GoalDurationMetric\": \"DAYS\",\n  \"GoalDurationUnit\": 4,\n  \"GoalDurationModel\": \"FIXED\",\n  \"IsInteractive\": false,\n  \"DisplaySequence\": 0\n }"
										},
										"url": {
											"raw": "{{SiteURL}}api/WfActivities",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WfActivities"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get WfActivities with Children",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/WfActivities(1)?$expand=Process,DueDurationInterface,GoalDurationInterface",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WfActivities(1)"
											],
											"query": [
												{
													"key": "$expand",
													"value": "Process,DueDurationInterface,GoalDurationInterface"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch WfActivities",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Description\": \"Postman Post Post Patch\"\n  }"
										},
										"url": {
											"raw": "{{SiteURL}}api/WfActivities(100019)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WfActivities(100019)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put WfActivities",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"UseDefaultWmConfigData\": false,\n  \"IsEnabled\": false,\n  \"IsAudit\": true,\n  \"AllowBaModification\": true,\n  \"MustSearch\": false,\n  \"ShowAssignedOnly\": false,\n  \"DisableAssign\": false,\n  \"DisableUnassign\": false,\n  \"DisableUnlock\": false,\n  \"HideOnUi\": false,\n  \"Id\": 100019,\n  \"Name\": \"Postman Test\",\n  \"Description\": \"Postman Post Post Patch Put\",\n  \"WmInterfaceId\": 0,\n  \"WmConfigData\": \"\",\n  \"DefaultActivityMenuId\": \"\",\n  \"ProcessId\": 100007,\n  \"ActivityTypeInterfaceId\": 1,\n  \"DurationInterfaceId\": 1,\n  \"DurationMetric\": \"DAYS\",\n  \"DurationUnit\": 5,\n  \"DurationModel\": \"FIXED\",\n  \"Priority\": 0,\n  \"EscalationActivityId\": 0,\n  \"EscalationMode\": 0,\n  \"DefaultClosureActivityId\": 1,\n  \"ImageId\": 16444375,\n  \"ActivityData\": \"\",\n  \"LoadBalanceInterfaceId\": 0,\n  \"AdminSearchClassId\": 0,\n  \"GoalDurationInterfaceId\": 1,\n  \"GoalDurationMetric\": \"DAYS\",\n  \"GoalDurationUnit\": 4,\n  \"GoalDurationModel\": \"FIXED\",\n  \"IsInteractive\": false,\n  \"DisplaySequence\": 0\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/WfActivities(100019)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WfActivities(100019)"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfActivityAcls",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfActivityDocTypeWmi",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfActivityTypeInterfaces",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfDeletedWfActionAndRules",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfEngineProcesses",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfEngineRegistries",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfGlobalProcessVariables",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfObjectCheckouts",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfProcessAcls",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfProcessDesignerRoles",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfProcesses",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Get All WfProcesses",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/WfProcesses",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WfProcesses"
											]
										},
										"description": "Retrieves all DocType Property Interfaces records"
									},
									"response": []
								},
								{
									"name": "Post WfProcesses Children",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Enabled\": false,\n  \"IsAudit\": true,\n  \"AllowBaModification\": true,\n  \"HideOnUI\": true,\n  \"IsPartialRefresh\": false,\n  \"Name\": \"Postman Process\",\n  \"Description\": \"Postman Process post\",\n  \"DurationInterfaceId\": 1,\n  \"DurationMetric\": \"DAYS\",\n  \"DurationUnit\": 5,\n  \"DurationModel\": \"FLOATING\",\n  \"ImageId\": 16711680,\n  \"DefaultActivityId\": 0,\n  \"ActiveEngineId\": 0,\n  \"LastActivityDate\": \"2017-04-14T02:15:10.887-04:00\",\n  \"GoalDurationInterfaceId\": 1,\n  \"GoalDurationMetric\": \"DAYS\",\n  \"GoalDurationUnit\": 3,\n  \"GoalDurationModel\": \"FIXED\"\n }"
										},
										"url": {
											"raw": "{{SiteURL}}api/WfProcesses",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WfProcesses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get WfProcesses with Children",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/WfProcesses(1)?$expand=DueDurationInterface,GoalDurationInterface",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WfProcesses(1)"
											],
											"query": [
												{
													"key": "$expand",
													"value": "DueDurationInterface,GoalDurationInterface"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Checkout",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											},
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/CheckOutProcess(Id={{process_get_id}},Comment='Checkout by user{{process_get_id}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CheckOutProcess(Id={{process_get_id}},Comment='Checkout by user{{process_get_id}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch WfProcesses",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Description\": \"Postman Post Post Patch\"\n  }"
										},
										"url": {
											"raw": "{{SiteURL}}api/WfProcesses(100007)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WfProcesses(100007)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put WfProcesses",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \n  \"Enabled\": false,\n  \"IsAudit\": true,\n  \"AllowBaModification\": true,\n  \"HideOnUI\": true,\n  \"IsPartialRefresh\": false,\n  \"Id\": 100007,\n  \"Name\": \"Postman Process\",\n  \"Description\": \"Postman Post Post Patch Put\",\n  \"DurationInterfaceId\": 1,\n  \"DurationMetric\": \"DAYS\",\n  \"DurationUnit\": 5,\n  \"DurationModel\": \"FLOATING\",\n  \"ImageId\": 16711680,\n  \"DefaultActivityId\": 0,\n  \"ActiveEngineId\": 0,\n  \"LastActivityDate\": \"2017-04-14T02:15:10.887-04:00\",\n  \"GoalDurationInterfaceId\": 1,\n  \"GoalDurationMetric\": \"DAYS\",\n  \"GoalDurationUnit\": 3,\n  \"GoalDurationModel\": \"FIXED\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/WfProcesses(100007)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"WfProcesses(100007)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch CheckIn",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											},
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/CheckOutProcess(Id={{process_get_id}},Comment='Checkout by user{{process_get_id}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CheckOutProcess(Id={{process_get_id}},Comment='Checkout by user{{process_get_id}}')"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfProcessRegistries",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfProcessVariables",
					"item": [],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4da424ee-4cf2-4ad6-934c-6bed59f1787f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cb874d34-f3f1-49bd-a98f-004bbb705046",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "07 StorageManagement",
			"item": [
				{
					"name": "ObjectTypes",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Create new ObjectTypes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Verify Id value in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData.Id).to.eql(pm.variables.get('ObjectTypes_post_id').toString());",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Description');",
													"  pm.expect(jsonData).to.have.property('MimeType');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var id = Math.floor(10000 + Math.random() * 90000)",
													"    pm.globals.set(\"ObjectTypes_post_id\", id);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Id\": \"{{ObjectTypes_post_id}}\",\r\n  \"Description\": \"Create new object type\",\r\n  \"MimeType\": \"application/msexcel\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ObjectTypes",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ObjectTypes"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "Get ObjectTypes(Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Verify Id value in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData.Id).to.eql(pm.variables.get('ObjectTypes_post_id').toString());",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Description');",
													"  pm.expect(jsonData).to.have.property('MimeType');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ObjectTypes('{{ObjectTypes_post_id}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ObjectTypes('{{ObjectTypes_post_id}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch ObjectTypes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Description\": \"Postman patch - Object types\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ObjectTypes('{{ObjectTypes_post_id}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ObjectTypes('{{ObjectTypes_post_id}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put ObjectTypes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Id\": \"{{ObjectTypes_post_id}}\",\r\n  \"Description\": \"Postman put - Object types\",\r\n  \"MimeType\": \"application/msexcel\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ObjectTypes('{{ObjectTypes_post_id}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ObjectTypes('{{ObjectTypes_post_id}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All ObjectTypes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify all fields are present in response.\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('MimeType');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ObjectTypes",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ObjectTypes"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								},
								{
									"name": "Delete ObjectTypes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2a729a8-d385-4490-b9c5-caada51bc0de",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ObjectTypes('{{ObjectTypes_post_id}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ObjectTypes('{{ObjectTypes_post_id}}')"
											]
										}
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "StorageServers",
					"item": [
						{
							"name": "Test-Happt Path",
							"item": [
								{
									"name": "Create new StorageServers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Verify Id and ServerName value in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('ServerName');",
													"  pm.expect(jsonData.ServerName).to.eql(pm.variables.get('StorageServer_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('PhysicalServer');",
													"  pm.expect(jsonData).to.have.property('Port');",
													"  pm.expect(jsonData).to.have.property('Protocol');",
													"  pm.expect(jsonData).to.have.property('ServiceAddress');",
													"  pm.expect(jsonData).to.have.property('Type');",
													"  pm.expect(jsonData).to.have.property('Status');",
													"  pm.expect(jsonData).to.have.property('ReplicationLastPurge');",
													"  pm.expect(jsonData).to.have.property('ReplicationPollingInterval');",
													"  pm.expect(jsonData).to.have.property('LocalDBConn');",
													"  pm.expect(jsonData).to.have.property('License');",
													"  pm.expect(jsonData).to.have.property('ActiveCachePathId');",
													"  pm.expect(jsonData).to.have.property('ActiveReplicationEngineId');",
													"  pm.expect(jsonData).to.have.property('ReplicationLastActivity');",
													"  pm.expect(jsonData).to.have.property('IsEncrypted');",
													"  pm.expect(jsonData).to.have.property('SecurityCertificateId');",
													"  pm.expect(jsonData).to.have.property('ExtendedProperties');",
													"});",
													"",
													"pm.test(\"Store Storage Server Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"StorageServer_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"Storage_Server_\"+Date.now()",
													"    pm.globals.set(\"StorageServer_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ServerName\": \"{{StorageServer_post_name}}\",\r\n    \"PhysicalServer\": \"101\",\r\n    \"Port\": null,\r\n    \"Protocol\": \"SMTP\",\r\n    \"ServiceAddress\": null,\r\n    \"Type\": 1,\r\n    \"Status\": null,\r\n    \"ReplicationLastPurge\": null,\r\n    \"ReplicationPollingInterval\": null,\r\n    \"LocalDBConn\": \"111\",\r\n    \"License\": null,\r\n    \"ActiveCachePathId\": null,\r\n    \"ActiveReplicationEngineId\": null,\r\n    \"ReplicationLastActivity\": null,\r\n    \"IsEncrypted\": true,\r\n    \"SecurityCertificateId\": 1000000,\r\n    \"ExtendedProperties\": null\r\n}\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/StorageServers",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"StorageServers"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "Get StorageServers(Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Verify Id and ServerName value in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('ServerName');",
													"  pm.expect(jsonData.ServerName).to.eql(pm.variables.get('StorageServer_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('PhysicalServer');",
													"  pm.expect(jsonData).to.have.property('Port');",
													"  pm.expect(jsonData).to.have.property('Protocol');",
													"  pm.expect(jsonData).to.have.property('ServiceAddress');",
													"  pm.expect(jsonData).to.have.property('Type');",
													"  pm.expect(jsonData).to.have.property('Status');",
													"  pm.expect(jsonData).to.have.property('ReplicationLastPurge');",
													"  pm.expect(jsonData).to.have.property('ReplicationPollingInterval');",
													"  pm.expect(jsonData).to.have.property('LocalDBConn');",
													"  pm.expect(jsonData).to.have.property('License');",
													"  pm.expect(jsonData).to.have.property('ActiveCachePathId');",
													"  pm.expect(jsonData).to.have.property('ActiveReplicationEngineId');",
													"  pm.expect(jsonData).to.have.property('ReplicationLastActivity');",
													"  pm.expect(jsonData).to.have.property('IsEncrypted');",
													"  pm.expect(jsonData).to.have.property('SecurityCertificateId');",
													"  pm.expect(jsonData).to.have.property('ExtendedProperties');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/StorageServers({{StorageServer_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"StorageServers({{StorageServer_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch StorageServers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"PhysicalServer\": \"Postman patch - storage server\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/StorageServers({{StorageServer_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"StorageServers({{StorageServer_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put StorageServers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Id\": {{StorageServer_get_id}},\r\n    \"ServerName\": \"{{StorageServer_post_name}}\",\r\n    \"PhysicalServer\": \"Postman put - storage server\",\r\n    \"Port\": null,\r\n    \"Protocol\": \"SMTP\",\r\n    \"ServiceAddress\": null,\r\n    \"Type\": 1,\r\n    \"Status\": null,\r\n    \"ReplicationLastPurge\": null,\r\n    \"ReplicationPollingInterval\": null,\r\n    \"LocalDBConn\": \"111\",\r\n    \"License\": null,\r\n    \"ActiveCachePathId\": null,\r\n    \"ActiveReplicationEngineId\": null,\r\n    \"ReplicationLastActivity\": null,\r\n    \"IsEncrypted\": true,\r\n    \"SecurityCertificateId\": 1000000,\r\n    \"ExtendedProperties\": null\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/StorageServers({{StorageServer_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"StorageServers({{StorageServer_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All StorageServers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify all fields are listed in response.\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('ServerName');",
													"    pm.expect(jsonData.value[0]).to.have.property('PhysicalServer');",
													"    pm.expect(jsonData.value[0]).to.have.property('Port');",
													"    pm.expect(jsonData.value[0]).to.have.property('Protocol');",
													"    pm.expect(jsonData.value[0]).to.have.property('ServiceAddress');",
													"    pm.expect(jsonData.value[0]).to.have.property('Type');",
													"    pm.expect(jsonData.value[0]).to.have.property('Status');",
													"    pm.expect(jsonData.value[0]).to.have.property('ReplicationLastPurge');",
													"    pm.expect(jsonData.value[0]).to.have.property('ReplicationPollingInterval');",
													"    pm.expect(jsonData.value[0]).to.have.property('LocalDBConn');",
													"    pm.expect(jsonData.value[0]).to.have.property('License');",
													"    pm.expect(jsonData.value[0]).to.have.property('ActiveCachePathId');",
													"    pm.expect(jsonData.value[0]).to.have.property('ActiveReplicationEngineId');",
													"    pm.expect(jsonData.value[0]).to.have.property('ReplicationLastActivity');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsEncrypted');",
													"    pm.expect(jsonData.value[0]).to.have.property('SecurityCertificateId');",
													"    pm.expect(jsonData.value[0]).to.have.property('ExtendedProperties');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/StorageServers",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"StorageServers"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								},
								{
									"name": "Delete StorageServers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60ae0af2-3a4b-4322-b81a-f74f8d469b98",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/StorageServers({{StorageServer_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"StorageServers({{StorageServer_get_id}})"
											]
										}
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						},
						{
							"name": "Test-AWS Happy path",
							"item": [
								{
									"name": "Create new AWS Storage Server",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Verify Id and ServerName values in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('ServerName');",
													"  pm.expect(jsonData.ServerName).to.eql(pm.variables.get('AWSStorageServer_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"    pm.expect(jsonData).to.have.property('PhysicalServer');",
													"    pm.expect(jsonData).to.have.property('Port');",
													"    pm.expect(jsonData).to.have.property('Protocol');",
													"    pm.expect(jsonData).to.have.property('ServiceAddress');",
													"    pm.expect(jsonData).to.have.property('Type');",
													"    pm.expect(jsonData).to.have.property('Status');",
													"    pm.expect(jsonData).to.have.property('ReplicationLastPurge');",
													"    pm.expect(jsonData).to.have.property('ReplicationPollingInterval');",
													"    pm.expect(jsonData).to.have.property('LocalDBConn');",
													"    pm.expect(jsonData).to.have.property('License');",
													"    pm.expect(jsonData).to.have.property('ActiveCachePathId');",
													"    pm.expect(jsonData).to.have.property('ActiveReplicationEngineId');",
													"    pm.expect(jsonData).to.have.property('ReplicationLastActivity');",
													"    pm.expect(jsonData).to.have.property('IsEncrypted');",
													"    pm.expect(jsonData).to.have.property('SecurityCertificateId');",
													"    pm.expect(jsonData).to.have.property('ExtendedProperties');",
													"});",
													"",
													"pm.test(\"Store AWS storage server Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"AWSStorageServer_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"AWS_SS_NAME_\"+Date.now()",
													"    pm.globals.set(\"AWSStorageServer_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"ServerName\": \"{{AWSStorageServer_post_name}}\",\r\n    \"PhysicalServer\": \"Postman_Post\",\r\n    \"Port\": null,\r\n    \"Protocol\": \"\",\r\n    \"ServiceAddress\": \"\",\r\n    \"Type\": 2,\r\n    \"Status\": null,\r\n    \"ReplicationLastPurge\": null,\r\n    \"ReplicationPollingInterval\": null,\r\n    \"LocalDBConn\": \"\",\r\n    \"License\": \"\",\r\n    \"ActiveCachePathId\": null,\r\n    \"ActiveReplicationEngineId\": null,\r\n    \"ReplicationLastActivity\": null,\r\n    \"IsEncrypted\": false,\r\n    \"SecurityCertificateId\": null,\r\n    \"ExtendedProperties\": \"{\\\"bucket\\\":\\\"lobstates3\\\",\\\"region\\\":\\\"us-east-1\\\",\\\"accessKey\\\":\\\"AKIAI5TF3SEPFVQ2WNVQ\\\",\\\"secretKey\\\":\\\"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\\\",\\\"signedUrlExpireSeconds\\\":\\\"600\\\"}\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/StorageServers",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"StorageServers"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "Get AWS Storager Server with Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Verify Id and ServerName values in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('ServerName');",
													"  pm.expect(jsonData.ServerName).to.eql(pm.variables.get('AWSStorageServer_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"    pm.expect(jsonData).to.have.property('PhysicalServer');",
													"    pm.expect(jsonData).to.have.property('Port');",
													"    pm.expect(jsonData).to.have.property('Protocol');",
													"    pm.expect(jsonData).to.have.property('ServiceAddress');",
													"    pm.expect(jsonData).to.have.property('Type');",
													"    pm.expect(jsonData).to.have.property('Status');",
													"    pm.expect(jsonData).to.have.property('ReplicationLastPurge');",
													"    pm.expect(jsonData).to.have.property('ReplicationPollingInterval');",
													"    pm.expect(jsonData).to.have.property('LocalDBConn');",
													"    pm.expect(jsonData).to.have.property('License');",
													"    pm.expect(jsonData).to.have.property('ActiveCachePathId');",
													"    pm.expect(jsonData).to.have.property('ActiveReplicationEngineId');",
													"    pm.expect(jsonData).to.have.property('ReplicationLastActivity');",
													"    pm.expect(jsonData).to.have.property('IsEncrypted');",
													"    pm.expect(jsonData).to.have.property('SecurityCertificateId');",
													"    pm.expect(jsonData).to.have.property('ExtendedProperties');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/StorageServers({{AWSStorageServer_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"StorageServers({{AWSStorageServer_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch AWS Storage Server",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PATCH_\"+Date.now()",
													"    pm.globals.set(\"categories_patch_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"PhysicalServer\": \"Postman put - AWS Storager Server\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/StorageServers({{AWSStorageServer_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"StorageServers({{AWSStorageServer_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put AWS Storager Server",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PUT_\"+Date.now()",
													"    pm.globals.set(\"categories_put_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Id\":{{AWSStorageServer_get_id}},\r\n\t\"ServerName\": \"{{AWSStorageServer_post_name}}\",\r\n    \"PhysicalServer\": \"Postman Put - AWS Storager server\",\r\n    \"Port\": null,\r\n    \"Protocol\": \"\",\r\n    \"ServiceAddress\": \"\",\r\n    \"Type\": 2,\r\n    \"Status\": null,\r\n    \"ReplicationLastPurge\": null,\r\n    \"ReplicationPollingInterval\": null,\r\n    \"LocalDBConn\": \"\",\r\n    \"License\": \"\",\r\n    \"ActiveCachePathId\": null,\r\n    \"ActiveReplicationEngineId\": null,\r\n    \"ReplicationLastActivity\": null,\r\n    \"IsEncrypted\": false,\r\n    \"SecurityCertificateId\": null,\r\n    \"ExtendedProperties\": \"{\\\"bucket\\\":\\\"lobstates3\\\",\\\"region\\\":\\\"us-east-1\\\",\\\"accessKey\\\":\\\"AKIAI5TF3SEPFVQ2WNVQ\\\",\\\"secretKey\\\":\\\"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\\\",\\\"signedUrlExpireSeconds\\\":\\\"600\\\"}\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/StorageServers({{AWSStorageServer_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"StorageServers({{AWSStorageServer_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All AWS Storage Server",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify all fields are present in response.\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('ServerName');",
													"    pm.expect(jsonData.value[0]).to.have.property('PhysicalServer');",
													"    pm.expect(jsonData.value[0]).to.have.property('Port');",
													"    pm.expect(jsonData.value[0]).to.have.property('Protocol');",
													"    pm.expect(jsonData.value[0]).to.have.property('ServiceAddress');",
													"    pm.expect(jsonData.value[0]).to.have.property('Type');",
													"    pm.expect(jsonData.value[0]).to.have.property('Status');",
													"    pm.expect(jsonData.value[0]).to.have.property('ReplicationLastPurge');",
													"    pm.expect(jsonData.value[0]).to.have.property('ReplicationPollingInterval');",
													"    pm.expect(jsonData.value[0]).to.have.property('LocalDBConn');",
													"    pm.expect(jsonData.value[0]).to.have.property('License');",
													"    pm.expect(jsonData.value[0]).to.have.property('ActiveCachePathId');",
													"    pm.expect(jsonData.value[0]).to.have.property('ActiveReplicationEngineId');",
													"    pm.expect(jsonData.value[0]).to.have.property('ReplicationLastActivity');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsEncrypted');",
													"    pm.expect(jsonData.value[0]).to.have.property('SecurityCertificateId');",
													"    pm.expect(jsonData.value[0]).to.have.property('ExtendedProperties');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/StorageServers",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"StorageServers"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "741b3aa7-b447-40b1-a6c8-64d4eea69ca2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a5b9dbc2-725a-41dd-a8e2-a7e146dac9b7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "08 EmailSynchronization",
			"item": [
				{
					"name": "EmailSynchCategorizations",
					"item": [
						{
							"name": "Test-Happy path",
							"item": [
								{
									"name": "Create new EmailSynchCategorizations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Verify Id and Name value in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('EmailSynchCategorizations_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Description');",
													"  pm.expect(jsonData).to.have.property('Configuration');",
													"})",
													"",
													"pm.test(\"Store EmailSynchCategorization Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"EmailSynchCategorizations_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"EmailSynchCategorizations_\"+Date.now()",
													"    pm.globals.set(\"EmailSynchCategorizations_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Name\": \"{{EmailSynchCategorizations_post_name}}\",\r\n\t\"Description\": \"Postman create new EmailSynchCategorization\",\r\n    \"Configuration\": \"<Email_Synch_Config><DocClassID>100005</DocClassID><Classification Default=\\\"True\\\" EmailStorage=\\\"3\\\"><DocTypeID>100020</DocTypeID><Match_Requirements /><Field_Mappings><Field_Mapping Copy_All_Values=\\\"True\\\"><Field_Name>BM String</Field_Name><Field_Value>test</Field_Value><RegExp>@</RegExp></Field_Mapping></Field_Mappings><Email_Attachments Attach=\\\"True\\\"><AttachAsRelated>False</AttachAsRelated><Attachment_DocClassID>100005</Attachment_DocClassID><Attachment_DocTypeID>100020</Attachment_DocTypeID><Copy_Fields>False</Copy_Fields></Email_Attachments><ProcessedEmail><ProcessedEmailAction>0</ProcessedEmailAction></ProcessedEmail></Classification><Classification Default=\\\"False\\\" EmailStorage=\\\"4\\\"><DocTypeID>100018</DocTypeID><Match_Requirements><Match><Email_Field>@SUBJECT</Email_Field><RegExp>$</RegExp></Match></Match_Requirements><Field_Mappings><Field_Mapping Copy_All_Values=\\\"False\\\"><Field_Name>BM String</Field_Name><Field_Value>12</Field_Value><RegExp>@</RegExp></Field_Mapping></Field_Mappings><Email_Attachments Attach=\\\"True\\\"><AttachAsRelated>False</AttachAsRelated><Attachment_DocClassID>100</Attachment_DocClassID><Attachment_DocTypeID>100018</Attachment_DocTypeID><Copy_Fields>False</Copy_Fields></Email_Attachments><ProcessedEmail><ProcessedEmailAction>2</ProcessedEmailAction><ProcessedEmailMailBox></ProcessedEmailMailBox><ProcessedEmailFolder></ProcessedEmailFolder></ProcessedEmail></Classification></Email_Synch_Config>\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/EmailSynchCategorizations",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailSynchCategorizations"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "Get EmailSynchCategorizations(Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Verify Id and Name value in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('EmailSynchCategorizations_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Description');",
													"  pm.expect(jsonData).to.have.property('Configuration');",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/EmailSynchCategorizations({{EmailSynchCategorizations_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailSynchCategorizations({{EmailSynchCategorizations_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch EmailSynchCategorizations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Description\": \"Postman patch - EmailSynchCategorization\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/EmailSynchCategorizations({{EmailSynchCategorizations_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailSynchCategorizations({{EmailSynchCategorizations_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put EmailSynchCategorizations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Id\": {{EmailSynchCategorizations_get_id}},\r\n\t\"Name\": \"{{EmailSynchCategorizations_post_name}}\",\r\n\t\"Description\": \"Postman put - EmailSynchCategorization\",\r\n    \"Configuration\": \"<Email_Synch_Config><DocClassID>100005</DocClassID><Classification Default=\\\"True\\\" EmailStorage=\\\"3\\\"><DocTypeID>100020</DocTypeID><Match_Requirements /><Field_Mappings><Field_Mapping Copy_All_Values=\\\"True\\\"><Field_Name>BM String</Field_Name><Field_Value>test</Field_Value><RegExp>@</RegExp></Field_Mapping></Field_Mappings><Email_Attachments Attach=\\\"True\\\"><AttachAsRelated>False</AttachAsRelated><Attachment_DocClassID>100005</Attachment_DocClassID><Attachment_DocTypeID>100020</Attachment_DocTypeID><Copy_Fields>False</Copy_Fields></Email_Attachments><ProcessedEmail><ProcessedEmailAction>0</ProcessedEmailAction></ProcessedEmail></Classification><Classification Default=\\\"False\\\" EmailStorage=\\\"4\\\"><DocTypeID>100018</DocTypeID><Match_Requirements><Match><Email_Field>@SUBJECT</Email_Field><RegExp>$</RegExp></Match></Match_Requirements><Field_Mappings><Field_Mapping Copy_All_Values=\\\"False\\\"><Field_Name>BM String</Field_Name><Field_Value>12</Field_Value><RegExp>@</RegExp></Field_Mapping></Field_Mappings><Email_Attachments Attach=\\\"True\\\"><AttachAsRelated>False</AttachAsRelated><Attachment_DocClassID>100</Attachment_DocClassID><Attachment_DocTypeID>100018</Attachment_DocTypeID><Copy_Fields>False</Copy_Fields></Email_Attachments><ProcessedEmail><ProcessedEmailAction>2</ProcessedEmailAction><ProcessedEmailMailBox></ProcessedEmailMailBox><ProcessedEmailFolder></ProcessedEmailFolder></ProcessedEmail></Classification></Email_Synch_Config>\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/EmailSynchCategorizations({{EmailSynchCategorizations_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailSynchCategorizations({{EmailSynchCategorizations_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All EmailSynchCategorizations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify all fields are present in response.\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('Configuration');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/EmailSynchCategorizations",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailSynchCategorizations"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								},
								{
									"name": "Delete EmailSynchCategorizations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6bfeb160-3e11-4946-bd31-bfc327ef8bd6",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/EmailSynchCategorizations({{EmailSynchCategorizations_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailSynchCategorizations({{EmailSynchCategorizations_get_id}})"
											]
										}
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "EmailSynchEngines",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Create new EmailSynchEngines",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Response has Id and Name values', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('EmailSynchEngines_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Description');",
													"  pm.expect(jsonData).to.have.property('PhysicalServer');",
													"  pm.expect(jsonData).to.have.property('ThreadPool');",
													"  pm.expect(jsonData).to.have.property('CycleTime');",
													"  pm.expect(jsonData).to.have.property('TempFolderPath');",
													"  pm.expect(jsonData).to.have.property('Lastactivitydate');",
													"  pm.expect(jsonData).to.have.property('ServiceName');",
													"})",
													"",
													"pm.test(\"Store response Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"EmailSynchEngines_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"EmailSynchEngines\"+Date.now()",
													"    pm.globals.set(\"EmailSynchEngines_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Name\": \"{{EmailSynchEngines_post_name}}\",\r\n  \"Description\": \"Create new Email Synch Engines\",\r\n  \"PhysicalServer\": \"sa-pravan-vm\",\r\n  \"ThreadPool\": 1,\r\n  \"CycleTime\": 30,\r\n  \"TempFolderPath\": \"C:\\\\\\\\Temp\",\r\n  \"IsOnline\": false,\r\n  \"IsDisabled\": true,\r\n  \"Lastactivitydate\": null,\r\n  \"ServiceName\": null\r\n}\r\n\r\n\r\n\r\n\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/EmailSynchEngines",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailSynchEngines"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "Get EmailSynchEngines(Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Response has Id and Name values', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('EmailSynchEngines_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Description');",
													"  pm.expect(jsonData).to.have.property('PhysicalServer');",
													"  pm.expect(jsonData).to.have.property('ThreadPool');",
													"  pm.expect(jsonData).to.have.property('CycleTime');",
													"  pm.expect(jsonData).to.have.property('TempFolderPath');",
													"  pm.expect(jsonData).to.have.property('Lastactivitydate');",
													"  pm.expect(jsonData).to.have.property('ServiceName');",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/EmailSynchEngines({{EmailSynchEngines_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailSynchEngines({{EmailSynchEngines_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch EmailSynchEngines",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Description\": \"Postman patch - Email Synch Engines\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/EmailSynchEngines({{EmailSynchEngines_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailSynchEngines({{EmailSynchEngines_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put EmailSynchEngines",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Id\": {{EmailSynchEngines_get_id}},\r\n  \"Name\": \"{{EmailSynchEngines_post_name}}\",\r\n  \"Description\": \"Postman put - Email Synch Engines\",\r\n  \"PhysicalServer\": \"sa-pravan-vm\",\r\n  \"ThreadPool\": 1,\r\n  \"CycleTime\": 30,\r\n  \"TempFolderPath\": \"C:\\\\\\\\Temp\",\r\n  \"IsOnline\": false,\r\n  \"IsDisabled\": true,\r\n  \"Lastactivitydate\": null,\r\n  \"ServiceName\": null\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/EmailSynchEngines({{EmailSynchEngines_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailSynchEngines({{EmailSynchEngines_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All EmailSynchEngines",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify category values are listed\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('PhysicalServer');",
													"    pm.expect(jsonData.value[0]).to.have.property('ThreadPool');",
													"    pm.expect(jsonData.value[0]).to.have.property('CycleTime');",
													"    pm.expect(jsonData.value[0]).to.have.property('TempFolderPath');",
													"    pm.expect(jsonData.value[0]).to.have.property('Lastactivitydate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ServiceName');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/EmailSynchEngines",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailSynchEngines"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "EngineMailboxes",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "Post EngineMailboxes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "41e043c1-1268-4b41-8b81-099986bdbbf0",
												"exec": [
													"pm.test(\"Set dynamic values for EmailSynchCategorization, EmailSynchEngine, MailBoxes\", function () {",
													"    var mailboxName = \"MAILBOXES_NAME\"+Date.now()",
													"    pm.globals.set(\"EngineMailboxes_post_MailboxName\", mailboxName);",
													"    ",
													"    var emailSynchCategorizationName = \"EMAIL_SYNCH_CATEGORIZATION\"+Date.now()",
													"    pm.globals.set(\"EngineMailboxes_post_emailSynchCategorizationName\", emailSynchCategorizationName);",
													"    ",
													"    var emailSynchEngine = \"EMAIL_SYNCH_ENGINE\"+Date.now()",
													"    pm.globals.set(\"EngineMailboxes_post_emailSynchEngineName\", emailSynchEngine);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "21e4af2c-abd8-426d-b79a-d9b8e391ae3f",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test('Verify Id value is present in response.', function() {\r",
													"  pm.expect(jsonData).to.have.property('Id');\r",
													"});\r",
													"\r",
													"pm.test('Verify other fields are present in response.', function() {\r",
													"  pm.expect(jsonData).to.have.property('MailboxId');\r",
													"  pm.expect(jsonData).to.have.property('EngineId');\r",
													"})\r",
													"\r",
													"pm.test(\"Store Id, MailboxId and EngineId value from Response.\", function () {\r",
													"    var id = jsonData.Id;\r",
													"    pm.globals.set(\"EngineMailboxes_get_id\", id);\r",
													"    \r",
													"    var engineId = jsonData.EngineId;\r",
													"    pm.globals.set(\"EngineMailboxes_get_engineId\", engineId);\r",
													"\r",
													"    var mailboxId = jsonData.MailboxId;\r",
													"    pm.globals.set(\"EngineMailboxes_get_mailboxId\", mailboxId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"MailBox\": {\r\n\t\t\"ProfileName\": \"Test Profile\",\r\n\t\t\"Name\": \"{{EngineMailboxes_post_MailboxName}}\",\r\n\t\t\"FolderName\": \"C:\\\\\\\\Temp\",\r\n\t\t\"EmailSynchCategorization\": {\r\n\t\t\t\"Name\": \"{{EngineMailboxes_post_emailSynchCategorizationName}}\",\r\n\t\t\t\"Description\": \"Postman create new EmailSynchCategorization\",\r\n\t\t\t\"Configuration\": \"<Email_Synch_Config><DocClassID>100005</DocClassID><Classification Default=\\\"True\\\" EmailStorage=\\\"3\\\"><DocTypeID>100020</DocTypeID><Match_Requirements /><Field_Mappings><Field_Mapping Copy_All_Values=\\\"True\\\"><Field_Name>BM String</Field_Name><Field_Value>test</Field_Value><RegExp>@</RegExp></Field_Mapping></Field_Mappings><Email_Attachments Attach=\\\"True\\\"><AttachAsRelated>False</AttachAsRelated><Attachment_DocClassID>100005</Attachment_DocClassID><Attachment_DocTypeID>100020</Attachment_DocTypeID><Copy_Fields>False</Copy_Fields></Email_Attachments><ProcessedEmail><ProcessedEmailAction>0</ProcessedEmailAction></ProcessedEmail></Classification><Classification Default=\\\"False\\\" EmailStorage=\\\"4\\\"><DocTypeID>100018</DocTypeID><Match_Requirements><Match><Email_Field>@SUBJECT</Email_Field><RegExp>$</RegExp></Match></Match_Requirements><Field_Mappings><Field_Mapping Copy_All_Values=\\\"False\\\"><Field_Name>BM String</Field_Name><Field_Value>12</Field_Value><RegExp>@</RegExp></Field_Mapping></Field_Mappings><Email_Attachments Attach=\\\"True\\\"><AttachAsRelated>False</AttachAsRelated><Attachment_DocClassID>100</Attachment_DocClassID><Attachment_DocTypeID>100018</Attachment_DocTypeID><Copy_Fields>False</Copy_Fields></Email_Attachments><ProcessedEmail><ProcessedEmailAction>2</ProcessedEmailAction><ProcessedEmailMailBox></ProcessedEmailMailBox><ProcessedEmailFolder></ProcessedEmailFolder></ProcessedEmail></Classification></Email_Synch_Config>\"\r\n\t\t},\r\n\t\t\"ActiveEngineId\": null,\r\n\t\t\"LastActivityDate\": \"2017-05-04T04:03:28.827-04:00\",\r\n\t\t\"Pwd\": \"CBa7X%2FE3VAI=\"\r\n\t},\r\n\t\"Engine\": {\r\n\t\t\"Name\": \"{{EngineMailboxes_post_emailSynchEngineName}}\",\r\n\t\t\"Description\": \"Create new Email Synch Engines\",\r\n\t\t\"PhysicalServer\": \"sa-pravan-vm\",\r\n\t\t\"ThreadPool\": 1,\r\n\t\t\"CycleTime\": 30,\r\n\t\t\"TempFolderPath\": \"C:\\\\\\\\Temp\",\r\n\t\t\"IsOnline\": false,\r\n\t\t\"IsDisabled\": true,\r\n\t\t\"Lastactivitydate\": null,\r\n\t\t\"ServiceName\": null\r\n\t}\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/EngineMailboxes",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EngineMailboxes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get EngineMailboxes with Children",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e25d370-9360-40b4-a724-c26d6752fa9d",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Verify Id value is present in response.', function() {\r",
													"  pm.expect(jsonData).to.have.property('Id');\r",
													"  pm.expect(jsonData.Id).to.eql(pm.variables.get('EngineMailboxes_get_id'));\r",
													"});\r",
													"\r",
													"pm.test('Verify other fields are present in response.', function() {\r",
													"  pm.expect(jsonData).to.have.property('MailboxId');\r",
													"  pm.expect(jsonData).to.have.property('EngineId');\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/EngineMailboxes(MailboxId={{EngineMailboxes_get_mailboxId}},EngineId={{EngineMailboxes_get_engineId}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EngineMailboxes(MailboxId={{EngineMailboxes_get_mailboxId}},EngineId={{EngineMailboxes_get_engineId}})"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Get All EngineMailboxes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4cf854c2-890b-44d3-9860-0eb4c0820986",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify category values are listed\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('MailboxId');",
													"    pm.expect(jsonData.value[0]).to.have.property('EngineId');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/EngineMailboxes",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EngineMailboxes"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Delete EngineMailboxes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b951644f-ab37-45b3-90ce-3b49c6fa1b71",
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/EngineMailboxes(MailboxId={{EngineMailboxes_get_mailboxId}},EngineId={{EngineMailboxes_get_engineId}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EngineMailboxes(MailboxId={{EngineMailboxes_get_mailboxId}},EngineId={{EngineMailboxes_get_engineId}})"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Mailboxes",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "Post Mailboxes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16a62047-b52d-4c22-a6eb-dae3ae2d6c33",
												"exec": [
													"pm.test(\"Set dynamic values for EmailSynchCategorization, EmailSynchEngine, MailBoxes\", function () {",
													"    var mailboxName = \"MAILBOXES_NAME\"+Date.now()",
													"    pm.globals.set(\"Mailboxes_post_name\", mailboxName);",
													"    ",
													"    var emailSynchCategorizationName = \"EMAIL_SYNCH_CATEGORIZATION\"+Date.now()",
													"    pm.globals.set(\"Mailboxes_post_emailSynchCategorizationName\", emailSynchCategorizationName);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "12943545-8d71-4e66-af8d-4346f9bb6172",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Response has Id and Name values', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('Mailboxes_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('ProfileName');",
													"  pm.expect(jsonData).to.have.property('FolderName');",
													"  pm.expect(jsonData).to.have.property('CategorizationId');",
													"  pm.expect(jsonData).to.have.property('ActiveEngineId');",
													"  pm.expect(jsonData).to.have.property('LastActivityDate');",
													"  pm.expect(jsonData).to.have.property('Pwd');",
													"})",
													"",
													"pm.test(\"Store Id, CategorizationId and ActiveEngineId value from Response.\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"Mailboxes_get_id\", id);",
													"    ",
													"    var categorizationId = jsonData.CategorizationId;",
													"    pm.globals.set(\"Mailboxes_get_categorizationId\", categorizationId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"ProfileName\": \"Test Profile\",\n  \"Name\": \"{{Mailboxes_post_name}}\",\n  \"FolderName\": \"C:\\\\\\\\Temp\",\n  \"EmailSynchCategorization\": {\n\t\"Name\": \"{{Mailboxes_post_emailSynchCategorizationName}}\",\n\t\"Description\": \"Postman create new EmailSynchCategorization\",\n    \"Configuration\": \"<Email_Synch_Config><DocClassID>100005</DocClassID><Classification Default=\\\"True\\\" EmailStorage=\\\"3\\\"><DocTypeID>100020</DocTypeID><Match_Requirements /><Field_Mappings><Field_Mapping Copy_All_Values=\\\"True\\\"><Field_Name>BM String</Field_Name><Field_Value>test</Field_Value><RegExp>@</RegExp></Field_Mapping></Field_Mappings><Email_Attachments Attach=\\\"True\\\"><AttachAsRelated>False</AttachAsRelated><Attachment_DocClassID>100005</Attachment_DocClassID><Attachment_DocTypeID>100020</Attachment_DocTypeID><Copy_Fields>False</Copy_Fields></Email_Attachments><ProcessedEmail><ProcessedEmailAction>0</ProcessedEmailAction></ProcessedEmail></Classification><Classification Default=\\\"False\\\" EmailStorage=\\\"4\\\"><DocTypeID>100018</DocTypeID><Match_Requirements><Match><Email_Field>@SUBJECT</Email_Field><RegExp>$</RegExp></Match></Match_Requirements><Field_Mappings><Field_Mapping Copy_All_Values=\\\"False\\\"><Field_Name>BM String</Field_Name><Field_Value>12</Field_Value><RegExp>@</RegExp></Field_Mapping></Field_Mappings><Email_Attachments Attach=\\\"True\\\"><AttachAsRelated>False</AttachAsRelated><Attachment_DocClassID>100</Attachment_DocClassID><Attachment_DocTypeID>100018</Attachment_DocTypeID><Copy_Fields>False</Copy_Fields></Email_Attachments><ProcessedEmail><ProcessedEmailAction>2</ProcessedEmailAction><ProcessedEmailMailBox></ProcessedEmailMailBox><ProcessedEmailFolder></ProcessedEmailFolder></ProcessedEmail></Classification></Email_Synch_Config>\"\n  },\n  \"ActiveEngineId\": null,\n  \"LastActivityDate\": \"2017-05-04T04:03:28.827-04:00\",\n  \"Pwd\": \"CBa7X%2FE3VAI=\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Mailboxes",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Mailboxes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Mailboxes with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91ece526-cc9e-4427-9eba-8778b8d78553",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Response has Id and Name values', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('Mailboxes_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('ProfileName');",
													"  pm.expect(jsonData).to.have.property('FolderName');",
													"  pm.expect(jsonData).to.have.property('CategorizationId');",
													"  pm.expect(jsonData).to.have.property('ActiveEngineId');",
													"  pm.expect(jsonData).to.have.property('LastActivityDate');",
													"  pm.expect(jsonData).to.have.property('Pwd');",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/Mailboxes({{Mailboxes_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Mailboxes({{Mailboxes_get_id}})"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Patch Mailboxes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "81c1e36e-dc34-4a60-99da-efdf89a241d8",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ProfileName\": \"Postman patch - Mailboxes\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Mailboxes({{Mailboxes_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Mailboxes({{Mailboxes_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Mailboxes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8216b5e9-b045-4644-985b-dc89afdfac11",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Id\":{{Mailboxes_get_id}},\n  \"ProfileName\": \"Postman Put - Mailboxes\",\n  \"Name\": \"{{Mailboxes_post_name}}\",\n  \"FolderName\": \"C:\\\\\\\\Temp\",\n  \"CategorizationId\":{{Mailboxes_get_categorizationId}},\n  \"ActiveEngineId\": null,\n  \"LastActivityDate\": \"2017-05-04T04:03:28.827-04:00\",\n  \"Pwd\": \"CBa7X%2FE3VAI=\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Mailboxes({{Mailboxes_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Mailboxes({{Mailboxes_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Mailboxes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1840dce6-903c-4ce3-9278-992d3f37c3b4",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify all values are listed in response.\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('ProfileName');",
													"    pm.expect(jsonData.value[0]).to.have.property('FolderName');",
													"    pm.expect(jsonData.value[0]).to.have.property('CategorizationId');",
													"    pm.expect(jsonData.value[0]).to.have.property('ActiveEngineId');",
													"    pm.expect(jsonData.value[0]).to.have.property('LastActivityDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('Pwd');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/Mailboxes",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Mailboxes"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a44ea42c-1330-410b-a153-dcec8f40c37d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0c13f513-8b05-4999-8f68-2b9b6bacf447",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "09 Reports",
			"item": [
				{
					"name": "ReportCategories",
					"item": [
						{
							"name": "Happy Path Testing",
							"item": [
								{
									"name": "Create new ReportCategories",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('GroupId');",
													"    pm.expect(jsonData).to.have.property('ReportView');",
													"    pm.expect(jsonData).to.have.property('GroupId');",
													"    pm.expect(jsonData).to.have.property('Sequence');",
													"    pm.expect(jsonData).to.have.property('Status');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('ReportCategories_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"ReportCategories_get_id\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"var Name = \"Report_Category_Name_\"+Date.now();",
													"pm.globals.set(\"ReportCategories_post_name\", Name);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Name\": \"{{ReportCategories_post_name}}\",\r\n  \"Description\": \"Create new report category\",\r\n  \"Status\": 1,\r\n  \"Sequence\": 1,\r\n  \"GroupId\": 1,\r\n  \"ReportView\": 0\r\n}\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportCategories",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportCategories"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "Get ReportCategories(Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('GroupId');",
													"    pm.expect(jsonData).to.have.property('ReportView');",
													"    pm.expect(jsonData).to.have.property('GroupId');",
													"    pm.expect(jsonData).to.have.property('Sequence');",
													"    pm.expect(jsonData).to.have.property('Status');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('ReportCategories_get_id'));",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('ReportCategories_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ReportCategories({{ReportCategories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportCategories({{ReportCategories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch ReportCategories",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Description\": \"Postman patch - Report categories\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportCategories({{ReportCategories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportCategories({{ReportCategories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put ReportCategories",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Id\": {{ReportCategories_get_id}},\r\n  \"Name\": \"{{ReportCategories_post_name}}\",\r\n  \"Description\": \"Postman put - Report category\",\r\n  \"Status\": 1,\r\n  \"Sequence\": 1,\r\n  \"GroupId\": 1,\r\n  \"ReportView\": 0\r\n}\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportCategories({{ReportCategories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportCategories({{ReportCategories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All ReportCategories",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Verify Response status code and Response body.\", function () {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('GroupId');",
													"    pm.expect(jsonData.value[0]).to.have.property('ReportView');",
													"    pm.expect(jsonData.value[0]).to.have.property('GroupId');",
													"    pm.expect(jsonData.value[0]).to.have.property('Sequence');",
													"    pm.expect(jsonData.value[0]).to.have.property('Status');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ReportCategories",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportCategories"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								},
								{
									"name": "Delete ReportCategories",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40eb2268-76a2-458f-aade-38564d94b673",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportCategories({{ReportCategories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportCategories({{ReportCategories_get_id}})"
											]
										}
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ReportCategoryAcls",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "Post ReportCategoryAcls",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2daeed57-d3b1-42aa-b52f-b2f84a86bff0",
												"exec": [
													"var Name = \"Report_Category_Name_\"+Date.now();",
													"pm.globals.set(\"ReportCategoriesAcl_Categories_post_name\", Name);",
													"",
													"pm.globals.set(\"ReportCategoriesAcl_Post_EntityId\", 100);",
													"pm.globals.set(\"ReportCategoriesAcl_Post_EntityType\", 100);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9efe3bbf-b830-4735-8eb0-514387cb9916",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('CategoryId');",
													"    pm.expect(jsonData).to.have.property('IsView');",
													"    pm.expect(jsonData).to.have.property('IsCreate');",
													"    pm.expect(jsonData).to.have.property('IsModify');",
													"    pm.expect(jsonData).to.have.property('IsDelete');",
													"    pm.expect(jsonData).to.have.property('IsSchedule');",
													"    pm.expect(jsonData).to.have.property('EntityType');",
													"    pm.expect(jsonData).to.have.property('EntityId');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var categoryId = jsonData.CategoryId;",
													"    pm.globals.set(\"ReportCategoriesAcl_category_get_id\", categoryId);",
													"    ",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"ReportCategoriesAcl_get_id\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"IsView\": false,\n  \"IsCreate\": true,\n  \"IsModify\": true,\n  \"IsDelete\": true,\n  \"IsSchedule\": true,\n  \"ReportCategory\": {\n\t\"Name\": \"{{ReportCategoriesAcl_Categories_post_name}}\",\n\t\"Description\": \"Create new report category\",\n\t\"Status\": 1,\n\t\"Sequence\": 1,\n\t\"GroupId\": 1,\n\t\"ReportView\": 0\n  },\n  \"EntityType\": {{ReportCategoriesAcl_Post_EntityType}},\n  \"EntityId\": {{ReportCategoriesAcl_Post_EntityId}}\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportCategoryAcls",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportCategoryAcls"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ReportCategoryAcls with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92ba0aaa-f26d-482d-89a0-d428ab36f427",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('CategoryId');",
													"    pm.expect(jsonData).to.have.property('IsView');",
													"    pm.expect(jsonData).to.have.property('IsCreate');",
													"    pm.expect(jsonData).to.have.property('IsModify');",
													"    pm.expect(jsonData).to.have.property('IsDelete');",
													"    pm.expect(jsonData).to.have.property('IsSchedule');",
													"    pm.expect(jsonData).to.have.property('EntityType');",
													"    pm.expect(jsonData).to.have.property('EntityId');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ReportCategoryAcls(CategoryId={{ReportCategoriesAcl_category_get_id}},EntityType={{ReportCategoriesAcl_Post_EntityType}},EntityId={{ReportCategoriesAcl_Post_EntityId}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportCategoryAcls(CategoryId={{ReportCategoriesAcl_category_get_id}},EntityType={{ReportCategoriesAcl_Post_EntityType}},EntityId={{ReportCategoriesAcl_Post_EntityId}})"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Patch ReportCategoryAcls",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3a9bdf8-ccf2-496a-a6f4-11797ef8471d",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"IsDelete\" : false\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportCategoryAcls(CategoryId={{ReportCategoriesAcl_category_get_id}},EntityType={{ReportCategoriesAcl_Post_EntityType}},EntityId={{ReportCategoriesAcl_Post_EntityId}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportCategoryAcls(CategoryId={{ReportCategoriesAcl_category_get_id}},EntityType={{ReportCategoriesAcl_Post_EntityType}},EntityId={{ReportCategoriesAcl_Post_EntityId}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put ReportCategoryAcls",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9e8ac3bf-ad78-49be-bd24-1674cf399d4a",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"IsView\": true,\n  \"IsCreate\": true,\n  \"IsModify\": false,\n  \"IsDelete\": true,\n  \"IsSchedule\": true,\n  \"CategoryId\": {{ReportCategoriesAcl_category_get_id}},\n  \"EntityType\": {{ReportCategoriesAcl_Post_EntityType}},\n  \"EntityId\": {{ReportCategoriesAcl_Post_EntityId}},\n  \"Id\": {{ReportCategoriesAcl_get_id}}\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportCategoryAcls(CategoryId={{ReportCategoriesAcl_category_get_id}},EntityType={{ReportCategoriesAcl_Post_EntityType}},EntityId={{ReportCategoriesAcl_Post_EntityId}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportCategoryAcls(CategoryId={{ReportCategoriesAcl_category_get_id}},EntityType={{ReportCategoriesAcl_Post_EntityType}},EntityId={{ReportCategoriesAcl_Post_EntityId}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All ReportCategoryAcls",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5469153-ee9b-4ad8-b1d0-249a40cac98f",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Verify Response status code and Response body.\", function () {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('CategoryId');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsView');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsCreate');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsModify');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsDelete');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsSchedule');",
													"    pm.expect(jsonData.value[0]).to.have.property('EntityType');",
													"    pm.expect(jsonData.value[0]).to.have.property('EntityId');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ReportCategoryAcls",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportCategoryAcls"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Delete ReportCategoryAcls",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2baede16-4431-4428-9a4a-9568ff487785",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportCategoryAcls(CategoryId={{ReportCategoriesAcl_category_get_id}},EntityType={{ReportCategoriesAcl_Post_EntityType}},EntityId={{ReportCategoriesAcl_Post_EntityId}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportCategoryAcls(CategoryId={{ReportCategoriesAcl_category_get_id}},EntityType={{ReportCategoriesAcl_Post_EntityType}},EntityId={{ReportCategoriesAcl_Post_EntityId}})"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ReportCategoryDataSources",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "Post ReportCategoryDataSources",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5c8d7046-57bc-43bd-a1a6-6687f89ccfc9",
												"exec": [
													"var reportDataSource = \"Report_DataSource_\"+Date.now();",
													"pm.globals.set(\"ReportCategoryDataSource_post_dataSourceName\", reportDataSource);",
													"    ",
													"var reportCategory = \"Report_Category_\"+Date.now();",
													"pm.globals.set(\"ReportCategoryDataSource_post_categoryName\", reportCategory);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f94d4546-2ea4-4fae-a78d-88cdadbf6351",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('CategoryId');",
													"    pm.expect(jsonData).to.have.property('DataSourceId');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"ReportCategoryDataSource_get_id\", id);",
													"    ",
													"    var categoryId = jsonData.CategoryId;",
													"    pm.globals.set(\"ReportCategoryDataSource_get_categoryId\", categoryId);",
													"",
													"    var dataSourceId = jsonData.DataSourceId;",
													"    pm.globals.set(\"ReportCategoryDataSource_get_dataSourceId\", dataSourceId);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"ReportCategory\": {\n\t\"Name\": \"{{ReportCategoryDataSource_post_categoryName}}\",\n\t\"Description\": \"Create new report category\",\n\t\"Status\": 1,\n\t\"Sequence\": 1,\n\t\"GroupId\": 1,\n\t\"ReportView\": 0\n  },\n  \"ReportDataSource\": {\n\t\"DataSource\": \"{{ReportCategoryDataSource_post_dataSourceName}}\",\n\t\"Description\": \"Create new data source\"\n  }\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportCategoryDataSources",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportCategoryDataSources"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ReportCategoryDataSources with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ee49e6d-f7f0-4e43-bc10-9909e11eb52a",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('CategoryId');",
													"    pm.expect(jsonData).to.have.property('DataSourceId');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ReportCategoryDataSources(CategoryId={{ReportCategoryDataSource_get_categoryId}},DataSourceId={{ReportCategoryDataSource_get_dataSourceId}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportCategoryDataSources(CategoryId={{ReportCategoryDataSource_get_categoryId}},DataSourceId={{ReportCategoryDataSource_get_dataSourceId}})"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Get All ReportCategoryDataSources",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd6caabe-32c5-4f24-afeb-67d3d8bbb867",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Verify Response status code and Response body.\", function () {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('CategoryId');",
													"    pm.expect(jsonData.value[0]).to.have.property('DataSourceId');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ReportCategoryDataSources",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportCategoryDataSources"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Delete ReportCategoryDataSources",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eac6dc2b-02c3-4d05-aaef-ec9eebc28c7a",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportCategoryDataSources(CategoryId={{ReportCategoryDataSource_get_categoryId}},DataSourceId={{ReportCategoryDataSource_get_dataSourceId}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportCategoryDataSources(CategoryId={{ReportCategoryDataSource_get_categoryId}},DataSourceId={{ReportCategoryDataSource_get_dataSourceId}})"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ReportDataSources",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "Create new ReportDataSource",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "92a3ad51-e8ee-4af7-a4c1-d6b39dea5c4a",
												"exec": [
													"var Name = \"Report_DataSource_\"+Date.now();",
													"pm.globals.set(\"ReportDataSource_post_name\", Name);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5ab5e1c3-ddbc-4e3e-8c99-0c9f8928ba24",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('DataSource');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.DataSource).to.eql(pm.variables.get('ReportDataSource_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"ReportDataSource_get_id\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"DataSource\": \"{{ReportDataSource_post_name}}\",\n  \"Description\": \"Create new data source\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportDataSources",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportDataSources"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ReportDataSource with Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c939d8c6-47a2-4219-be68-231fa4a923d3",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('DataSource');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.DataSource).to.eql(pm.variables.get('ReportDataSource_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ReportDataSources({{ReportDataSource_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportDataSources({{ReportDataSource_get_id}})"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Patch ReportDataSource",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f9e8959-5e67-45e2-9916-0c0231eb81c0",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Description\" : \"Postman Patch - ReportDataSource\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportDataSources({{ReportDataSource_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportDataSources({{ReportDataSource_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put ReportDataSource",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8c48f70-c184-4bdf-abc3-17d91c08b85a",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Id\":{{ReportDataSource_get_id}},\n\t\"DataSource\": \"{{ReportDataSource_post_name}}\",\n\t\"Description\": \"Postman put - ReportDataSource\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportDataSources({{ReportDataSource_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportDataSources({{ReportDataSource_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All ReportDataSources",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c952b823-30e9-4787-9b65-c7019399f003",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Verify Response status code and Response body.\", function () {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('DataSource');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ReportDataSources",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportDataSources"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Delete ReportDataSource",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "51f7f09c-d9de-4fee-bed3-31b48a07d5a4",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportDataSources({{ReportDataSource_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportDataSources({{ReportDataSource_get_id}})"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ReportEngines",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Post ReportEngines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "51e30b3a-2f77-4b68-b1b4-9736c03447b1",
												"exec": [
													"var Name = \"Report_Engine_Name\"+Date.now();",
													"pm.globals.set(\"ReportEngines_post_name\", Name);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2145f863-4c72-4328-b3e0-9e3c11b565c3",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('IsOnline');",
													"    pm.expect(jsonData).to.have.property('IsDisabled');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('PhysicalServer');",
													"    pm.expect(jsonData).to.have.property('ThreadPool');",
													"    pm.expect(jsonData).to.have.property('CycleTime');",
													"    pm.expect(jsonData).to.have.property('ExpirationCycle');",
													"    pm.expect(jsonData).to.have.property('LastActivityDate');",
													"    pm.expect(jsonData).to.have.property('ServiceName');",
													"    pm.expect(jsonData).to.have.property('WorkerCycles');",
													"    pm.expect(jsonData).to.have.property('CurrentWorkerCycle');",
													"    pm.expect(jsonData).to.have.property('WorkerProcessId');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('ReportEngines_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"ReportEngines_get_id\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"IsOnline\": false,\n  \"IsDisabled\": true,\n  \"Name\": \"{{ReportEngines_post_name}}\",\n  \"Description\": \"Create new report engine\",\n  \"PhysicalServer\": \"savphlpetest64\",\n  \"ThreadPool\": 1,\n  \"CycleTime\": 5,\n  \"ExpirationCycle\": 10,\n  \"LastActivityDate\": \"2016-08-30T00:00:30.533-04:00\",\n  \"ServiceName\": \"Savana RPT Engine IPM_EPM50MASTER_502_QA\",\n  \"WorkerCycles\": 100,\n  \"CurrentWorkerCycle\": 3,\n  \"WorkerProcessId\": 1\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportEngines",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportEngines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ReportEngines with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b7a6ff6a-5f1f-48b7-96c4-ced44d96cc40",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('IsOnline');",
													"    pm.expect(jsonData).to.have.property('IsDisabled');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('PhysicalServer');",
													"    pm.expect(jsonData).to.have.property('ThreadPool');",
													"    pm.expect(jsonData).to.have.property('CycleTime');",
													"    pm.expect(jsonData).to.have.property('ExpirationCycle');",
													"    pm.expect(jsonData).to.have.property('LastActivityDate');",
													"    pm.expect(jsonData).to.have.property('ServiceName');",
													"    pm.expect(jsonData).to.have.property('WorkerCycles');",
													"    pm.expect(jsonData).to.have.property('CurrentWorkerCycle');",
													"    pm.expect(jsonData).to.have.property('WorkerProcessId');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('ReportEngines_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ReportEngines({{ReportEngines_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportEngines({{ReportEngines_get_id}})"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Patch ReportEngines",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "97fa0d0d-4eeb-4498-9972-320c0acc638f",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Description\" : \"Postman Patch - Report Engine\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportEngines({{ReportEngines_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportEngines({{ReportEngines_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put ReportEngines",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23be6ac9-cd74-47d2-bb1b-d23593b2dea6",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Id\":{{ReportEngines_get_id}},\n  \"IsOnline\": false,\n  \"IsDisabled\": true,\n  \"Name\": \"{{ReportEngines_post_name}}\",\n  \"Description\": \"Postmant put - Report Engine\",\n  \"PhysicalServer\": \"savphlpetest64\",\n  \"ThreadPool\": 1,\n  \"CycleTime\": 5,\n  \"ExpirationCycle\": 10,\n  \"LastActivityDate\": \"2016-08-30T00:00:30.533-04:00\",\n  \"ServiceName\": \"Savana RPT Engine IPM_EPM50MASTER_502_QA\",\n  \"WorkerCycles\": 100,\n  \"CurrentWorkerCycle\": 3,\n  \"WorkerProcessId\": 1\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportEngines({{ReportEngines_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportEngines({{ReportEngines_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All ReportEngines",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95e5113b-fb60-49b4-bc1b-be70bb370692",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Verify Response status code and Response body.\", function () {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsDisabled');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('PhysicalServer');",
													"    pm.expect(jsonData.value[0]).to.have.property('ThreadPool');",
													"    pm.expect(jsonData.value[0]).to.have.property('CycleTime');",
													"    pm.expect(jsonData.value[0]).to.have.property('ExpirationCycle');",
													"    pm.expect(jsonData.value[0]).to.have.property('LastActivityDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ServiceName');",
													"    pm.expect(jsonData.value[0]).to.have.property('WorkerCycles');",
													"    pm.expect(jsonData.value[0]).to.have.property('CurrentWorkerCycle');",
													"    pm.expect(jsonData.value[0]).to.have.property('WorkerProcessId');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ReportEngines",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportEngines"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Delete ReportEngines",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f529525d-f51c-41d2-82a0-8586f70f7cf1",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportEngines({{ReportEngines_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportEngines({{ReportEngines_get_id}})"
											]
										}
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ReportGroups",
					"item": [
						{
							"name": "Testing-Happy Path",
							"item": [
								{
									"name": "Post ReportGroups",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d55875c9-1c1f-48ea-a059-d2f3789f1787",
												"exec": [
													"var reportGroupName = \"ReportGroup_Name\"+Date.now()\r",
													"pm.globals.set(\"ReportGroups_post_name\", reportGroupName);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "009a93ea-f242-43ec-b159-9fee18254629",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('ReportGroups_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"ReportGroups_get_id\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"Name\": \"{{ReportGroups_post_name}}\",\n   \"Description\": \"Create new report group.\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportGroups",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportGroups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ReportGroups with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "111b654c-95ad-4559-8e03-ca2fcccc644e",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('ReportGroups_post_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('ReportGroups_get_id'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ReportGroups({{ReportGroups_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportGroups({{ReportGroups_get_id}})"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Patch ReportGroups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3578a223-b286-4438-a5d9-18d72af470ed",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Description\" : \"Postman Test Patch Update\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportGroups({{ReportGroups_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportGroups({{ReportGroups_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put ReportGroups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4353eb50-218a-4898-bf8e-e037f883ae38",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Id\": {{ReportGroups_get_id}},\n  \"Name\": \"{{ReportGroups_post_name}}\",\n  \"Description\": \"Postman Test Put Update\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportGroups({{ReportGroups_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportGroups({{ReportGroups_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All ReportGroups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "456eaf12-4f16-48f8-871b-2d736c5abec8",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify Response status code and Response body.\", function () {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('value');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify response body contains collection of categories\r",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ReportGroups",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportGroups"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Delete ReportGroups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f0bb7c64-8e15-4114-b5eb-6beeb5f89ee9",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportGroups({{ReportGroups_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportGroups({{ReportGroups_get_id}})"
											]
										}
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ReportGroupsAcls",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "POST ReportGroupAcl",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e0417df8-a5a6-465a-b03c-3b9770bca297",
												"exec": [
													"var reportGroupName = \"ReportGroupAcl_GroupName\"+Date.now();\r",
													"pm.globals.set(\"ReportGroupsAcl_post_groupName\", reportGroupName);\r",
													"pm.globals.set(\"ReportGroupsAcl_post_entityType\", \"1\");\r",
													"pm.globals.set(\"ReportGroupsAcl_post_entityId\", \"1\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3edb79eb-0e64-435e-a126-8ba0d8e83a90",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(201);\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('Id');\r",
													"    pm.expect(jsonData).to.have.property('GroupId');\r",
													"    pm.expect(jsonData).to.have.property('IsView');\r",
													"    pm.expect(jsonData).to.have.property('IsCreate');\r",
													"    pm.expect(jsonData).to.have.property('IsModify');\r",
													"    pm.expect(jsonData).to.have.property('IsDelete');\r",
													"    pm.expect(jsonData).to.have.property('EntityType');\r",
													"    pm.expect(jsonData).to.have.property('EntityId');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"    pm.expect(jsonData.EntityType.toString()).to.eql(pm.variables.get('ReportGroupsAcl_post_entityType'));\r",
													"    pm.expect(jsonData.EntityId.toString()).to.eql(pm.variables.get('ReportGroupsAcl_post_entityId'));\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"    \r",
													"    setData();\r",
													"});\r",
													"\r",
													"function setData() {\r",
													"    var id = jsonData.Id;\r",
													"    pm.globals.set(\"ReportGroupsAcl_get_id\", id);\r",
													"    \r",
													"    var groupId = jsonData.GroupId;\r",
													"    pm.globals.set(\"ReportGroupsAcl_get_groupid\", groupId);\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											},
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ReportGroup\": {\r\n\t\"Name\": \"{{ReportGroupsAcl_post_groupName}}\",\r\n\t\"Description\": \"Create new report group.\"\r\n  },\r\n  \"EntityType\": {{ReportGroupsAcl_post_entityType}},\r\n  \"EntityId\": {{ReportGroupsAcl_post_entityId}},\r\n  \"IsView\": true,\r\n  \"IsCreate\": true,\r\n  \"IsModify\": true,\r\n  \"IsDelete\": true\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportGroupAcls",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportGroupAcls"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ReportGroupAcl with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ed18a25-0509-4f65-9060-7744e7b9e23f",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('Id');\r",
													"    pm.expect(jsonData).to.have.property('GroupId');\r",
													"    pm.expect(jsonData).to.have.property('IsView');\r",
													"    pm.expect(jsonData).to.have.property('IsCreate');\r",
													"    pm.expect(jsonData).to.have.property('IsModify');\r",
													"    pm.expect(jsonData).to.have.property('IsDelete');\r",
													"    pm.expect(jsonData).to.have.property('EntityType');\r",
													"    pm.expect(jsonData).to.have.property('EntityId');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('ReportGroupsAcl_get_id'));\r",
													"    pm.expect(jsonData.GroupId).to.eql(pm.variables.get('ReportGroupsAcl_get_groupid'));\r",
													"    pm.expect(jsonData.EntityType.toString()).to.eql(pm.variables.get('ReportGroupsAcl_post_entityType'));\r",
													"    pm.expect(jsonData.EntityId.toString()).to.eql(pm.variables.get('ReportGroupsAcl_post_entityId'));\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											},
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ReportGroupAcls(GroupId={{ReportGroupsAcl_get_groupid}},EntityType={{ReportGroupsAcl_post_entityType}},EntityId={{ReportGroupsAcl_post_entityId}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportGroupAcls(GroupId={{ReportGroupsAcl_get_groupid}},EntityType={{ReportGroupsAcl_post_entityType}},EntityId={{ReportGroupsAcl_post_entityId}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All ReportGroupAcl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3b8615d-42b6-4c87-9b1a-ed08d50b3170",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify Response status code and Response body.\", function () {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('value');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('GroupId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('IsView');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('IsCreate');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('IsModify');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('IsDelete');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('EntityType');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('EntityId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify response body contains collection of categories\r",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ReportGroupAcls",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportGroupAcls"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete ReportGroupAcl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cf944746-f802-4da8-852d-fb4e6c7ab747",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											},
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportGroupAcls(GroupId={{ReportGroupsAcl_get_groupid}},EntityType={{ReportGroupsAcl_post_entityType}},EntityId={{ReportGroupsAcl_post_entityId}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportGroupAcls(GroupId={{ReportGroupsAcl_get_groupid}},EntityType={{ReportGroupsAcl_post_entityType}},EntityId={{ReportGroupsAcl_post_entityId}})"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Reports",
					"item": [
						{
							"name": "Testing-Happy Path",
							"item": [
								{
									"name": "Post Reports",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "215a28b0-67f1-43dd-9df7-1c48a71bc165",
												"exec": [
													"var reportName = \"Report_Name\"+Date.now();\r",
													"pm.globals.set(\"ReportName_post_name\", reportName);\r",
													"    \r",
													"var reportCategoryName = \"Report_Category_Name_\"+Date.now();\r",
													"pm.globals.set(\"Report_post_ReportCategoryName\", reportCategoryName);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3d72c25e-eed2-43e4-8724-9022d6688efb",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(201);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('Report');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('ReportName_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"    ",
													"    setData();",
													"});",
													"",
													"function setData() {",
													"    ",
													"    var Id = jsonData.Id;",
													"    pm.globals.set(\"Report_get_id\", Id);",
													"    ",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"Reports_get_reportCategoryId\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"IsDisabled\": false,\n\t\"Name\": \"{{ReportName_post_name}}\",\n\t\"Description\": \"Postman Testing\",\n\t\"Report\": \"<ReportSet Title=\\\"User Listing\\\" Description=\\\"User Listing Details\\\" Header=\\\"\\\" ReadOnly=\\\"False\\\" LandscapePrinting=\\\"False\\\" FieldValueColumnPairs=\\\"2\\\" ItemsPerPage=\\\"10000\\\" AddBookmarkForVisualGroup=\\\"False\\\" Footer=\\\"\\\" ShowVisualGroupLabels=\\\"False\\\" Schedule=\\\"1/1/0001 12:00:00 AM\\\" Recipients=\\\"\\\" RepeatType=\\\"None\\\" SendEmailAs=\\\"\\\" UserName=\\\"DefaultAdministrator\\\" Public=\\\"True\\\" Designer=\\\"AdHocReportDesigner\\\">\\r\\n\\t<JoinedTables>\\r\\n\\t\\t<JoinedTable Name=\\\"[eidmadm].[V_ADM_USERS_DETAILS]\\\" Alias=\\\"\\\" RightAlias=\\\"\\\" JoinType=\\\"INNER\\\" LeftConditionColumn=\\\"\\\" RightConditionTable=\\\"\\\" RightConditionColumn=\\\"\\\" />\\r\\n\\t</JoinedTables>\\r\\n\\t<Criterias>\\r\\n\\t\\t<Criteria Column=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[User Name]\\\" Not=\\\"False\\\" FieldFilter=\\\"False\\\" Operator=\\\"Equals\\\" OrIsBlank=\\\"False\\\" Description=\\\"\\\" AliasTable=\\\"\\\" Parameter=\\\"True\\\" Value=\\\"\\\" />\\r\\n\\t\\t<Criteria Column=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Account Disabled]\\\" Not=\\\"False\\\" FieldFilter=\\\"False\\\" Operator=\\\"Equals_Select\\\" OrIsBlank=\\\"False\\\" Description=\\\"\\\" AliasTable=\\\"\\\" Parameter=\\\"True\\\" Value=\\\"...\\\" />\\r\\n\\t</Criterias>\\r\\n\\t<Report Title=\\\"\\\" Code=\\\"\\\" Name=\\\"Detail\\\">\\r\\n\\t\\t<Options Top=\\\"-2147483648\\\" Distinct=\\\"True\\\" StoreResults=\\\"False\\\" SelectVisibleColumns=\\\"True\\\" ChartTypeName=\\\"\\\" AddGrandTotals=\\\"False\\\" TotalsFunction=\\\"None\\\" Invert=\\\"False\\\" FieldValue=\\\"False\\\" AddDeltas=\\\"False\\\" LinesPerItem=\\\"1\\\" ColumnsLimit=\\\"-1\\\" ReportType=\\\"Detail\\\" />\\r\\n\\t\\t<Position X=\\\"0\\\" Y=\\\"3\\\" ColSpan=\\\"1\\\" RowSpan=\\\"1\\\" />\\r\\n\\t\\t<Selections>\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[User ID]\\\" ColumnSql=\\\"\\\" Description=\\\"User ID\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[User Name]\\\" ColumnSql=\\\"\\\" Description=\\\"User Name\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"ASC\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[User Full Name]\\\" ColumnSql=\\\"\\\" Description=\\\"User Full Name\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Email Address]\\\" ColumnSql=\\\"\\\" Description=\\\"Email Address\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Domain]\\\" ColumnSql=\\\"\\\" Description=\\\"Domain\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Organization]\\\" ColumnSql=\\\"\\\" Description=\\\"Organization\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Category]\\\" ColumnSql=\\\"\\\" Description=\\\"Category\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Start Date]\\\" ColumnSql=\\\"\\\" Description=\\\"Start Date\\\" Definition=\\\"\\\" FormatString=\\\"{0:d}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Term Date]\\\" ColumnSql=\\\"\\\" Description=\\\"Term Date\\\" Definition=\\\"\\\" FormatString=\\\"{0:d}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[User ACL]\\\" ColumnSql=\\\"\\\" Description=\\\"User ACL\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[PNE]\\\" ColumnSql=\\\"\\\" Description=\\\"Password Never Expires\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Account Disabled]\\\" ColumnSql=\\\"\\\" Description=\\\"Account Disabled\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Enable System Administration]\\\" ColumnSql=\\\"\\\" Description=\\\"Enable System Administration\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[External User]\\\" ColumnSql=\\\"\\\" Description=\\\"External User\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Created By]\\\" ColumnSql=\\\"\\\" Description=\\\"Created By\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Created Date]\\\" ColumnSql=\\\"\\\" Description=\\\"Created Date\\\" Definition=\\\"\\\" FormatString=\\\"{0:d}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Last Modified By]\\\" ColumnSql=\\\"\\\" Description=\\\"Last Modified By\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Last Modified Date]\\\" ColumnSql=\\\"\\\" Description=\\\"Last Modified Date\\\" Definition=\\\"\\\" FormatString=\\\"{0:d}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t</Selections>\\r\\n\\t</Report>\\r\\n\\t<Report Title=\\\"\\\" Code=\\\"\\\" Name=\\\"Summary\\\">\\r\\n\\t\\t<Options Top=\\\"-2147483648\\\" Distinct=\\\"True\\\" StoreResults=\\\"False\\\" SelectVisibleColumns=\\\"True\\\" ChartTypeName=\\\"\\\" AddGrandTotals=\\\"False\\\" TotalsFunction=\\\"None\\\" Invert=\\\"False\\\" FieldValue=\\\"False\\\" AddDeltas=\\\"False\\\" LinesPerItem=\\\"1\\\" ColumnsLimit=\\\"-1\\\" ReportType=\\\"Summary\\\" />\\r\\n\\t\\t<Position X=\\\"0\\\" Y=\\\"2\\\" ColSpan=\\\"1\\\" RowSpan=\\\"1\\\" />\\r\\n\\t\\t<Selections />\\r\\n\\t</Report>\\r\\n\\t<Report Title=\\\"\\\" Code=\\\"\\\" Name=\\\"Chart\\\">\\r\\n\\t\\t<Options Top=\\\"-2147483648\\\" Distinct=\\\"True\\\" StoreResults=\\\"False\\\" SelectVisibleColumns=\\\"True\\\" ChartTypeName=\\\"\\\" AddGrandTotals=\\\"False\\\" TotalsFunction=\\\"None\\\" Invert=\\\"False\\\" FieldValue=\\\"False\\\" AddDeltas=\\\"False\\\" LinesPerItem=\\\"1\\\" ColumnsLimit=\\\"-1\\\" ReportType=\\\"Chart\\\" />\\r\\n\\t\\t<Position X=\\\"0\\\" Y=\\\"0\\\" ColSpan=\\\"1\\\" RowSpan=\\\"1\\\" />\\r\\n\\t\\t<Selections />\\r\\n\\t</Report>\\r\\n\\t<Report Title=\\\"\\\" Code=\\\"\\\" Name=\\\"Gauges\\\" BorderColor=\\\"-1\\\" HeaderColor=\\\"16777215\\\" ItemColor=\\\"16777215\\\" AlternatingItemColor=\\\"16777215\\\" HeaderForegroundColor=\\\"-16777216\\\" ItemForegroundColor=\\\"-16777216\\\">\\r\\n\\t\\t<Options Top=\\\"4\\\" Distinct=\\\"True\\\" StoreResults=\\\"False\\\" SelectVisibleColumns=\\\"True\\\" ChartTypeName=\\\"\\\" AddGrandTotals=\\\"False\\\" TotalsFunction=\\\"None\\\" Invert=\\\"True\\\" FieldValue=\\\"False\\\" AddDeltas=\\\"False\\\" LinesPerItem=\\\"1\\\" ColumnsLimit=\\\"4\\\" ReportType=\\\"Gauge\\\" />\\r\\n\\t\\t<Position X=\\\"0\\\" Y=\\\"1\\\" ColSpan=\\\"1\\\" RowSpan=\\\"1\\\" />\\r\\n\\t\\t<Selections />\\r\\n\\t</Report>\\r\\n</ReportSet>\",\n  \"ReportCategory\": {\n\t\"Name\": \"{{Report_post_ReportCategoryName}}\",\n\t\"Description\": \"Create new report category\",\n\t\"Status\": 1,\n\t\"Sequence\": 1,\n\t\"GroupId\": 1,\n\t\"ReportView\": 0\n  },\n\n  \"Sequence\": 1,\n  \"Type\": 0,\n  \"ReportOwner\": 0,\n  \"Xml\": null,\n  \"ReportModifiedDate\": null,\n  \"TenantId\": null,\n  \"IzendaadhocReportsId\": null,\n  \"Form\": null,\n  \"ReportSourceId\": null,\n  \"Thumbnail\": null\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Reports",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Reports"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Reports with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "631399bf-af25-49b4-97e0-f324872c5106",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Verify Response status code and Response body.', function() {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData).to.have.property('Description');",
													"    pm.expect(jsonData).to.have.property('Report');",
													"    pm.expect(jsonData).to.have.property('CreatedById');",
													"    pm.expect(jsonData).to.have.property('CreatedDate');",
													"    pm.expect(jsonData).to.have.property('ModifiedById');",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify correct values are present in response body.",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('ReportName_post_name'));",
													"    pm.expect(jsonData.CreatedById).not.eql(null);",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/Reports({{Report_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Reports({{Report_get_id}})"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Patch Reports",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dc6f19c5-7a47-4d1d-928f-fecc29260bc7",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Description\" : \"Postman Test Patch Update\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Reports({{Report_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Reports({{Report_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Reports",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "434ce17a-ec80-45ba-be54-070ccc70a36e",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dbceabe5-9470-4406-818f-cbe761f0bc88",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"IsDisabled\": false,\n  \"Name\": \"{{ReportName_post_name}}\",\n  \"Description\": \"Postman put - Reports\",\n  \"Report\": \"<ReportSet Title=\\\"User Listing\\\" Description=\\\"User Listing Details\\\" Header=\\\"\\\" ReadOnly=\\\"False\\\" LandscapePrinting=\\\"False\\\" FieldValueColumnPairs=\\\"2\\\" ItemsPerPage=\\\"10000\\\" AddBookmarkForVisualGroup=\\\"False\\\" Footer=\\\"\\\" ShowVisualGroupLabels=\\\"False\\\" Schedule=\\\"1/1/0001 12:00:00 AM\\\" Recipients=\\\"\\\" RepeatType=\\\"None\\\" SendEmailAs=\\\"\\\" UserName=\\\"DefaultAdministrator\\\" Public=\\\"True\\\" Designer=\\\"AdHocReportDesigner\\\">\\r\\n\\t<JoinedTables>\\r\\n\\t\\t<JoinedTable Name=\\\"[eidmadm].[V_ADM_USERS_DETAILS]\\\" Alias=\\\"\\\" RightAlias=\\\"\\\" JoinType=\\\"INNER\\\" LeftConditionColumn=\\\"\\\" RightConditionTable=\\\"\\\" RightConditionColumn=\\\"\\\" />\\r\\n\\t</JoinedTables>\\r\\n\\t<Criterias>\\r\\n\\t\\t<Criteria Column=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[User Name]\\\" Not=\\\"False\\\" FieldFilter=\\\"False\\\" Operator=\\\"Equals\\\" OrIsBlank=\\\"False\\\" Description=\\\"\\\" AliasTable=\\\"\\\" Parameter=\\\"True\\\" Value=\\\"\\\" />\\r\\n\\t\\t<Criteria Column=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Account Disabled]\\\" Not=\\\"False\\\" FieldFilter=\\\"False\\\" Operator=\\\"Equals_Select\\\" OrIsBlank=\\\"False\\\" Description=\\\"\\\" AliasTable=\\\"\\\" Parameter=\\\"True\\\" Value=\\\"...\\\" />\\r\\n\\t</Criterias>\\r\\n\\t<Report Title=\\\"\\\" Code=\\\"\\\" Name=\\\"Detail\\\">\\r\\n\\t\\t<Options Top=\\\"-2147483648\\\" Distinct=\\\"True\\\" StoreResults=\\\"False\\\" SelectVisibleColumns=\\\"True\\\" ChartTypeName=\\\"\\\" AddGrandTotals=\\\"False\\\" TotalsFunction=\\\"None\\\" Invert=\\\"False\\\" FieldValue=\\\"False\\\" AddDeltas=\\\"False\\\" LinesPerItem=\\\"1\\\" ColumnsLimit=\\\"-1\\\" ReportType=\\\"Detail\\\" />\\r\\n\\t\\t<Position X=\\\"0\\\" Y=\\\"3\\\" ColSpan=\\\"1\\\" RowSpan=\\\"1\\\" />\\r\\n\\t\\t<Selections>\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[User ID]\\\" ColumnSql=\\\"\\\" Description=\\\"User ID\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[User Name]\\\" ColumnSql=\\\"\\\" Description=\\\"User Name\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"ASC\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[User Full Name]\\\" ColumnSql=\\\"\\\" Description=\\\"User Full Name\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Email Address]\\\" ColumnSql=\\\"\\\" Description=\\\"Email Address\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Domain]\\\" ColumnSql=\\\"\\\" Description=\\\"Domain\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Organization]\\\" ColumnSql=\\\"\\\" Description=\\\"Organization\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Category]\\\" ColumnSql=\\\"\\\" Description=\\\"Category\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Start Date]\\\" ColumnSql=\\\"\\\" Description=\\\"Start Date\\\" Definition=\\\"\\\" FormatString=\\\"{0:d}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Term Date]\\\" ColumnSql=\\\"\\\" Description=\\\"Term Date\\\" Definition=\\\"\\\" FormatString=\\\"{0:d}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[User ACL]\\\" ColumnSql=\\\"\\\" Description=\\\"User ACL\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[PNE]\\\" ColumnSql=\\\"\\\" Description=\\\"Password Never Expires\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Account Disabled]\\\" ColumnSql=\\\"\\\" Description=\\\"Account Disabled\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Enable System Administration]\\\" ColumnSql=\\\"\\\" Description=\\\"Enable System Administration\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[External User]\\\" ColumnSql=\\\"\\\" Description=\\\"External User\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Created By]\\\" ColumnSql=\\\"\\\" Description=\\\"Created By\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Created Date]\\\" ColumnSql=\\\"\\\" Description=\\\"Created Date\\\" Definition=\\\"\\\" FormatString=\\\"{0:d}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Last Modified By]\\\" ColumnSql=\\\"\\\" Description=\\\"Last Modified By\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Last Modified Date]\\\" ColumnSql=\\\"\\\" Description=\\\"Last Modified Date\\\" Definition=\\\"\\\" FormatString=\\\"{0:d}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t</Selections>\\r\\n\\t</Report>\\r\\n\\t<Report Title=\\\"\\\" Code=\\\"\\\" Name=\\\"Summary\\\">\\r\\n\\t\\t<Options Top=\\\"-2147483648\\\" Distinct=\\\"True\\\" StoreResults=\\\"False\\\" SelectVisibleColumns=\\\"True\\\" ChartTypeName=\\\"\\\" AddGrandTotals=\\\"False\\\" TotalsFunction=\\\"None\\\" Invert=\\\"False\\\" FieldValue=\\\"False\\\" AddDeltas=\\\"False\\\" LinesPerItem=\\\"1\\\" ColumnsLimit=\\\"-1\\\" ReportType=\\\"Summary\\\" />\\r\\n\\t\\t<Position X=\\\"0\\\" Y=\\\"2\\\" ColSpan=\\\"1\\\" RowSpan=\\\"1\\\" />\\r\\n\\t\\t<Selections />\\r\\n\\t</Report>\\r\\n\\t<Report Title=\\\"\\\" Code=\\\"\\\" Name=\\\"Chart\\\">\\r\\n\\t\\t<Options Top=\\\"-2147483648\\\" Distinct=\\\"True\\\" StoreResults=\\\"False\\\" SelectVisibleColumns=\\\"True\\\" ChartTypeName=\\\"\\\" AddGrandTotals=\\\"False\\\" TotalsFunction=\\\"None\\\" Invert=\\\"False\\\" FieldValue=\\\"False\\\" AddDeltas=\\\"False\\\" LinesPerItem=\\\"1\\\" ColumnsLimit=\\\"-1\\\" ReportType=\\\"Chart\\\" />\\r\\n\\t\\t<Position X=\\\"0\\\" Y=\\\"0\\\" ColSpan=\\\"1\\\" RowSpan=\\\"1\\\" />\\r\\n\\t\\t<Selections />\\r\\n\\t</Report>\\r\\n\\t<Report Title=\\\"\\\" Code=\\\"\\\" Name=\\\"Gauges\\\" BorderColor=\\\"-1\\\" HeaderColor=\\\"16777215\\\" ItemColor=\\\"16777215\\\" AlternatingItemColor=\\\"16777215\\\" HeaderForegroundColor=\\\"-16777216\\\" ItemForegroundColor=\\\"-16777216\\\">\\r\\n\\t\\t<Options Top=\\\"4\\\" Distinct=\\\"True\\\" StoreResults=\\\"False\\\" SelectVisibleColumns=\\\"True\\\" ChartTypeName=\\\"\\\" AddGrandTotals=\\\"False\\\" TotalsFunction=\\\"None\\\" Invert=\\\"True\\\" FieldValue=\\\"False\\\" AddDeltas=\\\"False\\\" LinesPerItem=\\\"1\\\" ColumnsLimit=\\\"4\\\" ReportType=\\\"Gauge\\\" />\\r\\n\\t\\t<Position X=\\\"0\\\" Y=\\\"1\\\" ColSpan=\\\"1\\\" RowSpan=\\\"1\\\" />\\r\\n\\t\\t<Selections />\\r\\n\\t</Report>\\r\\n</ReportSet>\",\n  \"CategoryId\":{{Reports_get_reportCategoryId}},\n  \"Id\":{{Report_get_id}},\n  \"Sequence\": 1,\n  \"Type\": 0,\n  \"ReportOwner\": 0,\n  \"Xml\": null,\n  \"ReportModifiedDate\": null,\n  \"TenantId\": null,\n  \"IzendaadhocReportsId\": null,\n  \"Form\": null,\n  \"ReportSourceId\": null,\n  \"Thumbnail\": null\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Reports({{Report_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Reports({{Report_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Reports",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1d05bb6-46e5-4cea-bc00-84f67e654992",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Verify Response status code and Response body.\", function () {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('Report');",
													"    pm.expect(jsonData.value[0]).to.have.property('CategoryId');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/Reports",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Reports"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Delete Reports",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b8dbef0-6041-4477-901c-f60a148afc20",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/Reports({{Report_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Reports({{Report_get_id}})"
											]
										}
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ReportSchedulers",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "Create new user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ea01be19-e8af-46a6-bacb-d048457271c6",
												"exec": [
													"var userName = \"user_\"+Date.now();",
													"pm.globals.set(\"ReportScheduler_post_username\", userName);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3ff252ab-ca97-4e5a-9f18-d2505179a6dd",
												"exec": [
													"const jsonData = pm.response.json();",
													"verifyUserCreated();",
													"",
													"function verifyUserCreated() {",
													"    ",
													"    try {",
													"        pm.response.to.have.status(201);",
													"        pm.expect(jsonData).to.have.property('Id');",
													"        setData();",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"}",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"ReportScheduler_get_userid\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Prefer",
												"type": "text",
												"value": "return=representation"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"MustChangePwd\": false,\r\n\t\"PwdNeverExpires\": true,\r\n\t\"UPwd\": \"MyPassword1#\",\r\n\t\"SendWelcomeMessage\": false,\r\n\t\"User\": {\r\n\t\t\"Supervisor\": null,\r\n\t\t\"CategoryId\": 1,\r\n\t\t\"DomainName\": null,\r\n\t\t\"EmailAddress\": \"thisIsmail@mailserver.com\",\r\n\t\t\"FullUserName\": \"QA Automation\",\r\n\t\t\"IsDisabled\": false,\r\n\t\t\"IsExternalUser\": false,\r\n\t\t\"IsSecurityAdmin\": false,\r\n\t\t\"OrganizationId\": 1,\r\n\t\t\"SecurityConfigId\": 1,\r\n\t\t\"StartDate\": \"2017-09-01T00:00:00-04:00\",\r\n\t\t\"SupervisorId\": null,\r\n\t\t\"TerminationDate\": \"2047-09-01T00:00:00-04:00\",\r\n\t\t\"UserAcl\": null,\r\n\t\t\"UserName\": \"{{ReportScheduler_post_username}}\"\t\r\n\t}\r\n}\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserManagement",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserManagement"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new Report",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "215a28b0-67f1-43dd-9df7-1c48a71bc165",
												"exec": [
													"var reportName = \"Report_Name\"+Date.now();\r",
													"pm.globals.set(\"ReportScheduler_post_reportName\", reportName);\r",
													"    \r",
													"var reportCategoryName = \"Report_Category_Name_\"+Date.now();\r",
													"pm.globals.set(\"ReportScheduler_post_categoryName\", reportCategoryName);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3d72c25e-eed2-43e4-8724-9022d6688efb",
												"exec": [
													"const jsonData = pm.response.json();",
													"verifyReportCreated();",
													"",
													"function verifyReportCreated() {",
													"    ",
													"    try {",
													"        pm.response.to.have.status(201);",
													"        pm.expect(jsonData).to.have.property('Id');",
													"        setData();",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"}",
													"",
													"function setData() {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"ReportScheduler_get_reportId\", id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"IsDisabled\": false,\n\t\"Name\": \"{{ReportScheduler_post_reportName}}\",\n\t\"Description\": \"Postman Testing\",\n\t\"Report\": \"<ReportSet Title=\\\"User Listing\\\" Description=\\\"User Listing Details\\\" Header=\\\"\\\" ReadOnly=\\\"False\\\" LandscapePrinting=\\\"False\\\" FieldValueColumnPairs=\\\"2\\\" ItemsPerPage=\\\"10000\\\" AddBookmarkForVisualGroup=\\\"False\\\" Footer=\\\"\\\" ShowVisualGroupLabels=\\\"False\\\" Schedule=\\\"1/1/0001 12:00:00 AM\\\" Recipients=\\\"\\\" RepeatType=\\\"None\\\" SendEmailAs=\\\"\\\" UserName=\\\"DefaultAdministrator\\\" Public=\\\"True\\\" Designer=\\\"AdHocReportDesigner\\\">\\r\\n\\t<JoinedTables>\\r\\n\\t\\t<JoinedTable Name=\\\"[eidmadm].[V_ADM_USERS_DETAILS]\\\" Alias=\\\"\\\" RightAlias=\\\"\\\" JoinType=\\\"INNER\\\" LeftConditionColumn=\\\"\\\" RightConditionTable=\\\"\\\" RightConditionColumn=\\\"\\\" />\\r\\n\\t</JoinedTables>\\r\\n\\t<Criterias>\\r\\n\\t\\t<Criteria Column=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[User Name]\\\" Not=\\\"False\\\" FieldFilter=\\\"False\\\" Operator=\\\"Equals\\\" OrIsBlank=\\\"False\\\" Description=\\\"\\\" AliasTable=\\\"\\\" Parameter=\\\"True\\\" Value=\\\"\\\" />\\r\\n\\t\\t<Criteria Column=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Account Disabled]\\\" Not=\\\"False\\\" FieldFilter=\\\"False\\\" Operator=\\\"Equals_Select\\\" OrIsBlank=\\\"False\\\" Description=\\\"\\\" AliasTable=\\\"\\\" Parameter=\\\"True\\\" Value=\\\"...\\\" />\\r\\n\\t</Criterias>\\r\\n\\t<Report Title=\\\"\\\" Code=\\\"\\\" Name=\\\"Detail\\\">\\r\\n\\t\\t<Options Top=\\\"-2147483648\\\" Distinct=\\\"True\\\" StoreResults=\\\"False\\\" SelectVisibleColumns=\\\"True\\\" ChartTypeName=\\\"\\\" AddGrandTotals=\\\"False\\\" TotalsFunction=\\\"None\\\" Invert=\\\"False\\\" FieldValue=\\\"False\\\" AddDeltas=\\\"False\\\" LinesPerItem=\\\"1\\\" ColumnsLimit=\\\"-1\\\" ReportType=\\\"Detail\\\" />\\r\\n\\t\\t<Position X=\\\"0\\\" Y=\\\"3\\\" ColSpan=\\\"1\\\" RowSpan=\\\"1\\\" />\\r\\n\\t\\t<Selections>\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[User ID]\\\" ColumnSql=\\\"\\\" Description=\\\"User ID\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[User Name]\\\" ColumnSql=\\\"\\\" Description=\\\"User Name\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"ASC\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[User Full Name]\\\" ColumnSql=\\\"\\\" Description=\\\"User Full Name\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Email Address]\\\" ColumnSql=\\\"\\\" Description=\\\"Email Address\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Domain]\\\" ColumnSql=\\\"\\\" Description=\\\"Domain\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Organization]\\\" ColumnSql=\\\"\\\" Description=\\\"Organization\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Category]\\\" ColumnSql=\\\"\\\" Description=\\\"Category\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Start Date]\\\" ColumnSql=\\\"\\\" Description=\\\"Start Date\\\" Definition=\\\"\\\" FormatString=\\\"{0:d}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Term Date]\\\" ColumnSql=\\\"\\\" Description=\\\"Term Date\\\" Definition=\\\"\\\" FormatString=\\\"{0:d}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[User ACL]\\\" ColumnSql=\\\"\\\" Description=\\\"User ACL\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[PNE]\\\" ColumnSql=\\\"\\\" Description=\\\"Password Never Expires\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Account Disabled]\\\" ColumnSql=\\\"\\\" Description=\\\"Account Disabled\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Enable System Administration]\\\" ColumnSql=\\\"\\\" Description=\\\"Enable System Administration\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[External User]\\\" ColumnSql=\\\"\\\" Description=\\\"External User\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Created By]\\\" ColumnSql=\\\"\\\" Description=\\\"Created By\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Created Date]\\\" ColumnSql=\\\"\\\" Description=\\\"Created Date\\\" Definition=\\\"\\\" FormatString=\\\"{0:d}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Last Modified By]\\\" ColumnSql=\\\"\\\" Description=\\\"Last Modified By\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Last Modified Date]\\\" ColumnSql=\\\"\\\" Description=\\\"Last Modified Date\\\" Definition=\\\"\\\" FormatString=\\\"{0:d}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t</Selections>\\r\\n\\t</Report>\\r\\n\\t<Report Title=\\\"\\\" Code=\\\"\\\" Name=\\\"Summary\\\">\\r\\n\\t\\t<Options Top=\\\"-2147483648\\\" Distinct=\\\"True\\\" StoreResults=\\\"False\\\" SelectVisibleColumns=\\\"True\\\" ChartTypeName=\\\"\\\" AddGrandTotals=\\\"False\\\" TotalsFunction=\\\"None\\\" Invert=\\\"False\\\" FieldValue=\\\"False\\\" AddDeltas=\\\"False\\\" LinesPerItem=\\\"1\\\" ColumnsLimit=\\\"-1\\\" ReportType=\\\"Summary\\\" />\\r\\n\\t\\t<Position X=\\\"0\\\" Y=\\\"2\\\" ColSpan=\\\"1\\\" RowSpan=\\\"1\\\" />\\r\\n\\t\\t<Selections />\\r\\n\\t</Report>\\r\\n\\t<Report Title=\\\"\\\" Code=\\\"\\\" Name=\\\"Chart\\\">\\r\\n\\t\\t<Options Top=\\\"-2147483648\\\" Distinct=\\\"True\\\" StoreResults=\\\"False\\\" SelectVisibleColumns=\\\"True\\\" ChartTypeName=\\\"\\\" AddGrandTotals=\\\"False\\\" TotalsFunction=\\\"None\\\" Invert=\\\"False\\\" FieldValue=\\\"False\\\" AddDeltas=\\\"False\\\" LinesPerItem=\\\"1\\\" ColumnsLimit=\\\"-1\\\" ReportType=\\\"Chart\\\" />\\r\\n\\t\\t<Position X=\\\"0\\\" Y=\\\"0\\\" ColSpan=\\\"1\\\" RowSpan=\\\"1\\\" />\\r\\n\\t\\t<Selections />\\r\\n\\t</Report>\\r\\n\\t<Report Title=\\\"\\\" Code=\\\"\\\" Name=\\\"Gauges\\\" BorderColor=\\\"-1\\\" HeaderColor=\\\"16777215\\\" ItemColor=\\\"16777215\\\" AlternatingItemColor=\\\"16777215\\\" HeaderForegroundColor=\\\"-16777216\\\" ItemForegroundColor=\\\"-16777216\\\">\\r\\n\\t\\t<Options Top=\\\"4\\\" Distinct=\\\"True\\\" StoreResults=\\\"False\\\" SelectVisibleColumns=\\\"True\\\" ChartTypeName=\\\"\\\" AddGrandTotals=\\\"False\\\" TotalsFunction=\\\"None\\\" Invert=\\\"True\\\" FieldValue=\\\"False\\\" AddDeltas=\\\"False\\\" LinesPerItem=\\\"1\\\" ColumnsLimit=\\\"4\\\" ReportType=\\\"Gauge\\\" />\\r\\n\\t\\t<Position X=\\\"0\\\" Y=\\\"1\\\" ColSpan=\\\"1\\\" RowSpan=\\\"1\\\" />\\r\\n\\t\\t<Selections />\\r\\n\\t</Report>\\r\\n</ReportSet>\",\n  \"ReportCategory\": {\n\t\"Name\": \"{{ReportScheduler_post_categoryName}}\",\n\t\"Description\": \"Create new report category\",\n\t\"Status\": 1,\n\t\"Sequence\": 1,\n\t\"GroupId\": 1,\n\t\"ReportView\": 0\n  },\n\n  \"Sequence\": 1,\n  \"Type\": 0,\n  \"ReportOwner\": 0,\n  \"Xml\": null,\n  \"ReportModifiedDate\": null,\n  \"TenantId\": null,\n  \"IzendaadhocReportsId\": null,\n  \"Form\": null,\n  \"ReportSourceId\": null,\n  \"Thumbnail\": null\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Reports",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Reports"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST ReportScheduler",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b6242a15-af60-4873-9a0d-5b9fc0715574",
												"exec": [
													"var reportSchedulerName = \"Report_Scheduler_Name\"+Date.now();\r",
													"pm.globals.set(\"ReportScheduler_post_name\", reportSchedulerName);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c0cc944b-e598-42af-bf27-d4353d595ec5",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(201);\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('IsDisabled');\r",
													"    pm.expect(jsonData).to.have.property('Id');\r",
													"    pm.expect(jsonData).to.have.property('ReportId');\r",
													"    pm.expect(jsonData).to.have.property('UserId');\r",
													"    pm.expect(jsonData).to.have.property('ConfigData');\r",
													"    pm.expect(jsonData).to.have.property('NextRunDate');\r",
													"    pm.expect(jsonData).to.have.property('ActiveEngineId');\r",
													"    pm.expect(jsonData).to.have.property('LastRunDate');\r",
													"    pm.expect(jsonData).to.have.property('LastStatus');\r",
													"    pm.expect(jsonData).to.have.property('Name');\r",
													"    pm.expect(jsonData).to.have.property('Description');\r",
													"    pm.expect(jsonData).to.have.property('ReportCreatedUserId');\r",
													"    pm.expect(jsonData).to.have.property('Filtertype');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('ReportScheduler_post_name'));\r",
													"    pm.expect(jsonData.ReportId).to.eql(pm.variables.get('ReportScheduler_get_reportId'));\r",
													"    pm.expect(jsonData.UserId).to.eql(pm.variables.get('ReportScheduler_get_userid'));\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"    \r",
													"    setData();\r",
													"});\r",
													"\r",
													"function setData() {\r",
													"    var id = jsonData.Id;\r",
													"    pm.globals.set(\"ReportScheduler_get_id\", id);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											},
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"ReportId\": {{ReportScheduler_get_reportId}},\r\n\t\"UserId\": {{ReportScheduler_get_userid}},\r\n\t\"ConfigData\": \"config\",\r\n\t\"NextRunDate\": \"2019-05-02T07:14:43.944Z\",\r\n\t\"ActiveEngineId\": 0,\r\n\t\"LastRunDate\": \"2019-05-02T07:14:43.944Z\",\r\n\t\"LastStatus\": 0,\r\n\t\"Name\": \"{{ReportScheduler_post_name}}\",\r\n\t\"Description\": \"Create new report scheduler\",\r\n\t\"ReportCreatedUserId\": 0,\r\n\t\"IsDisabled\": true,\r\n\t\"Filtertype\": 0\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportSchedulers",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportSchedulers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ReportScheduler with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "477c950f-4442-4b92-be22-7d34a82575a1",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('IsDisabled');\r",
													"    pm.expect(jsonData).to.have.property('Id');\r",
													"    pm.expect(jsonData).to.have.property('ReportId');\r",
													"    pm.expect(jsonData).to.have.property('UserId');\r",
													"    pm.expect(jsonData).to.have.property('ConfigData');\r",
													"    pm.expect(jsonData).to.have.property('NextRunDate');\r",
													"    pm.expect(jsonData).to.have.property('ActiveEngineId');\r",
													"    pm.expect(jsonData).to.have.property('LastRunDate');\r",
													"    pm.expect(jsonData).to.have.property('LastStatus');\r",
													"    pm.expect(jsonData).to.have.property('Name');\r",
													"    pm.expect(jsonData).to.have.property('Description');\r",
													"    pm.expect(jsonData).to.have.property('ReportCreatedUserId');\r",
													"    pm.expect(jsonData).to.have.property('Filtertype');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('ReportScheduler_post_name'));\r",
													"    pm.expect(jsonData.ReportId).to.eql(pm.variables.get('ReportScheduler_get_reportId'));\r",
													"    pm.expect(jsonData.UserId).to.eql(pm.variables.get('ReportScheduler_get_userid'));\r",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('ReportScheduler_get_id'));\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											},
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ReportSchedulers({{ReportScheduler_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportSchedulers({{ReportScheduler_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "PATCH ReportScheduler",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eaf4f709-f86d-4c4b-b263-9a413533ac81",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											},
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Description\": \"Postman patch - Report scheduler\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportSchedulers({{ReportScheduler_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportSchedulers({{ReportScheduler_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT ReportScheduler",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1bf50d76-1aca-437f-8b68-8edb12094871",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											},
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Id\": {{ReportScheduler_get_id}},\r\n\t\"ReportId\": {{ReportScheduler_get_reportId}},\r\n\t\"UserId\": {{ReportScheduler_get_userid}},\r\n\t\"ConfigData\": \"config\",\r\n\t\"NextRunDate\": \"2019-05-02T07:14:43.944Z\",\r\n\t\"ActiveEngineId\": 0,\r\n\t\"LastRunDate\": \"2019-05-02T07:14:43.944Z\",\r\n\t\"LastStatus\": 0,\r\n\t\"Name\": \"{{ReportScheduler_post_name}}\",\r\n\t\"Description\": \"Postman put - ReportScheduler\",\r\n\t\"ReportCreatedUserId\": 0,\r\n\t\"IsDisabled\": true,\r\n\t\"Filtertype\": 0\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportSchedulers({{ReportScheduler_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportSchedulers({{ReportScheduler_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All ReportScheduler",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a1811dc-c662-4066-9e3d-11ed91daddae",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify Response status code and Response body.\", function () {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('value');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('IsDisabled');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ReportId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('UserId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ConfigData');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('NextRunDate');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ActiveEngineId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('LastRunDate');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('LastStatus');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ReportCreatedUserId');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('Filtertype');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');\r",
													"\r",
													"    //Verify response body contains collection of categories\r",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											},
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/ReportSchedulers",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportSchedulers"
											]
										}
									},
									"response": []
								},
								{
									"name": "DEL ReportScheduler",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c1feadb-b2d3-4e0c-9742-f2ad1d743ada",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											},
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportSchedulers({{ReportScheduler_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportSchedulers({{ReportScheduler_get_id}})"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d6265a36-8528-4553-b358-0792875055f7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7fe788b0-f18b-46d4-bd54-03729b5913ea",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "10 DesktopIntegrator",
			"item": [
				{
					"name": "DiDefaultFieldMaps",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "Post DiDefaultFieldMaps",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "af9fb1e4-5630-4d35-b975-db6457fbaec1",
												"exec": [
													"var Name = \"FIELD_NAME_\"+Date.now();\r",
													"pm.globals.set(\"DiDefaultFieldMaps_post_Fieldname\", Name);\r",
													"    \r",
													"var outlookId = Math.floor((Math.random() * 100000) + 1);\r",
													"pm.globals.set(\"DiDefaultFieldMaps_post_OutlookAttributeId\", outlookId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3a84be40-c7bf-4642-9d28-81c6f09fcfaa",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(201);\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('Id');\r",
													"    pm.expect(jsonData).to.have.property('FieldId');\r",
													"    pm.expect(jsonData).to.have.property('OutlookAttributeId');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"    pm.expect(jsonData.OutlookAttributeId).to.eql(pm.variables.get('DiDefaultFieldMaps_post_OutlookAttributeId'));\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"    \r",
													"    setData();\r",
													"});\r",
													"\r",
													"function setData() {\r",
													"    var id = jsonData.Id;\r",
													"    pm.globals.set(\"DiDefaultFieldMaps_get_id\", id);\r",
													"    \r",
													"    var fieldId = jsonData.FieldId;\r",
													"    pm.globals.set(\"DiDefaultFieldMaps_get_FieldId\", fieldId);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"FieldType\": {\n    \"FieldPrecision\": 0,\n    \"Name\": \"{{DiDefaultFieldMaps_post_Fieldname}}\",\n\t\"Description\": \"Postman Test field\",\n    \"FieldType\": 2,\n    \"CategoryType\": 2,\n    \"FieldLength\": 2000,\n    \"MinFieldLength\": 0,\n    \"ColumnName\": \"{{DiDefaultFieldMaps_post_Fieldname}}\",\n    \"FieldMask\": \"\",\n    \"ForeignDataSourceId\": 0\n  },\n  \"OutlookAttributeId\": {{DiDefaultFieldMaps_post_OutlookAttributeId}}\n}\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/DiDefaultFieldMaps",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DiDefaultFieldMaps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get DiDefaultFieldMaps with Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "efa118fd-d0ed-487e-87bc-44870cbde1f6",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Verify all fields are present in response body.\r",
													"    pm.expect(jsonData).to.have.property('Id');\r",
													"    pm.expect(jsonData).to.have.property('FieldId');\r",
													"    pm.expect(jsonData).to.have.property('OutlookAttributeId');\r",
													"    pm.expect(jsonData).to.have.property('CreatedById');\r",
													"    pm.expect(jsonData).to.have.property('CreatedDate');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedById');\r",
													"    pm.expect(jsonData).to.have.property('ModifiedDate');\r",
													"    \r",
													"    //Verify correct values are present in response body.\r",
													"    pm.expect(jsonData.OutlookAttributeId).to.eql(pm.variables.get('DiDefaultFieldMaps_post_OutlookAttributeId'));\r",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('DiDefaultFieldMaps_get_id'));\r",
													"    pm.expect(jsonData.CreatedById).not.eql(null);\r",
													"    pm.expect(jsonData.CreatedDate).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedById).not.eql(null);\r",
													"    pm.expect(jsonData.ModifiedDate).not.eql(null);\r",
													"    \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/DiDefaultFieldMaps({{DiDefaultFieldMaps_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DiDefaultFieldMaps({{DiDefaultFieldMaps_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch DiDefaultFieldMaps",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "671fec23-1192-45ba-944b-4f9c7324ba5a",
												"exec": [
													"var outlookId = Math.floor((Math.random() * 100000) + 1);\r",
													"pm.globals.set(\"DiDefaultFieldMaps_patch_OutlookAttributeId\", outlookId);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "58d9b621-8929-4119-b0c1-b2e84e2ddce9",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"OutlookAttributeId\": {{DiDefaultFieldMaps_patch_OutlookAttributeId}}\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DiDefaultFieldMaps({{DiDefaultFieldMaps_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DiDefaultFieldMaps({{DiDefaultFieldMaps_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put DiDefaultFieldMaps",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "29fe341a-879b-46ad-b10a-a1051fa22bae",
												"exec": [
													"var outlookId = Math.floor((Math.random() * 100000) + 1);\r",
													"pm.globals.set(\"DiDefaultFieldMaps_put_OutlookAttributeId\", outlookId);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e02cbdbb-1cd2-43c1-9100-9aa9cbc11d21",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Id\": {{DiDefaultFieldMaps_get_id}},\n  \"FieldId\": {{DiDefaultFieldMaps_get_FieldId}},\n  \"OutlookAttributeId\": {{DiDefaultFieldMaps_put_OutlookAttributeId}}\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DiDefaultFieldMaps({{DiDefaultFieldMaps_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DiDefaultFieldMaps({{DiDefaultFieldMaps_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All DiDefaultFieldMaps",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "360e200e-cd02-4a00-b6f2-cdfb275401a3",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Verify Response status code and Response body.\", function () {",
													"    ",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('FieldId');",
													"    pm.expect(jsonData.value[0]).to.have.property('OutlookAttributeId');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"    pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"    ",
													"    //Verify response body contains collection of categories",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/DiDefaultFieldMaps",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DiDefaultFieldMaps"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Delete DiDefaultFieldMaps",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f563f08-0537-439f-973e-1b4095a56f18",
												"exec": [
													"pm.test('Verify Response status code and Response body.', function() {\r",
													"    \r",
													"    //Verify response status code.\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/DiDefaultFieldMaps({{DiDefaultFieldMaps_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DiDefaultFieldMaps({{DiDefaultFieldMaps_get_id}})"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7a6f7c04-764a-4003-870a-373471eeccd7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3e0eadeb-1a08-413d-b65c-cbc99b4e8be9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "11 EntityRelationRule",
			"item": [
				{
					"name": "Entity Relation Rule Mappings",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Get All EntityRelationRuleMapping",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/EntityRelationRuleMappings",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EntityRelationRuleMappings"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Post EntityRelationRuleMappings",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "  {\n    \"ValueType\": \"Field\",\n    \"EntityRelationRuleId\": 78,\n    \"DocClassXFieldId\": 200165,\n    \"SearchClassXFieldId\": 200013,\n    \"StaticValue\": null,\n    \"StaticValueOperator\": null\n}\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/EntityRelationRuleMappings",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EntityRelationRuleMappings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete EntityRelationRuleMappings",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{SiteURL}}api/EntityRelationRuleMappings(Id=111)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EntityRelationRuleMappings(Id=111)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get EntityRelationRuleMappings with Key",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/EntityRelationRuleMappings(Id=3)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EntityRelationRuleMappings(Id=3)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch EntityRelationRuleMappings",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"ValueType\": \"Field\",\n    \"Id\": 111,\n    \"EntityRelationRuleId\": 78,\n    \"DocClassXFieldId\": 200165,\n    \"SearchClassXFieldId\": 200013,\n    \"StaticValue\": null,\n    \"StaticValueOperator\": \"=\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/EntityRelationRuleMappings(Id=111)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EntityRelationRuleMappings(Id=111)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put EntityRelationRuleMappings",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"ValueType\": \"Field\",\n    \"Id\": 111,\n    \"EntityRelationRuleId\": 78,\n    \"DocClassXFieldId\": 200165,\n    \"SearchClassXFieldId\": 200013,\n    \"StaticValue\": null,\n    \"StaticValueOperator\": null\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/EntityRelationRuleMappings(Id=111)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EntityRelationRuleMappings(Id=111)"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Entity Relation Rule XDocEvent ",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Entity Relation Rule",
					"item": [],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3b422b57-e672-4014-a3c4-22384b906e76",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b71538c2-746d-401e-96c2-05711aa82958",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "12 Others",
			"item": [
				{
					"name": "Error",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Startup",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "Get Startup",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36764a6a-2ec1-43fa-b78b-423c7c8e1f08",
												"exec": [
													"pm.test(\"\", function() {",
													"",
													"    //Verify response status code.",
													"    pm.response.to.have.status(200);",
													"    ",
													"    //Verify all fields are present in response body.",
													"    pm.expect(pm.response.text()).to.include(\"The service is up and running\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "text/plain",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{SiteURL}}api/Startup",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Startup"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6fa55bf0-80d1-4ced-8408-8309500c6e23",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0827dd62-f7c8-4d67-a3cb-f555581255d5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}