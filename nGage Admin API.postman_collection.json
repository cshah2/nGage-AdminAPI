{
	"info": {
		"_postman_id": "8d5cf10d-ca09-48bf-a0b9-2b72a2f3d1fd",
		"name": "nGage Admin API",
		"description": "Collection contains happy path tests for all Admin Apis",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "01 SecurityManagement",
			"item": [
				{
					"name": "Categories",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Create new category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Response has Id and Name values', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_post_name'));",
													"});",
													"",
													"",
													"pm.test(\"Store category Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"categories_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"POST_\"+Date.now()",
													"    pm.globals.set(\"categories_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Name\": \"{{categories_post_name}}\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Categories",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Categories"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "Get Category (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the category\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_post_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('categories_get_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/Categories({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Categories({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PATCH_\"+Date.now()",
													"    pm.globals.set(\"categories_patch_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Name\": \"{{categories_patch_name}}\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Categories({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Categories({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PUT_\"+Date.now()",
													"    pm.globals.set(\"categories_put_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Id\": {{categories_get_id}},\r\n\t\"Name\": \"{{categories_put_name}}\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Categories({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Categories({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Categories",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify category values are listed\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/Categories",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Categories"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Organizations",
					"item": [
						{
							"name": "Test Happy Path",
							"item": [
								{
									"name": "Create new Organization",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "979a6bd5-817d-4f71-957f-0f5c08819364",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"POST_\"+Date.now()",
													"    pm.globals.set(\"organizations_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0d7d49b2-0d9c-48e4-8092-691f3a909ca3",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Verify ID and name field values in response.\", function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('organizations_post_name'));",
													"});",
													"",
													"pm.test('Verify all other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('IsDisabled');",
													"  pm.expect(jsonData).to.have.property('Address1');",
													"  pm.expect(jsonData).to.have.property('Address2');",
													"  pm.expect(jsonData).to.have.property('Address3');",
													"  pm.expect(jsonData).to.have.property('City');",
													"  pm.expect(jsonData).to.have.property('State');",
													"  pm.expect(jsonData).to.have.property('PostalCode');",
													"  pm.expect(jsonData).to.have.property('Country');",
													"  pm.expect(jsonData).to.have.property('PrimaryContact');",
													"  pm.expect(jsonData).to.have.property('ContactNumber1');",
													"  pm.expect(jsonData).to.have.property('ContactNumber2');",
													"});",
													"",
													"pm.test(\"Store organization Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"organizations_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"IsDisabled\": false,\n            \"Name\": \"{{organizations_post_name}}\",\n            \"Address1\": \"50 Valley Stream Parkway (HQ)1\",\n            \"Address2\": \"\",\n            \"Address3\": \"\",\n            \"City\": \"Malvern\",\n            \"State\": \"PA\",\n            \"PostalCode\": \"19355\",\n            \"Country\": \"USA\",\n            \"PrimaryContact\": \"Support\",\n            \"ContactNumber1\": \"484.323.1360\",\n            \"ContactNumber2\": null,\n            \"CreatedById\": 1000000,\n            \"CreatedDate\": \"2019-03-01T07:32:17.88-05:00\",\n            \"ModifiedById\": 1000000,\n            \"ModifiedDate\": \"2019-03-01T08:59:21.67-05:00\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Organizations",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Organizations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Organizations(Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "89f55150-3536-428e-9817-487bae01795b",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify ID and name field values in response.\", function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Id).to.eql(pm.variables.get('organizations_get_id'));",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('organizations_post_name'));",
													"});",
													"",
													"pm.test(\"Verify other fields are present in tesponse.\", function () {",
													"    ",
													"  pm.expect(jsonData).to.have.property('IsDisabled');",
													"  pm.expect(jsonData).to.have.property('Address1');",
													"  pm.expect(jsonData).to.have.property('Address2');",
													"  pm.expect(jsonData).to.have.property('Address3');",
													"  pm.expect(jsonData).to.have.property('City');",
													"  pm.expect(jsonData).to.have.property('State');",
													"  pm.expect(jsonData).to.have.property('PostalCode');",
													"  pm.expect(jsonData).to.have.property('Country');",
													"  pm.expect(jsonData).to.have.property('PrimaryContact');",
													"  pm.expect(jsonData).to.have.property('ContactNumber1');",
													"  pm.expect(jsonData).to.have.property('ContactNumber2');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/Organizations({{organizations_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Organizations({{organizations_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Organisation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "589d8697-1283-4ab2-9e9d-02957f549ce0",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PATCH_\"+Date.now()",
													"    pm.globals.set(\"organizations_patch_name\", Name);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fc9c3be9-a162-4372-9f53-6e9d0aa32f1c",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Name\": \"{{organizations_patch_name}}\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Organizations({{organizations_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Organizations({{organizations_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Organisation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "71833015-17d3-4ad8-abf8-86590c412982",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PUT_\"+Date.now()",
													"    pm.globals.set(\"organizations_put_name\", Name);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0058825-c179-4a77-8c07-cd3836b675d0",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"IsDisabled\": false,\n    \"Id\": {{organizations_get_id}},\n    \"Name\": \"{{organizations_put_name}}\",\n    \"Address1\": \"50 Valley Stream Parkway (HQ)1\",\n    \"Address2\": \"\",\n    \"Address3\": \"\",\n    \"City\": \"Malvern\",\n    \"State\": \"PA\",\n    \"PostalCode\": \"19355\",\n    \"Country\": \"USA\",\n    \"PrimaryContact\": \"Support\",\n    \"ContactNumber1\": \"484.323.1360\",\n    \"ContactNumber2\": null,\n    \"CreatedById\": 1000000,\n    \"CreatedDate\": \"2019-03-01T09:51:29.45-05:00\",\n    \"ModifiedById\": 1000000,\n    \"ModifiedDate\": \"2019-03-01T11:14:35.94-05:00\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Organizations({{organizations_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Organizations({{organizations_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Organizations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify category values are listed\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"});",
													"",
													"pm.test('Verify all other fields are present in response.', function() {",
													"  pm.expect(jsonData.value[0]).to.have.property('IsDisabled');",
													"  pm.expect(jsonData.value[0]).to.have.property('Address1');",
													"  pm.expect(jsonData.value[0]).to.have.property('Address2');",
													"  pm.expect(jsonData.value[0]).to.have.property('Address3');",
													"  pm.expect(jsonData.value[0]).to.have.property('City');",
													"  pm.expect(jsonData.value[0]).to.have.property('State');",
													"  pm.expect(jsonData.value[0]).to.have.property('PostalCode');",
													"  pm.expect(jsonData.value[0]).to.have.property('Country');",
													"  pm.expect(jsonData.value[0]).to.have.property('PrimaryContact');",
													"  pm.expect(jsonData.value[0]).to.have.property('ContactNumber1');",
													"  pm.expect(jsonData.value[0]).to.have.property('ContactNumber2');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}/api/Organizations",
											"host": [
												"{{SiteURL}}"
											],
											"path": [
												"api",
												"Organizations"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "SecurityCertificates",
					"item": [
						{
							"name": "Test- Happy Path",
							"item": [
								{
									"name": "Create New Security Certificates",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "dea4fa11-d155-4391-b993-1dcd82f366aa",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"POST_\"+Date.now()",
													"    pm.globals.set(\"SC_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a2526aa7-a82b-4dd0-a6f1-815564ea7ec2",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Verify Id and Name values in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('SC_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"    pm.expect(jsonData).to.have.property('Certificate');",
													"    pm.expect(jsonData).to.have.property('IsEnabled');",
													"});",
													"",
													"pm.test(\"Store Security Certificate Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"SC_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \t\"Name\": \"{{SC_post_name}}\",\r\n \t\"Certificate\": \"UEsDBBQABgAIAAAAIQDfpNJsWgEAACAFAAATAAgCW0NvbnRlbnRfVHlwZXNdLnhtbCCiBAIoolMtuwjAQRfeV+g+Rt1Vi6KKqKgKLPpYtUukHGHsCVv2Sx7z+vhMCUVUBkQpsIiUz994zVsaD0dqabAkRtXcl6xc9loGTXmk3K9nX5C1/ZBkm4ZQw3kHJNoBsNLy9GUw2ATAjtcOSzVMKT5yjnIMVWPgAjiqVj1Ykeo0zHoT8FjPg973eA5feJXApT7UHGw5eoBILk7LXNX1uSCIYZNlz01hnlUyEYLQUiep86dSflHyXUJBy24NzHfCOGhg/mFBXjgfsdB90NFEryMYipndhqYuvfFRcebmwpCxO2xzg9FWlJbT62i1ELwGRztyaoq1Yod2e/ygHpo0BvDxF49sdDymR4BoAO+dOhBVMP69G8cu8E6Si3ImYGrg8RmvdCZFoA6F59s/m2NqciqTOcfQBaaPjP8ber2ytzmngADHp039dm0jWZ88H9W2gQB3I5tv7bfgDAAD//wMAUEsDBBQABgAIAAAAIQAekRq37wAAAE4CAAALAAgCX3JlbHMvLnJlbHMgogQCKKAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\r\n \t\"IsEnabled\": true,\r\n \t\"CreatedById\": 1,\r\n \t\"CreatedDate\": \"2019-02-13T14:40:05.957-05:00\",\r\n \t\"ModifiedById\": 1,\r\n \t\"ModifiedDate\": \"2019-02-13T15:05:30.757-05:00\"\r\n }"
										},
										"url": {
											"raw": "{{SiteURL}}api/SecurityCertificates",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SecurityCertificates"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Security Certificates",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87fced6e-4bea-4d95-aea3-21e5624c0086",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Verify Id and Name values in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('SC_post_name'));",
													"  pm.expect(jsonData.Id).to.eql(pm.variables.get('SC_get_id'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"    pm.expect(jsonData).to.have.property('Certificate');",
													"    pm.expect(jsonData).to.have.property('IsEnabled');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/SecurityCertificates({{SC_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SecurityCertificates({{SC_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Security Certificates",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d1ca0f17-9d94-47a1-88e5-7796a6ca2e3c",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PATCH_\"+Date.now()",
													"    pm.globals.set(\"SC_patch_name\", Name);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "21954efa-7ec8-4202-8425-eea9dc00ace1",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Name\": \"{{SC_patch_name}}\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/SecurityCertificates({{SC_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SecurityCertificates({{SC_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Security Certificates",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a9bda175-2471-45df-a4e7-c30e1be69aea",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PUT_\"+Date.now()",
													"    pm.globals.set(\"SC_put_name\", Name);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8be2c18c-6495-4aa9-ba65-384e3be7644d",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \t\"Id\": {{SC_get_id}},\r\n \t\"Name\": \"{{SC_put_name}}\",\r\n \t\"Certificate\": \"UEsDBBQABgAIAAAAIQDfpNJsWgEAACAFAAATAAgCW0NvbnRlbnRfVHlwZXNdLnhtbCCiBAIoolMtuwjAQRfeV+g+Rt1Vi6KKqKgKLPpYtUukHGHsCVv2Sx7z+vhMCUVUBkQpsIiUz994zVsaD0dqabAkRtXcl6xc9loGTXmk3K9nX5C1/ZBkm4ZQw3kHJNoBsNLy9GUw2ATAjtcOSzVMKT5yjnIMVWPgAjiqVj1Ykeo0zHoT8FjPg973eA5feJXApT7UHGw5eoBILk7LXNX1uSCIYZNlz01hnlUyEYLQUiep86dSflHyXUJBy24NzHfCOGhg/mFBXjgfsdB90NFEryMYipndhqYuvfFRcebmwpCxO2xzg9FWlJbT62i1ELwGRztyaoq1Yod2e/ygHpo0BvDxF49sdDymR4BoAO+dOhBVMP69G8cu8E6Si3ImYGrg8RmvdCZFoA6F59s/m2NqciqTOcfQBaaPjP8ber2ytzmngADHp039dm0jWZ88H9W2gQB3I5tv7bfgDAAD//wMAUEsDBBQABgAIAAAAIQAekRq37wAAAE4CAAALAAgCX3JlbHMvLnJlbHMgogQCKKAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\r\n \t\"IsEnabled\": true\r\n }"
										},
										"url": {
											"raw": "{{SiteURL}}api/SecurityCertificates({{SC_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SecurityCertificates({{SC_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Security Certificates",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e14799e0-bec7-4f80-bec0-5f944d8b9546",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Verify Id and Name values in response.', function() {",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"    pm.expect(jsonData.value[0]).to.have.property('Certificate');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsEnabled');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/SecurityCertificates",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SecurityCertificates"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "SecurityConfigurations",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "Get All Security Configurations",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/SecurityConfigurations",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SecurityConfigurations"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "User Directories",
					"item": [
						{
							"name": "Test-Happy path",
							"item": [],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "User Groups",
					"item": [
						{
							"name": "Test -Happy path",
							"item": [
								{
									"name": "Post UserGroups with Children",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a74ae509-3fa3-4b94-ba9e-433a190dc9ce",
												"exec": [
													"pm.test(\"Set dynamic value for UserGroupName\", function () {",
													"    var Name = \"POST_\"+Date.now()",
													"    pm.globals.set(\"UserGroups_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ae2c322e-b1be-4298-b6d9-21c62d139572",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Response has Id and Name values', function() {",
													"  pm.expect(jsonData).to.have.property('GroupId');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('UserGroups_post_name'));",
													"});",
													"",
													"",
													"pm.test(\"Store USerGroupId\", function () {",
													"    var id = jsonData.GroupId;",
													"    pm.globals.set(\"UserGroups_get_Groupid\", id);",
													"});",
													"",
													"pm.test('Response has other fields present', function () {",
													"  pm.expect(jsonData).to.have.property('Description');",
													"  pm.expect(jsonData).to.have.property('Acl');",
													" ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Name\": \"{{UserGroups_post_name}}\",\n  \"Description\": null,\n  \"Acl\": \"\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserGroups",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserGroups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get UserGroups with children",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ae0d1e1-78c1-4fa9-b37d-a69c8b7f9a8f",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify UserGroupName and UserGroupID of the UserGroup after patch operation\", function () {",
													"   ",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('UserGroups_post_name'));",
													"    pm.expect(jsonData.GroupId).to.eql(pm.variables.get('UserGroups_get_Groupid'));",
													"});",
													"",
													"pm.test('Response has other fields present', function () {",
													"  pm.expect(jsonData).to.have.property('Description');",
													"  pm.expect(jsonData).to.have.property('Acl');",
													" ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/UserGroups({{UserGroups_get_Groupid}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserGroups({{UserGroups_get_Groupid}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch UserGroups",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6b71e66a-cc01-423b-991c-6b7fdb546845",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PATCH_\"+Date.now()",
													"    pm.globals.set(\"UserGroups_post_name\", Name);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c2f3d9b-a41a-4bab-9288-91aa10d984a3",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"Name\": \"{{UserGroups_post_name}}\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserGroups({{UserGroups_get_Groupid}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserGroups({{UserGroups_get_Groupid}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put UserGroups",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f220c70d-7455-4cd7-8039-4a93f5794f9b",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PUT_\"+Date.now()",
													"    pm.globals.set(\"UserGroups_post_name\", Name);",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4b9dbb96-e7f6-47bd-951b-7e5e6a7a804c",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"GroupId\": {{UserGroups_get_Groupid}},\n  \"Name\": \"{{UserGroups_post_name}}\",\n  \"Description\": \"{{UserGroups_put_name}}\",\n  \"Acl\": \"\",\n  \"CreatedById\": 1,\n   \"CreatedDate\": \"2004-03-24T00:00:00-05:00\",\n   \"ModifiedById\": 1,\n   \"ModifiedDate\": \"2004-03-24T00:00:00-05:00\"\n  \n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserGroups({{UserGroups_get_Groupid}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserGroups({{UserGroups_get_Groupid}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All UserGroups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1199f1c-a8fd-4323-af04-a6577b0e9827",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify All UserGroups are listed\", function () {",
													"    ",
													"    pm.expect(jsonData.value[0]).to.have.property('GroupId');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"});",
													"",
													"pm.test('Verify all keys are present in first item of list', function () {",
													"pm.expect(jsonData.value[0]).to.have.property('Acl');",
													"pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"pm.expect(jsonData.value[0]).to.have.property('CreatedDate');",
													"pm.expect(jsonData.value[0]).to.have.property('ModifiedById');",
													"pm.expect(jsonData.value[0]).to.have.property('ModifiedDate');",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/UserGroups",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserGroups"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Delete UserGroup",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e106d748-edda-4b2a-ba2b-ee74df333b02",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"DEL_\"+Date.now()",
													"    pm.globals.set(\"UserGroups_post_name\", Name);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3dffeee0-4723-4aab-8ba5-050772db984f",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											},
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/UserGroups({{UserGroups_get_Groupid}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserGroups({{UserGroups_get_Groupid}})"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "UserDirectoryOtherAttributes",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "UserUserGroups",
					"item": [
						{
							"name": "Test-Happy path",
							"item": [
								{
									"name": "1. Create new category Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Response has Id and Name values', function() {",
													"  pm.expect(jsonData).to.have.property('GroupId');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_post_name'));",
													"});",
													"",
													"pm.test(\"Store category Id\", function () {",
													"    var id = jsonData.GroupId;",
													"    pm.globals.set(\"groups_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"POST_\"+Date.now()",
													"    pm.globals.set(\"categories_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Name\": \"{{categories_post_name}}\",\r\n  \"Description\": null,\r\n  \"Acl\": \"\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserGroups",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserGroups"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "1. Create new category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Response has Id and Name values', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"});",
													"",
													"pm.test(\"Store category Id\", function () {",
													"    var id = jsonData.GroupId;",
													"    pm.globals.set(\"categories_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"UserId\": 1,\r\n  \"GroupId\": {{groups_get_id}},\r\n  \"CreatedById\": 1,\r\n  \"CreatedDate\": \"2007-08-20T13:22:52.353-04:00\",\r\n  \"ModifiedById\": 1,\r\n  \"ModifiedDate\": \"2007-08-20T13:22:52.353-04:00\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserUserGroups",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserUserGroups"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "2. Get Category (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the category\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.GroupId).to.eql(pm.variables.get('categories_get_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/UserUserGroups(UserId=1,GroupId={{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserUserGroups(UserId=1,GroupId={{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Patch Category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ModifiedById\": 2\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserUserGroups(UserId=1,GroupId={{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserUserGroups(UserId=1,GroupId={{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Get Category (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the category after patch operation\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.ModifiedById).to.eql(2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/UserUserGroups(UserId=1,GroupId={{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserUserGroups(UserId=1,GroupId={{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Get All Categories",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify category values are listed\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('UserId');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/UserUserGroups",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserUserGroups"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "User Management",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "User Management",
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": ""
										}
									},
									"response": []
								},
								{
									"name": "Put User Management",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Prefer",
												"value": "return=representation"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Id\": 1000008,\n\t\"MustChangePwd\": true,\n\t\"PwdNeverExpires\": false,\n\t\"UPwd\": \"ThisIsPwd454#\",\n\t\"SendWelcomeMessage\": false\n}\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserManagement(1000008)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserManagement(1000008)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Users Management",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Prefer",
												"value": "return=representation"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Id\": 1000012,\n\t\"MustChangePwd\": false,\n\t\"PwdNeverExpires\": false,\n\t\"SendWelcomeMessage\": false,\n\t\"InvalidLoginCount\": 20,\n    \"PwdLastChanged\": \"2047-09-01T00:00:00-04:00\",\n    \"UPwd\": \"ThisIsNewPwd12#\"\n}\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserManagement(1000012)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserManagement(1000012)"
											]
										}
									},
									"response": []
								},
								{
									"name": "{{SiteURL}}api/DocTypes(501)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1e85a5bf-40d8-4fdc-8ece-33f91981efba",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PUT_\"+Date.now()",
													"    pm.globals.set(\"DocTypes_put_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1d42369e-39ec-40e4-87c2-2a8db84de5b3",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"AutoTitleFlag\": true,\n  \"UseDefaultWmiConfig\": false,\n  \"ContentMode\": 2,\n  \"AllowDeleteAllPages\": false,\n  \"Disabled\": false,\n  \"Id\": 501,\n  \"Name\": \"{{DocTypes_put_name}}\",\n  \"CustomFlags\": \"\",\n  \"DocClassId\": 101,\n  \"AutoTitle\": \"%DT% - %-1000% - %DCD%\",\n  \"AssemblyName\": \"\",\n  \"AssemblyClassName\": \"\",\n  \"AdminAssemblyName\": \"WMI/DefaultWMI/Admin/WMIAdminMenu.aspx\",\n  \"AdminAssemblyClassName\": \"\",\n  \"Url\": \"\",\n  \"PropInterfaceId\": 1,\n  \"WmConfigData\": \"\",\n  \"WmiInterfaceId\": 1000,\n  \"IndexContent\": 0,\n  \"LibraryId\": 0,\n  \"AuditControlType\": 0\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocTypes(501)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTypes(501)"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Users",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Get All Users",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a208ca1-f3c5-4ae4-ae58-69cad29a0abc",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify Users values are listed\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsDisabled');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsSecurityAdmin');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/Users",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Users"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Get Users with children",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91be05c2-f360-4d50-bcdb-916cae697f83",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify all fields are present in the response.\", function () {",
													"  ",
													"  pm.expect(jsonData).to.have.property('IsDisabled');",
													"  pm.expect(jsonData).to.have.property('IsSecurityAdmin');",
													"  pm.expect(jsonData).to.have.property('IsExternalUser');",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('UserName');",
													"  pm.expect(jsonData).to.have.property('EmailAddress');",
													"  pm.expect(jsonData).to.have.property('FullUserName');",
													"  pm.expect(jsonData).to.have.property('StartDate');",
													"  pm.expect(jsonData).to.have.property('TerminationDate');",
													"  pm.expect(jsonData).to.have.property('CategoryId');",
													"  pm.expect(jsonData).to.have.property('OrganizationId');",
													"  pm.expect(jsonData).to.have.property('DomainName');",
													"  pm.expect(jsonData).to.have.property('UserAcl');",
													"  pm.expect(jsonData).to.have.property('SecurityConfigId');",
													"  pm.expect(jsonData).to.have.property('SupervisorId');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ad8b09d8-25a0-4ca6-8bbf-a0938b918948",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var FullUserName = \"POST_\"+Date.now()",
													"    pm.globals.set(\"UserFullname_name\", FullUserName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/Users(1)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Users(1)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Users",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Prefer",
												"value": "return=representation"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Id\": 1000008,\n\t\"Supervisor\": null,\n\t\"CategoryId\": 1,\n\t\"DomainName\": \"BPT\",\n\t\"EmailAddress\": \"thisIsmail2@mailserver.com\",\n\t\"FullUserName\": \"PostmanUser22 6800125208E94AEE\",\n\t\"IsDisabled\": false,\n\t\"IsExternalUser\": false,\n\t\"IsSecurityAdmin\": false,\n\t\"OrganizationId\": 1,\n\t\"SecurityConfigId\": 1,\n\t\"StartDate\": \"2017-09-01T00:00:00-04:00\",\n\t\"SupervisorId\": null,\n\t\"TerminationDate\": \"2047-09-01T00:00:00-04:00\",\n\t\"UserAcl\": null,\n\t\"UserName\": \"Postman6800125208E94AEE\"\t\n}\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/Users(1000008)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Users(1000008)"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "cf1bca06-43e6-455b-a85e-36075f06f9e0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5a30edfe-39c5-4d3c-a8de-39beda0aac27",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "02 Configuration",
			"item": [
				{
					"name": "Admin Modules",
					"item": [
						{
							"name": "Test-Happy Path Testing",
							"item": [
								{
									"name": "Post AdminModules with Children",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2596ab78-69c8-41e4-8c41-05d04d93a489",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    ",
													"    var tabName = \"TAB_\"+Date.now()",
													"    pm.globals.set(\"AdminModule_post_tabname\", tabName);",
													"",
													"    var name = \"ADMIN_MODULE_\"+Date.now()",
													"    pm.globals.set(\"AdminModule_post_name\", name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a69e6e2b-127e-4cbb-9737-ea22c82e6e2f",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Verify Response Id and Name values', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('AdminModule_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Disabled');",
													"  pm.expect(jsonData).to.have.property('TabId');",
													"  pm.expect(jsonData).to.have.property('LinkType');",
													"  pm.expect(jsonData).to.have.property('AssemblyName');",
													"  pm.expect(jsonData).to.have.property('AssemblyClass');",
													"  pm.expect(jsonData).to.have.property('UrlLink');",
													"  pm.expect(jsonData).to.have.property('AppPath');",
													"  pm.expect(jsonData).to.have.property('Parameters');",
													"  pm.expect(jsonData).to.have.property('Seq');",
													"  pm.expect(jsonData).to.have.property('ImageData');",
													"  pm.expect(jsonData).to.have.property('DisplayMode');",
													"  pm.expect(jsonData).to.have.property('HelpLink');",
													"});",
													"",
													"pm.test(\"Store Tab Id and Admin Module Id values\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"AdminModule_get_id\", id);",
													"    var tabId = jsonData.TabId;",
													"    pm.globals.set(\"AdminModule_get_tabId\", tabId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Disabled\": true,\n  \"Tab\": {\n    \"Disabled\": true,\n\t\"Name\": \"{{AdminModule_post_tabname}}\",\n\t\"Sequence\": 99\n  },\n  \"Name\": \"{{AdminModule_post_name}}\",\n  \"LinkType\": 0,\n  \"AssemblyName\": \"{{AdminModule_post_name}}\",\n  \"AssemblyClass\": \"{{AdminModule_post_name}}\",\n  \"UrlLink\": \"~/Administration/Security/UserGroups/Test.ascx\",\n  \"AppPath\": \"\",\n  \"Parameters\": \"\",\n  \"Seq\": 1,\n  \"ImageData\": \"R0lGODlhGAAVAOZ/AOjUhfPnnPaWIvLag/ayZKmDSvalRvXGjfW2bO7YefWqUeW8OsqsZPavXPScM/SaLypbhP7y5PXZtvWhPUltf0lzmPawWv3u3DhjivXAgc62lPq2Zt+6KfW5cvXOnfXDhfrTpf/58/r9/vXTqPWeOP3lx/ibK/zQncmthreSXvTdvvfwrKp7J4G/3uDNhtfSk/WcKOHKd6C80erPZcWgTL7IzvW+efzfvenNX56yveLo7vi3aMKYLvPq1+fKWOG9M7aJJvfVq4WVnc+RNu3k1/jAffWXJ9vJr+PUlvH09/n28mebvbSuocTQ3JetweTu9eC7Lty7wajDxef1/a/H2m98guqmIeHSvPXQotHt/B5OeeTFyefbyujS1uXFS86lJfPgxOajQoehuPaiMsyVTPihOWmJprjX6vmvVvi+fJ/Ez/WrVvatVebIUbPY6rvS4oKerKyAOrqVUMGgXrXE01d8nPXWr0tmbfHgi09qdpCUjvXKlevSbHGLlfeUHf///yH5BAEAAH8ALAAAAAAYABUAAAf/gH+Cg4SFhoeIiYgXHhkIaReKhxEjElgZDQYhkoVBKj0SBwQTIIdNOocHdiojHwQkBIUVEBhadIYZB3sHHQoORYROdRgQZxVmSYQgCAgECiQPN39XGkwYT1FUWXBLGIQbEwYTDg9GBilzSHlvWyJTQm59LYMnH34CRkYCCgphKysUZHQRUSNHHzXz/kQwIcGPw4cNBwR4cUePhgIF4kiBIGiDBQ8PH4IhMSZGHDkMXAQIwCCPmD8l/NhAENLhAQt+hgDAg2dAggQ0qghC46fDhJp+2LDxA4PPDBw+2njhwUWhwzVI/ZhQ4HDBgh9QOHBgoQSmwwdZ/aD1Y+ULDyAsJ1KgELTQj5G0d/2QQXGEiKEQJ3aUQWrCwokInAZFKME4sePHkAkFAgA7\",\n  \"DisplayMode\": 0,\n  \"HelpLink\": \"ENav_ATI_Help.htm\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/AdminModules",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"AdminModules"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Admin Modules (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Verify Response Id, Tab Id and Name values', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('TabId');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('AdminModule_post_name'));",
													"  pm.expect(jsonData.TabId).to.eql(pm.variables.get('AdminModule_get_tabId'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/AdminModules({{AdminModule_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"AdminModules({{AdminModule_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Admin Modules",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"AM_PATCH_\"+Date.now()",
													"    pm.globals.set(\"AdminModule_patch_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Name\":\"{{AdminModule_patch_name}}\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/AdminModules({{AdminModule_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"AdminModules({{AdminModule_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Admin Modules",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"AM_PUT_\"+Date.now()",
													"    pm.globals.set(\"AdminModule_put_name\", Name);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Id\":{{AdminModule_get_id}},\n  \"Disabled\": true,\n  \"TabId\": {{AdminModule_get_tabId}},\n  \"Name\": \"{{AdminModule_put_name}}\",\n  \"LinkType\": 0,\n  \"AssemblyName\": \"{{AdminModule_put_name}}\",\n  \"AssemblyClass\": \"{{AdminModule_put_name}}\",\n  \"UrlLink\": \"~/Administration/Security/UserGroups/Test.ascx\",\n  \"AppPath\": \"\",\n  \"Parameters\": \"\",\n  \"Seq\": 1,\n  \"ImageData\": \"R0lGODlhGAAVAOZ/AOjUhfPnnPaWIvLag/ayZKmDSvalRvXGjfW2bO7YefWqUeW8OsqsZPavXPScM/SaLypbhP7y5PXZtvWhPUltf0lzmPawWv3u3DhjivXAgc62lPq2Zt+6KfW5cvXOnfXDhfrTpf/58/r9/vXTqPWeOP3lx/ibK/zQncmthreSXvTdvvfwrKp7J4G/3uDNhtfSk/WcKOHKd6C80erPZcWgTL7IzvW+efzfvenNX56yveLo7vi3aMKYLvPq1+fKWOG9M7aJJvfVq4WVnc+RNu3k1/jAffWXJ9vJr+PUlvH09/n28mebvbSuocTQ3JetweTu9eC7Lty7wajDxef1/a/H2m98guqmIeHSvPXQotHt/B5OeeTFyefbyujS1uXFS86lJfPgxOajQoehuPaiMsyVTPihOWmJprjX6vmvVvi+fJ/Ez/WrVvatVebIUbPY6rvS4oKerKyAOrqVUMGgXrXE01d8nPXWr0tmbfHgi09qdpCUjvXKlevSbHGLlfeUHf///yH5BAEAAH8ALAAAAAAYABUAAAf/gH+Cg4SFhoeIiYgXHhkIaReKhxEjElgZDQYhkoVBKj0SBwQTIIdNOocHdiojHwQkBIUVEBhadIYZB3sHHQoORYROdRgQZxVmSYQgCAgECiQPN39XGkwYT1FUWXBLGIQbEwYTDg9GBilzSHlvWyJTQm59LYMnH34CRkYCCgphKysUZHQRUSNHHzXz/kQwIcGPw4cNBwR4cUePhgIF4kiBIGiDBQ8PH4IhMSZGHDkMXAQIwCCPmD8l/NhAENLhAQt+hgDAg2dAggQ0qghC46fDhJp+2LDxA4PPDBw+2njhwUWhwzVI/ZhQ4HDBgh9QOHBgoQSmwwdZ/aD1Y+ULDyAsJ1KgELTQj5G0d/2QQXGEiKEQJ3aUQWrCwokInAZFKME4sePHkAkFAgA7\",\n  \"DisplayMode\": 0,\n  \"HelpLink\": \"ENav_ATI_Help.htm\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/AdminModules({{AdminModule_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"AdminModules({{AdminModule_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Admin Modules",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify all fields are displayed in array\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('Disabled');",
													"    pm.expect(jsonData.value[0]).to.have.property('TabId');",
													"    pm.expect(jsonData.value[0]).to.have.property('LinkType');",
													"    pm.expect(jsonData.value[0]).to.have.property('AssemblyName');",
													"    pm.expect(jsonData.value[0]).to.have.property('AssemblyClass');",
													"    pm.expect(jsonData.value[0]).to.have.property('UrlLink');",
													"    pm.expect(jsonData.value[0]).to.have.property('AppPath');",
													"    pm.expect(jsonData.value[0]).to.have.property('Parameters');",
													"    pm.expect(jsonData.value[0]).to.have.property('Seq');",
													"    pm.expect(jsonData.value[0]).to.have.property('ImageData');",
													"    pm.expect(jsonData.value[0]).to.have.property('DisplayMode');",
													"    pm.expect(jsonData.value[0]).to.have.property('HelpLink');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/AdminModules",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"AdminModules"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Admin Tabs",
					"item": [
						{
							"name": "Test Happy Path",
							"item": [
								{
									"name": "Create new Admin Tabs",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Verify Id and Name values in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('AdminTab_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Disabled');",
													"  pm.expect(jsonData).to.have.property('Sequence');",
													"});",
													"",
													"pm.test(\"Store category Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"AdminTab_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"ADMIN_TAB_\"+Date.now()",
													"    pm.globals.set(\"AdminTab_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n  \"Disabled\": true,\r\n  \"Name\": \"{{AdminTab_post_name}}\",\r\n  \"Sequence\": 99\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/AdminTabs",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"AdminTabs"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "Get Admin Tabs(Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Verify Id and Name values in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('AdminTab_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Disabled');",
													"  pm.expect(jsonData).to.have.property('Sequence');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/AdminTabs({{AdminTab_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"AdminTabs({{AdminTab_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Admin Tabs",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"AT_PATCH_NAME\"+Date.now()",
													"    pm.globals.set(\"AdminTab_patch_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Name\": \"{{AdminTab_patch_name}}\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/AdminTabs({{AdminTab_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"AdminTabs({{AdminTab_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Admin Tabs",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"AT_PUT_NAME\"+Date.now()",
													"    pm.globals.set(\"AdminTab_put_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Id\": {{AdminTab_get_id}},\r\n\t\"Name\": \"{{AdminTab_put_name}}\",\r\n\t\"Disabled\": true,\r\n\t\"Sequence\": 99\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/AdminTabs({{AdminTab_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"AdminTabs({{AdminTab_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Admin Tabs",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify correct fields are displayed in response.\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('Disabled');",
													"    pm.expect(jsonData.value[0]).to.have.property('Sequence');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/AdminTabs",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"AdminTabs"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "CachingSegments",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "Post CachingSegments  with Children",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d462c0cb-4faa-43d3-a0f7-7eb39417487a",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"   var name = \"SEGMENT_\"+Date.now()",
													"   pm.globals.set(\"CachingSegment_post_segment\", name);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a230c04a-e479-4db9-b68e-89e1733b4e46",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Response has Id and Name values', function() {",
													" pm.expect(jsonData).to.have.property('Id');",
													" pm.expect(jsonData).to.have.property('Segment');",
													" pm.expect(jsonData.Segment).to.eql(pm.variables.get('CachingSegment_post_segment'));",
													"});",
													"",
													"pm.test('Response has other fields present', function () {",
													"   pm.expect(jsonData).to.have.property('IsCustom');",
													"   pm.expect(jsonData).to.have.property('Key');",
													"   pm.expect(jsonData).to.have.property('Volatility');",
													"   pm.expect(jsonData).to.have.property('IsolationLevel');",
													"   pm.expect(jsonData).to.have.property('Description');",
													"});",
													"",
													"pm.test(\"Store Segment Id\", function () {",
													"   var id = jsonData.Id;",
													"   pm.globals.set(\"CachingSegment_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Segment\": \"{{CachingSegment_post_segment}}\",\n  \"Volatility\": 2,\n  \"IsolationLevel\": 2,\n  \"Description\": \"Postman Post Test\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/CachingSegments",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CachingSegments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get CachingSegments with children",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b8c9058-0b18-4111-b3d4-6396631da6b5",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Response has Id and Name values', function() {",
													" pm.expect(jsonData).to.have.property('Id');",
													" pm.expect(jsonData).to.have.property('Segment');",
													" pm.expect(jsonData.Segment).to.eql(pm.variables.get('CachingSegment_post_segment'));",
													"});",
													"",
													"pm.test('Response has other fields present', function () {",
													"   pm.expect(jsonData).to.have.property('IsCustom');",
													"   pm.expect(jsonData).to.have.property('Key');",
													"   pm.expect(jsonData).to.have.property('Volatility');",
													"   pm.expect(jsonData).to.have.property('IsolationLevel');",
													"   pm.expect(jsonData).to.have.property('Description');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/CachingSegments({{CachingSegment_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CachingSegments({{CachingSegment_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch CachingSegments Class",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0cfc7a4a-0fea-490a-bbfa-ed0dec8d5ed2",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"   pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"Description\": \"Postman Post Patch Test-caching segment description\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/CachingSegments({{CachingSegment_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CachingSegments({{CachingSegment_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put CachingSegments Class",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2b562b61-bbe6-440a-9a50-496dd8cbbcf3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "97b6d085-d644-4684-a6f8-a66a38822ace",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"   pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Id\":{{CachingSegment_get_id}},\n  \"Segment\": \"{{CachingSegment_post_segment}}\",\n  \"Volatility\": 2,\n  \"IsolationLevel\": 2,\n  \"Description\": \"Postman Post Put Test-caching segment description\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/CachingSegments({{CachingSegment_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CachingSegments({{CachingSegment_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All CachingSegments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b39fbfc0-14ba-4764-8af2-c9f2faab3e7e",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Response has values as non empty collection', function() {",
													" pm.expect(jsonData).to.have.property('value');",
													" pm.expect(jsonData.value).to.have.lengthOf.above(0)",
													"});",
													"",
													"pm.test('Verify all keys are present in first item of list', function () {",
													" pm.expect(jsonData.value[0]).to.have.property('Id');",
													" pm.expect(jsonData.value[0]).to.have.property('Segment');",
													" pm.expect(jsonData.value[0]).to.have.property('IsCustom');",
													" pm.expect(jsonData.value[0]).to.have.property('Key');",
													" pm.expect(jsonData.value[0]).to.have.property('Volatility');",
													" pm.expect(jsonData.value[0]).to.have.property('IsolationLevel');",
													" pm.expect(jsonData.value[0]).to.have.property('Description');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/CachingSegments",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CachingSegments"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Delete CachingSegments Class",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a02265d7-d89a-4c59-8c6d-34d5c0ecbba6",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"   pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/CachingSegments({{CachingSegment_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CachingSegments({{CachingSegment_get_id}})"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "CachingServers",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "Post CachingServers with Children",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a8cc18a5-48af-4c45-91b3-c8fba1d7d1b8",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Response has Id and Name values', function() {",
													" pm.expect(jsonData).to.have.property('Id');",
													" pm.expect(jsonData).to.have.property('ServerName');",
													" pm.expect(jsonData.ServerName).to.eql(pm.variables.get('CachingServer_post_name'));",
													"});",
													"",
													"pm.test('Response has other fields present', function () {",
													"   pm.expect(jsonData).to.have.property('ActionUrl');",
													"   pm.expect(jsonData).to.have.property('RetryMaxAttemts');",
													"   pm.expect(jsonData).to.have.property('RetryInterval');",
													"});",
													"",
													"pm.test(\"Store Caching Segment Id\", function () {",
													"   var id = jsonData.Id;",
													"   pm.globals.set(\"CachingServer_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7c6a3249-43b8-4d24-9be9-8e75e0dceeec",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"   var name = \"SERVER_NAME_\"+Date.now()",
													"   pm.globals.set(\"CachingServer_post_name\", name);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"ServerName\": \"{{CachingServer_post_name}}\",\n  \"ActionUrl\": \"http://rnddev01-win7/Maint_UI/\",\n  \"RetryMaxAttemts\": 1,\n  \"RetryInterval\": 2\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/CachingServers",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CachingServers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get CachingServers with children",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e1abfd6d-4b07-490a-b9a0-ddcd03b34d39",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Response has Id and Name values', function() {",
													" pm.expect(jsonData).to.have.property('Id');",
													" pm.expect(jsonData).to.have.property('ServerName');",
													" pm.expect(jsonData.ServerName).to.eql(pm.variables.get('CachingServer_post_name'));",
													"});",
													"",
													"pm.test('Response has other fields present', function () {",
													"   pm.expect(jsonData).to.have.property('ActionUrl');",
													"   pm.expect(jsonData).to.have.property('RetryMaxAttemts');",
													"   pm.expect(jsonData).to.have.property('RetryInterval');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/CachingServers({{CachingServer_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CachingServers({{CachingServer_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch CachingServers Class",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a259a898-1b93-407c-956b-23df351ac88e",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"   pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"ServerName\": \"POSTMANPATCH\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/CachingServers({{CachingServer_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CachingServers({{CachingServer_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put CachingServers Class",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a0985247-5388-4c34-a49a-a0ab51e7426a",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"   pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Id\":{{CachingServer_get_id}},\n  \"ServerName\": \"POSTMANPUT\",\n  \"ActionUrl\": \"http://rnddev01-win7/Maint_UI/\",\n  \"RetryMaxAttemts\": 1,\n  \"RetryInterval\": 2\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/CachingServers({{CachingServer_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CachingServers({{CachingServer_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All CachingServers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c4b29aaa-bf57-4c39-bd6d-49e8d635ccfb",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Response has values as non empty collection', function() {",
													" pm.expect(jsonData).to.have.property('value');",
													" pm.expect(jsonData.value).to.have.lengthOf.above(0)",
													"});",
													"",
													"pm.test('Verify all keys are present in first item of list', function () {",
													" pm.expect(jsonData.value[0]).to.have.property('Id');",
													" pm.expect(jsonData.value[0]).to.have.property('ServerName');",
													" pm.expect(jsonData.value[0]).to.have.property('ActionUrl');",
													" pm.expect(jsonData.value[0]).to.have.property('RetryMaxAttemts');",
													" pm.expect(jsonData.value[0]).to.have.property('RetryInterval');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/CachingServers",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CachingServers"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Delete CachingServers Class",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44acf476-4b67-4d91-94ab-1ea819773caa",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"   pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/CachingServers({{CachingServer_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CachingServers({{CachingServer_get_id}})"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ConditionalMacros",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "Post ConditionalMacros",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "22ea0e3e-edc4-48a4-9615-5ca0346dc627",
												"exec": [
													"pm.test(\"Set dynamic value for ConditionalMacroName\", function () {",
													"    var Name = \"POST_\"+Date.now()",
													"    pm.globals.set(\"ConditionalMacros_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "04644fcf-d024-4d0c-a305-2329c14b0159",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Response has Name values', function() {",
													"  ",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('ConditionalMacros_post_name'));",
													"});",
													"",
													"",
													"pm.test('Response has other fields present', function () {",
													"  pm.expect(jsonData).to.have.property('Condition');",
													"  pm.expect(jsonData).to.have.property('Description');",
													"  pm.expect(jsonData).to.have.property('Name');",
													" ",
													" ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"Name\": \"{{ConditionalMacros_post_name}}\",\n            \"Description\": \"\",\n            \"Condition\": \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>  <macifelse>    <if seq=\\\"0\\\">      <!-->Var 1 as static or another macro-->      <var1>@DOCFLD|AI_Release_Data@</var1>      <!-->operator depends on the dtype       Available dtypes:(opr)       STRING:(=,!=,Begins With,Ends With,Contains,IN)       NUMBER:(=,!=,<,>,<=,>=,IN)       DECIMAL:(=,!=,<,>,<=,>=,IN)       DATETIME:(=,!=,<,>,<=,>=,IN,Year,Month,Day,Minute,Second,MilliSecond)       LENGTH:(=,!=,<,>,<=,>=,IN)       BOOLEAN:(AND,OR)          -->      <opr>!=</opr>      <!--Compare with var1-->      <var2></var2>      <!-- Return value-->      <then>True</then>      <!-->Avaliable dtypes       STRING       NUMBER       DECIMAL       DATETIME       LENGTH       BOOLEAN              -->      <dtype></dtype>    </if>      <else>      <then>False</then>    </else>  </macifelse>\",\n            \"CreatedById\": 1,\n            \"CreatedDate\": \"2015-11-18T13:13:20.03-05:00\",\n            \"ModifiedById\": 1,\n            \"ModifiedDate\": \"2015-11-18T13:13:20.03-05:00\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ConditionalMacros",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ConditionalMacros"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ConditionalMacros with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dc545993-36d9-4660-be85-338aec435ec4",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify UserGroupName and UserGroupID of the UserGroup after patch operation\", function () {",
													"   ",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('ConditionalMacros_post_name'));",
													"",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ConditionalMacros('{{ConditionalMacros_post_name}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ConditionalMacros('{{ConditionalMacros_post_name}}')"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Patch ConditionalMacros",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9c1e0d7-0022-4664-b58f-4a9f9bbb8f1b",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"   pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Description\": \"Macro Description Postman Patch update\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ConditionalMacros('{{ConditionalMacros_post_name}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ConditionalMacros('{{ConditionalMacros_post_name}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put ConditionalMacros",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e10c9350-03b9-405f-934e-7c1214e78af7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "35ce9825-1819-4567-9367-5b25331b7a62",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \n    \"Name\": \"{{ConditionalMacros_post_name}}\",\n    \"Description\": \"\",\n      \"Condition\": \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\r\\n<macifelse>\\r\\n\\t<if seq=\\\"0\\\">\\r\\n\\t\\t<!-->Var 1 as static or another macro-->\\r\\n\\t\\t<var1>@DOCTYPEID</var1>\\r\\n\\t\\t<!-->operator depends on the dtype\\r\\n     Available dtypes:(opr)\\r\\n     STRING:(=,!=,Begins With,Ends With,Contains,IN)\\r\\n     NUMBER:(=,!=,<,>,<=,>=,IN)\\r\\n     DECIMAL:(=,!=,<,>,<=,>=,IN)\\r\\n     DATETIME:(=,!=,<,>,<=,>=,IN,Year,Month,Day,Minute,Second,MilliSecond)\\r\\n     LENGTH:(=,!=,<,>,<=,>=,IN)\\r\\n     BOOLEAN:(AND,OR)    \\r\\n    -->\\r\\n\\t\\t<opr>=</opr>\\r\\n\\t\\t<!--Compare with var1-->\\r\\n\\t\\t<var2>100018</var2>\\r\\n\\t\\t<!-- Return value-->\\r\\n\\t\\t<then>TRUE</then>\\r\\n\\t\\t<!-->Avaliable dtypes\\r\\n     STRING\\r\\n     NUMBER\\r\\n     DECIMAL\\r\\n     DATETIME\\r\\n     LENGTH\\r\\n     BOOLEAN        \\r\\n    -->\\r\\n\\t\\t<dtype>STRING</dtype>\\r\\n\\t</if>\\r\\n\\t<else>\\r\\n\\t\\t<then>FALSE</then>\\r\\n\\t</else>\\r\\n</macifelse>\",\n    \"CreatedById\": 1,\n    \"CreatedDate\": \"2019-04-12T07:23:05.4586591-04:00\",\n    \"ModifiedById\": 1,\n    \"ModifiedDate\": \"2019-04-12T07:23:05.4586591-04:00\"\n}\n\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/ConditionalMacros('{{ConditionalMacros_post_name}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ConditionalMacros('{{ConditionalMacros_post_name}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All ConditionalMacros",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c724e71-8e1d-486b-9a7d-132de2e241d3",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify category values are listed\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ConditionalMacros",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ConditionalMacros"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Delete ConditionalMacros",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "30c6155f-1dfd-4eb8-9059-cd1739c962f2",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{SiteURL}}api/ConditionalMacros('{{ConditionalMacros_post_name}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ConditionalMacros('{{ConditionalMacros_post_name}}')"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Configurations",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "Post Configurations with Children",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d7dfbf89-2cd6-4614-b0a8-c5e647686866",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"   var name = \"CONFIG_NAME_\"+Date.now()",
													"   pm.globals.set(\"ParamName_post_paramname\", name);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7edf5950-8e0d-4918-af58-5c2eaaf5bca2",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Response has Param Name values', function() {",
													"   pm.expect(jsonData).to.have.property('ParamName');",
													"   pm.expect(jsonData.ParamName).to.eql(pm.variables.get('ParamName_post_paramname'));",
													"});",
													"",
													"pm.test('Response has other fields present', function () {",
													"   pm.expect(jsonData).to.have.property('ParamType');",
													"   pm.expect(jsonData).to.have.property('Value');",
													"   pm.expect(jsonData).to.have.property('Description');",
													"   pm.expect(jsonData).to.have.property('Category');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											},
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ParamName\": \"{{ParamName_post_paramname}}\",\r\n  \"Value\": \"Test Value\",\r\n  \"Description\": \"Add new configuration\",\r\n  \"ParamType\": 0,\r\n  \"Category\": \"Cat A\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Configurations",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Configurations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Configurations with Children",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7a2a0cc-e374-49b8-bba0-2467a65ffed3",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"   pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response has Param Name values', function() {\r",
													"   pm.expect(jsonData).to.have.property('ParamName');\r",
													"   pm.expect(jsonData.ParamName).to.eql(pm.variables.get('ParamName_post_paramname'));\r",
													"});\r",
													"\r",
													"pm.test('Response has other fields present', function () {\r",
													"   pm.expect(jsonData).to.have.property('ParamType');\r",
													"   pm.expect(jsonData).to.have.property('Value');\r",
													"   pm.expect(jsonData).to.have.property('Description');\r",
													"   pm.expect(jsonData).to.have.property('Category');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/Configurations('{{ParamName_post_paramname}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Configurations('{{ParamName_post_paramname}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Configurations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ecf7341-eb71-41b2-ba18-27a32873a28e",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"   pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"Description\": \"Postman patch test\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Configurations('{{ParamName_post_paramname}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Configurations('{{ParamName_post_paramname}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Configurations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "68ef4683-d5ef-4a07-bb6e-f3be053b6832",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ParamName\": \"{{ParamName_post_paramname}}\",\r\n  \"Value\": \"Test Value\",\r\n  \"Description\": \"Postman Put Test\",\r\n  \"ParamType\": 0,\r\n  \"Category\": \"Cat A\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Configurations('{{ParamName_post_paramname}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Configurations('{{ParamName_post_paramname}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Configurations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "53e09b29-22d0-45c5-b6da-dd86cef340c9",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Response has values as non empty collection', function() {",
													" pm.expect(jsonData).to.have.property('value');",
													" pm.expect(jsonData.value).to.have.lengthOf.above(0)",
													"});",
													"",
													"pm.test('Verify all keys are present in first item of list', function () {",
													" pm.expect(jsonData.value[0]).to.have.property('ParamName');",
													" pm.expect(jsonData.value[0]).to.have.property('ParamType');",
													" pm.expect(jsonData.value[0]).to.have.property('Value');",
													" pm.expect(jsonData.value[0]).to.have.property('Description');",
													" pm.expect(jsonData.value[0]).to.have.property('Category');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											},
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/Configurations",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Configurations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Configurations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b83682b9-7ae9-4917-88af-286c3d7d60b2",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/Configurations('{{ParamName_post_paramname}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Configurations('{{ParamName_post_paramname}}')"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "CustomMacros",
					"item": [
						{
							"name": "Test-Happy path",
							"item": [
								{
									"name": "Create new CustomMacros",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Verify Id and Name values present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('CustomMacro_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response', function() {",
													"  pm.expect(jsonData).to.have.property('Description');",
													"  pm.expect(jsonData).to.have.property('Assembly');",
													"  pm.expect(jsonData).to.have.property('Class');",
													"  pm.expect(jsonData).to.have.property('AdminUrl');",
													"  pm.expect(jsonData).to.have.property('Config');",
													"});",
													"",
													"pm.test(\"Store Custom Macro Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"CustomMacro_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"CUSTOM_MACRO_NAME_\"+Date.now()",
													"    pm.globals.set(\"CustomMacro_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Name\": \"{{CustomMacro_post_name}}\",\r\n  \"Description\": \"Test macro Description Postman\",\r\n  \"Assembly\":\"{{CustomMacro_post_name}}\",\r\n  \"Class\":\"{{CustomMacro_post_name}}\",\r\n  \"AdminUrl\": \"\",\r\n  \"Config\": null\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/CustomMacros",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CustomMacros"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "Get CustomMacros(Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Verify Id and Name values present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('CustomMacro_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response', function() {",
													"  pm.expect(jsonData).to.have.property('Description');",
													"  pm.expect(jsonData).to.have.property('Assembly');",
													"  pm.expect(jsonData).to.have.property('Class');",
													"  pm.expect(jsonData).to.have.property('AdminUrl');",
													"  pm.expect(jsonData).to.have.property('Config');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/CustomMacros('{{CustomMacro_post_name}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CustomMacros('{{CustomMacro_post_name}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch CustomMacros",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Description\": \"Patch custom macros\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/CustomMacros('{{CustomMacro_post_name}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CustomMacros('{{CustomMacro_post_name}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put CustomMacros",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PUT_\"+Date.now()",
													"    pm.globals.set(\"categories_put_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Id\":{{CustomMacro_get_id}},\r\n  \"Name\": \"{{CustomMacro_post_name}}\",\r\n  \"Description\": \"put custom macros\",\r\n  \"Assembly\":\"{{CustomMacro_post_name}}\",\r\n  \"Class\":\"{{CustomMacro_post_name}}\",\r\n  \"AdminUrl\": \"\",\r\n  \"Config\": null\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/CustomMacros('{{CustomMacro_post_name}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CustomMacros('{{CustomMacro_post_name}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All CustomMacros",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify correct fields are displayed in response.\", function () {",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('Assembly');",
													"    pm.expect(jsonData.value[0]).to.have.property('Class');",
													"    pm.expect(jsonData.value[0]).to.have.property('AdminUrl');",
													"    pm.expect(jsonData.value[0]).to.have.property('Config');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/CustomMacros",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"CustomMacros"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "DataTableProviderTypes",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "EmailNotifications",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Post EmailNotifications",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "239fdb9d-d558-439e-84f1-603e8251177b",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"EMAIL_TYPE_\"+Date.now()",
													"    pm.globals.set(\"EmailNotification_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "01cb327e-4795-4b87-9167-dc59e78bda03",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Verify Email Type values present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('EmailType');",
													"  pm.expect(jsonData.EmailType).to.eql(pm.variables.get('EmailNotification_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response', function() {",
													"  pm.expect(jsonData).to.have.property('IsDisabled');",
													"  pm.expect(jsonData).to.have.property('From');",
													"  pm.expect(jsonData).to.have.property('ReplyTo');",
													"  pm.expect(jsonData).to.have.property('ReturnReceiptTo');",
													"  pm.expect(jsonData).to.have.property('Subject');",
													"  pm.expect(jsonData).to.have.property('Body');",
													"  pm.expect(jsonData).to.have.property('BodyFormat');",
													"  pm.expect(jsonData).to.have.property('Priority');",
													"  pm.expect(jsonData).to.have.property('DeferredDelivery');",
													"  pm.expect(jsonData).to.have.property('SendAllbcc');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"EmailType\": \"{{EmailNotification_post_name}}\",\n  \"From\": \"@CURUSEREMAIL\",\n  \"ReplyTo\": \"@CURUSEREMAIL\",\n  \"ReturnReceiptTo\": \"@CURUSEREMAIL\",\n  \"To\": \"@CustVar|ProductSupportEmail@\",\n  \"Subject\": \"[EPM - Desktop-Integrator] Error - @MyComputerName@ - @CURUSERNAME\",\n  \"Body\": \"Message:\",\n  \"BodyFormat\": 0,\n  \"Priority\": 2,\n  \"DeferredDelivery\": \"@CURUSEREMAIL\",\n  \"SendAllbcc\": 0,\n  \"IsDisabled\": true\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/EmailNotifications",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailNotifications"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All EmailNotifications with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0019abb0-65a1-46a1-866b-399eb1006252",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Verify Email Type values present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('EmailType');",
													"  pm.expect(jsonData.EmailType).to.eql(pm.variables.get('EmailNotification_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response', function() {",
													"  pm.expect(jsonData).to.have.property('IsDisabled');",
													"  pm.expect(jsonData).to.have.property('From');",
													"  pm.expect(jsonData).to.have.property('ReplyTo');",
													"  pm.expect(jsonData).to.have.property('ReturnReceiptTo');",
													"  pm.expect(jsonData).to.have.property('Subject');",
													"  pm.expect(jsonData).to.have.property('Body');",
													"  pm.expect(jsonData).to.have.property('BodyFormat');",
													"  pm.expect(jsonData).to.have.property('Priority');",
													"  pm.expect(jsonData).to.have.property('DeferredDelivery');",
													"  pm.expect(jsonData).to.have.property('SendAllbcc');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/EmailNotifications('{{EmailNotification_post_name}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailNotifications('{{EmailNotification_post_name}}')"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Patch EmailNotifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "538f90c1-52b9-411d-be22-296d5b7798f2",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Body\": \"Message: Postman Patch\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/EmailNotifications('{{EmailNotification_post_name}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailNotifications('{{EmailNotification_post_name}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put EmailNotifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9ea6cc1-0962-4274-89ce-c38ffdd69543",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"EmailType\": \"{{EmailNotification_post_name}}\",\n  \"From\": \"@CURUSEREMAIL\",\n  \"ReplyTo\": \"@CURUSEREMAIL\",\n  \"ReturnReceiptTo\": \"@CURUSEREMAIL\",\n  \"To\": \"@CustVar|ProductSupportEmail@\",\n  \"Subject\": \"[EPM - Desktop-Integrator] Error - @MyComputerName@ - @CURUSERNAME\",\n  \"Body\": \"Postman Put\",\n  \"BodyFormat\": 0,\n  \"Priority\": 2,\n  \"DeferredDelivery\": \"@CURUSEREMAIL\",\n  \"SendAllbcc\": 0,\n  \"IsDisabled\": true\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/EmailNotifications('{{EmailNotification_post_name}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailNotifications('{{EmailNotification_post_name}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All EmailNotifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5dcbb089-19bf-40d7-a6b5-0f536886eed1",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify correct fields are displayed in response.\", function () {",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('EmailType');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsDisabled');",
													"    pm.expect(jsonData.value[0]).to.have.property('From');",
													"    pm.expect(jsonData.value[0]).to.have.property('ReplyTo');",
													"    pm.expect(jsonData.value[0]).to.have.property('ReturnReceiptTo');",
													"    pm.expect(jsonData.value[0]).to.have.property('Subject');",
													"    pm.expect(jsonData.value[0]).to.have.property('Body');",
													"    pm.expect(jsonData.value[0]).to.have.property('BodyFormat');",
													"    pm.expect(jsonData.value[0]).to.have.property('Priority');",
													"    pm.expect(jsonData.value[0]).to.have.property('DeferredDelivery');",
													"    pm.expect(jsonData.value[0]).to.have.property('SendAllbcc');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/EmailNotifications",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailNotifications"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Delete EmailNotifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2b458db-e149-4e04-842e-aeb369548350",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{SiteURL}}api/EmailNotifications('{{EmailNotification_post_name}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailNotifications('{{EmailNotification_post_name}}')"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "EmailOffice365Configurations",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "GlobalVariables",
					"item": [
						{
							"name": "Test- Happy Path",
							"item": [
								{
									"name": "Post GlobalVariables with Children",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0d9c1d21-731f-41fa-b8dd-6e5dddb3d921",
												"exec": [
													"pm.test(\"Set dynamic value for Globalvariables\", function () {\r",
													"\r",
													"  var Name = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 9);\r",
													"  pm.globals.set(\"Globalvariable_name_post\", Name);\r",
													"    \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "709cfc1c-2289-43c1-962a-836c37e8ad88",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Response has Name values', function() {",
													"",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('Globalvariable_name_post'));",
													" ",
													"});",
													"",
													"pm.test(\"Store USerGroupId\", function () {",
													"    var Id = jsonData.Id;",
													"    pm.globals.set(\"Globalvariable_id\", Id);",
													"});",
													"",
													"pm.test('Response has other fields present', function () {",
													"  pm.expect(jsonData).to.have.property('Accessibility');",
													"  pm.expect(jsonData).to.have.property('Value');",
													"",
													" ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t   \"Id\": 0,\n      \"Name\": \"{{Globalvariable_name_post}}\",\n      \"Description\": \"string\",\n      \"Value\": \"string\",\n      \"Type\": 0,\n      \"Accessibility\": \"Public\",\n      \"CreatedById\": 0,\n      \"CreatedDate\": \"2019-04-15T09:03:41.749Z\",\n      \"ModifiedById\": 0,\n      \"ModifiedDate\": \"2019-04-15T09:03:41.749Z\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/GlobalVariables",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"GlobalVariables"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get GlobalVariables with children",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "49b7f4ed-3b12-46b8-adc3-d8f6ff28a6a7",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/GlobalVariables({{Globalvariable_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"GlobalVariables({{Globalvariable_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch GlobalVariables Class",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86206a83-ad5f-4cb8-84c8-5504974fea1c",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Description\": \"Postman Post Patch Test\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/GlobalVariables({{Globalvariable_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"GlobalVariables({{Globalvariable_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put GlobalVariables Class",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c53e9f11-c9f0-4529-a79c-5cbdb75ab002",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t   \"Id\":{{Globalvariable_id}},\n      \"Name\": \"Hybridfield\",\n      \"Description\": \"string\",\n      \"Value\": \"string\",\n      \"Type\": 0,\n      \"Accessibility\": \"Public\",\n      \"CreatedById\": 0,\n      \"CreatedDate\": \"2019-04-15T09:03:41.749Z\",\n      \"ModifiedById\": 0,\n      \"ModifiedDate\": \"2019-04-15T09:03:41.749Z\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/GlobalVariables('{{Globalvariable_id}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"GlobalVariables('{{Globalvariable_id}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All GlobalVariables",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fea1da3-109e-4b39-8e50-a696e6b08a7a",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify category values are listed\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/GlobalVariables",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"GlobalVariables"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Holidays",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "HolidaySchemes",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "HybridFields",
					"item": [
						{
							"name": "Test-Happy path",
							"item": [
								{
									"name": "Post HybridFields with Children",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f584075b-a76b-4e0d-b576-e6ff114c7672",
												"exec": [
													"pm.test(\"Set dynamic value for Hybridfields\", function () {\r",
													"\r",
													"  var Name = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 9);\r",
													"  pm.globals.set(\"Hybridfield_name_post\", Name);\r",
													"    \r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5b5d681a-6e87-4b2b-bb5a-e4c1c79cbdba",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Response has Name values', function() {",
													"",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('Hybridfield_name_post'));",
													" ",
													"});",
													"",
													"pm.test(\"Store HybridfieldId\", function () {",
													"    var Id = jsonData.Id;",
													"    pm.globals.set(\"Hybridfield_id\", Id);",
													"});",
													"",
													"pm.test('Response has other fields present', function () {",
													"  pm.expect(jsonData).to.have.property('ViewText');",
													"  pm.expect(jsonData).to.have.property('ViewHelpText');",
													"",
													" ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\n  \n {\n \n  \"Name\": \"{{Hybridfield_name_post}}\",\n  \"ViewText\": \"string\",\n  \"ViewHelpText\": \"string\",\n  \"TableName\": \"string\",\n  \"WhereText\": \"string\",\n  \"ReturnRows\": 0,\n  \"SeparateBy\": \"string\"\n \n \n}\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/HybridFields",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"HybridFields"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get HybridFields with children",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b39372f6-1280-4be7-8b08-9777059d6d40",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/HybridFields('{{Hybridfield_name_post}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"HybridFields('{{Hybridfield_name_post}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch HybridFields Class",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "184cd1a0-0b78-408d-b33e-ad5daf725217",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"ViewText\":  \"Postman Post Patch Test\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/HybridFields('{{Hybridfield_name_post}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"HybridFields('{{Hybridfield_name_post}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put HybridFields Class",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6dc8496a-169d-48b5-b0ef-f977023e9abe",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Id\": {{Hybridfield_id}},\r\n  \"Name\": \"{{Hybridfield_name_post}}\",\r\n  \"ViewText\": \"View Text\",\r\n  \"ViewHelpText\": \"string\",\r\n  \"TableName\": \"string\",\r\n  \"WhereText\": \"string\",\r\n  \"ReturnRows\": 0,\r\n  \"SeparateBy\": \"string\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/HybridFields('{{Hybridfield_name_post}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"HybridFields('{{Hybridfield_name_post}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All HybridFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "106862c8-2a43-476e-b869-ec5d8e254598",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify Hybrid fields values are listed\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/HybridFields",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"HybridFields"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Delete HybridField",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f215491f-7b97-4b83-8d0a-0ec5373d2e8b",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/HybridFields('{{Hybridfield_name_post}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"HybridFields('{{Hybridfield_name_post}}')"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Menus Access",
					"item": [
						{
							"name": "Test- Happy Path",
							"item": [
								{
									"name": "Get All Menus",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "375252f4-a14b-486f-b6fa-1a79f49769d4",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify Users values are listed\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsHeader');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsDisabled');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/Menus",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Menus"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Get Menus with children",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/Menus(103)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Menus(103)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Menu Class",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ea425e48-60ea-49c7-a039-05b75266ef64",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Description = \"PUT_\"+Date.now()",
													"    pm.globals.set(\"menu_put_description\", Description);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "dd3d7321-0b79-4cb2-9f81-1e91a40e0521",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Description\": \"{{menu_put_description}}\",\n  \"Url\": \"http://www.savanainc.com\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Menus(105)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Menus(105)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Menu Class",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5b4121ba-13df-4b11-9b36-e678d4d0b26b",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PUT_\"+Date.now()",
													"    pm.globals.set(\"categories_put_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ec7a03d7-94c8-4169-918a-46566fc33d03",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"IsHeader\": false,\n  \"IsDisabled\": false,\n  \"IsModalWindow\": false,\n  \"IsCollapsible\": false,\n  \"Id\": 105,\n  \"Name\": \"Test123\",\n  \"Description\": \"PostMan Test Put Menu\",\n  \"Url\": \"http://www.savanainc.com\",\n  \"HeaderUrl\": \"images/i_menu_my_work_beta.gif\",\n  \"Sequence\": 29,\n  \"AssemblyName\": null,\n  \"ClassName\": null,\n  \"WindowArgument\": null\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Menus(105)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Menus(105)"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Stamps",
					"item": [
						{
							"name": "Test- Happy path",
							"item": [
								{
									"name": "Post Stamps",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b8fb29d0-22d3-4647-a892-0700b652bf0f",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"   var name = \"POST_\"+Date.now()",
													"   pm.globals.set(\"StampsName_post\", name);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ec23010e-83a5-456f-b449-73bd5bbf5f2b",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Response has Stamp Names', function() {",
													"   pm.expect(jsonData).to.have.property('Name');",
													"   pm.expect(jsonData.Name).to.eql(pm.variables.get('StampsName_post'));",
													"});",
													"",
													"pm.test(\"Store StampId\", function () {",
													"    var Id = jsonData.Id;",
													"    pm.globals.set(\"Stamp_id\", Id);",
													"});",
													"",
													"pm.test('Response has other fields present', function () {",
													"   pm.expect(jsonData).to.have.property('IsBold');",
													"   pm.expect(jsonData).to.have.property('IsItalic');",
													"   pm.expect(jsonData).to.have.property('IsUnderline');",
													"   pm.expect(jsonData).to.have.property('Type');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"IsBold\": true,\n      \"IsItalic\": true,\n      \"IsUnderline\": false,\n      \"IsStrikeOut\": false,\n       \"Name\": \"{{StampsName_post}}\",\n      \"Type\": 1,\n      \"Text\": \"Postman test\",\n      \"Image\": \"R0lGODlhGAAVAOZ/AOjUhfPnnPaWIvLag/ayZKmDSvalRvXGjfW2bO7YefWqUeW8OsqsZPavXPScM/SaLypbhP7y5PXZtvWhPUltf0lzmPawWv3u3DhjivXAgc62lPq2Zt+6KfW5cvXOnfXDhfrTpf/58/r9/vXTqPWeOP3lx/ibK/zQncmthreSXvTdvvfwrKp7J4G/3uDNhtfSk/WcKOHKd6C80erPZcWgTL7IzvW+efzfvenNX56yveLo7vi3aMKYLvPq1+fKWOG9M7aJJvfVq4WVnc+RNu3k1/jAffWXJ9vJr+PUlvH09/n28mebvbSuocTQ3JetweTu9eC7Lty7wajDxef1/a/H2m98guqmIeHSvPXQotHt/B5OeeTFyefbyujS1uXFS86lJfPgxOajQoehuPaiMsyVTPihOWmJprjX6vmvVvi+fJ/Ez/WrVvatVebIUbPY6rvS4oKerKyAOrqVUMGgXrXE01d8nPXWr0tmbfHgi09qdpCUjvXKlevSbHGLlfeUHf///yH5BAEAAH8ALAAAAAAYABUAAAf/gH+Cg4SFhoeIiYgXHhkIaReKhxEjElgZDQYhkoVBKj0SBwQTIIdNOocHdiojHwQkBIUVEBhadIYZB3sHHQoORYROdRgQZxVmSYQgCAgECiQPN39XGkwYT1FUWXBLGIQbEwYTDg9GBilzSHlvWyJTQm59LYMnH34CRkYCCgphKysUZHQRUSNHHzXz/kQwIcGPw4cNBwR4cUePhgIF4kiBIGiDBQ8PH4IhMSZGHDkMXAQIwCCPmD8l/NhAENLhAQt+hgDAg2dAggQ0qghC46fDhJp+2LDxA4PPDBw+2njhwUWhwzVI/ZhQ4HDBgh9QOHBgoQSmwwdZ/aD1Y+ULDyAsJ1KgELTQj5G0d/2QQXGEiKEQJ3aUQWrCwokInAZFKME4sePHkAkFAgA7\",\n      \"Width\": 250,\n      \"Height\": 100,\n      \"FontName\": \"Times New Roman\",\n      \"FontSize\": 10,\n      \"Topleft\": 1,\n      \"Topmiddle\": 1,\n      \"Topright\": 1,\n      \"Centerleft\": 1,\n      \"Center\": 1,\n      \"CenterRight\": 1,\n      \"BottomLeft\": 1,\n      \"BottomMiddle\": 1,\n      \"FillColor\": 0,\n      \"BottomRight\": 1,\n      \"IsTransParentFillColor\": 1,\n      \"AllowCustom\": 0,\n      \"CustomMenuLabel\": \"\",\n      \"CustomTop\": 0,\n      \"CustomLeft\": 0,\n      \"BrushColor\": 52224,\n      \"BrushSize\": 0\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Stamps",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Stamps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Stamps with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36067806-aa64-4a54-940d-5d43db8cd7c8",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/Stamps({{Stamp_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Stamps({{Stamp_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Stamps",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04d3a14b-7ddf-43e1-b92f-43d348be839b",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"Text\":\"Postman test patch update\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Stamps({{Stamp_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Stamps({{Stamp_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Stamps",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bed2fe91-d137-4803-8182-5412329a2f92",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"IsBold\": true,\n  \"IsItalic\": true,\n  \"IsUnderline\": false,\n  \"IsStrikeOut\": false,\n  \"Id\": {{Stamp_id}},\n  \"Name\": \"{{StampsName_post}}\",\n  \"Type\": 1,\n  \"Text\": \"Postman test put update\",\n  \"Image\": null,\n  \"Width\": 250,\n  \"Height\": 100,\n  \"FontName\": \"Times New Roman\",\n  \"FontSize\": 10,\n  \"Topleft\": 1,\n  \"Topmiddle\": 1,\n  \"Topright\": 1,\n  \"Centerleft\": 1,\n  \"Center\": 1,\n  \"CenterRight\": 1,\n  \"BottomLeft\": 1,\n  \"BottomMiddle\": 1,\n  \"FillColor\": 0,\n  \"BottomRight\": 1,\n  \"IsTransParentFillColor\": 1,\n  \"AllowCustom\": 0,\n  \"CustomMenuLabel\": \"\",\n  \"CustomTop\": 0,\n  \"CustomLeft\": 0,\n  \"BrushColor\": 52224,\n  \"BrushSize\": 0\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Stamps({{Stamp_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Stamps({{Stamp_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Stamps",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c8e7e1c-a517-4019-985a-01485d628fa9",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify Stamps values are listed\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/Stamps",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Stamps"
											]
										},
										"description": "Retrieves all DocType Property Interfaces records"
									},
									"response": []
								},
								{
									"name": "Delete Stamps",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e454e13-8703-4af8-aaa3-81523c65ea92",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{SiteURL}}api/Stamps({{Stamp_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Stamps({{Stamp_id}})"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "System Registrations",
					"item": [
						{
							"name": "Test- Happy path",
							"item": [
								{
									"name": "Get SystemRegistrations with children",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9186e521-b616-43b0-8e34-8eae31de05ca",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/SystemRegistrations('abc')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SystemRegistrations('abc')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All SystemRegistrations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "504c6c9f-c353-4884-8b82-4b47034aa72b",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify Hybrid fields values are listed\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Division');",
													"    pm.expect(jsonData.value[0]).to.have.property('City');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/SystemRegistrations",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SystemRegistrations"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "UIdGenerators",
					"item": [
						{
							"name": "Test- Happy path",
							"item": [
								{
									"name": "Post UIdGenerators",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6e6a6e38-1367-441a-b76e-3ef70a38ec14",
												"exec": [
													"pm.test(\"Set dynamic value for UIDGenerator\", function () {",
													"   var name = \"POST_\"+Date.now()",
													"   pm.globals.set(\"UIdGenerator\", name);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8d7749be-9da1-4be2-94eb-0f456fa6d4dd",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Response has Stamp Names', function() {",
													"   pm.expect(jsonData).to.have.property('Name');",
													"   pm.expect(jsonData.Name).to.eql(pm.variables.get('UIdGenerator'));",
													"});",
													"",
													"pm.test(\"Store StampId\", function () {",
													"    var Id = jsonData.Id;",
													"    pm.globals.set(\"UIdGenerator_id\", Id);",
													"});",
													"",
													"pm.test('Response has other fields present', function () {",
													"   pm.expect(jsonData).to.have.property('Description');",
													"   pm.expect(jsonData).to.have.property('Type');",
													"   pm.expect(jsonData).to.have.property('TableName');",
													"   pm.expect(jsonData).to.have.property('Seed');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n      \"Name\": \"{{UIdGenerator}}\",\n      \"Description\": \"UId Generator Postman Description\",\n      \"Type\": 0,\n      \"TableName\": \"autogen100000\",\n      \"Seed\": 1,\n      \"IsDisabled\": false\n     \n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UIdGenerators",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UIdGenerators"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All UIdGenerators with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f1f0d240-89ab-41e7-b1d5-3b7d65244af0",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/UIdGenerators({{UIdGenerator_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UIdGenerators({{UIdGenerator_id}})"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Patch UIdGenerators",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9179576c-a028-4ed8-9346-b08e9f23f2df",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Description\": \"UId Generator Postman Description Patch update\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UIdGenerators({{UIdGenerator_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UIdGenerators({{UIdGenerator_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put UIdGenerators",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7baf5dbf-f9cf-43fb-80ee-0e358a28c233",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"IsDisabled\": false,\n  \"Id\": {{UIdGenerator_id}},\n  \"Name\": \"{{UIdGenerator}}\",\n  \"Description\": \"UId Generator Postman Description Put update\",\n  \"Type\": 0,\n  \"TableName\": \"autogen100000\",\n  \"Seed\": 1\n  \n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UIdGenerators({{UIdGenerator_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UIdGenerators({{UIdGenerator_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All UIdGenerators",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "459b8ed3-d858-446e-97b0-5790298a7699",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify All UIdGenerators values are listed\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/UIdGenerators",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UIdGenerators"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "UserAdminSecurity",
					"item": [
						{
							"name": "Test-Happy path",
							"item": [],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "UserConfigs",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "UserMasterConfigurations",
					"item": [
						{
							"name": "Test-Happy path",
							"item": [
								{
									"name": "Post UserMasterConfigurations",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a93bec59-a0e4-4152-ae2f-64394647f6a1",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"   var name = \"POST_\"+Date.now()",
													"   pm.globals.set(\"UserMasterConfigurationName\", name);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0def8fe6-90b4-4a96-88aa-7a913c18f68a",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Response has User Master Configurations Names', function() {",
													"   pm.expect(jsonData).to.have.property('Name');",
													"   pm.expect(jsonData.Name).to.eql(pm.variables.get('UserMasterConfigurationName'));",
													"});",
													"",
													"",
													"pm.test('Response has other fields present', function () {",
													"   pm.expect(jsonData).to.have.property('Type');",
													"   pm.expect(jsonData).to.have.property('Description');",
													"   pm.expect(jsonData).to.have.property('SubType');",
													"   pm.expect(jsonData).to.have.property('Value');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n      \"Name\": \"{{UserMasterConfigurationName}}\",\n      \"Value\": \"\",\n      \"Type\": 0,\n      \"Help\": \"\",\n      \"Params\": \"\",\n      \"Description\": \"Postman Config Post Description.\",\n      \"SubType\": 0\n     \n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserMasterConfigurations",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserMasterConfigurations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All UserMasterConfigurations with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52cdb7a7-e6a9-4a61-9d1e-19733e77d6bb",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify UserMaster Configurations after patch operation\", function () {",
													"   ",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('UserMasterConfigurationName'));",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/UserMasterConfigurations('{{UserMasterConfigurationName}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserMasterConfigurations('{{UserMasterConfigurationName}}')"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Patch UserMasterConfigurations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf91db0f-92c4-41e8-997e-a65a96f96ea6",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"   pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Description\": \"Postman Config Patch update.\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserMasterConfigurations('{{UserMasterConfigurationName}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserMasterConfigurations('{{UserMasterConfigurationName}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put UserMasterConfigurations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c9fe393-5b2b-42fa-b06a-76b3f9b9a18b",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Name\": \"{{UserMasterConfigurationName}}\",\n  \"Value\": \"\",\n  \"Type\": 0,\n  \"Help\": \"\",\n  \"Params\": \"\",\n  \"Description\": \"Postman Config Put.\",\n  \"SubType\": 0,\n  \"CreatedById\": 1,\n  \"CreatedDate\": \"2017-04-25T08:25:30.267-04:00\",\n  \"ModifiedById\": 1,\n  \"ModifiedDate\": \"2017-04-25T09:05:22.737-04:00\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/UserMasterConfigurations('{{UserMasterConfigurationName}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserMasterConfigurations('{{UserMasterConfigurationName}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All UserMasterConfigurations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f6a1aee-e803-42f6-ba27-85be08a55146",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify other values are listed\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('SubType');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/UserMasterConfigurations",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"UserMasterConfigurations"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "UserMenus",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ViewerConfigurations",
					"item": [
						{
							"name": "Test-Happy path",
							"item": [
								{
									"name": "Post ViewerConfigurations with Children",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2c26c42c-890a-48fc-8c1b-2bdfba10b322",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"   var name = \"POST_\"+Date.now()",
													"   pm.globals.set(\"ViewerConfigurationKey\", name);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "470a0d8b-c2f1-4606-be6f-b7be8624f19c",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Response has User Master Configurations Names', function() {",
													"   pm.expect(jsonData).to.have.property('Name');",
													"   pm.expect(jsonData.Name).to.eql(pm.variables.get('ViewerConfigurationKey'));",
													"});",
													"",
													"",
													"pm.test('Response has other fields present', function () {",
													"   pm.expect(jsonData).to.have.property('Value');",
													"   pm.expect(jsonData).to.have.property('Description');",
													"   pm.expect(jsonData).to.have.property('CreatedById');",
													"  ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Key\": \"{{ViewerConfigurationKey}}\",\n  \"Value\": \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>  <!-- Root Node for Configuration -->  <EPMViewer>    <DefaultResolution>96</DefaultResolution></EPMViewer>  \",\n  \"Description\": \"Postman Post Configuration\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ViewerConfigurations",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ViewerConfigurations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ViewerConfigurations with children",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31ba2ff7-8152-44db-8890-1517d2c041aa",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify ViewerConfigurations with childern after PUT\", function () {",
													"   ",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('ViewerConfigurationKey'));",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ViewerConfigurations('{{ViewerConfigurationKey}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ViewerConfigurations('{{ViewerConfigurationKey}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch ViewerConfigurations Class",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "82ec4729-8fc2-4902-b2ca-c7c0b36711f9",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"   pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Description\":  \"Postman Post Patch Test\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ViewerConfigurations('{{ViewerConfigurationKey}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ViewerConfigurations('{{ViewerConfigurationKey}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put ViewerConfigurations Class",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aae6abad-bfb5-4692-88df-4203a0c3cb7c",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Key\": \"{{ViewerConfigurationKey}}\",\n  \"Value\": \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>  <!-- Root Node for Configuration -->  <EPMViewer>    <DefaultResolution>96</DefaultResolution></EPMViewer>  \",\n  \"Description\": \"Postman Post Patch Put Test\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ViewerConfigurations('{{ViewerConfigurationKey}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ViewerConfigurations('{{ViewerConfigurationKey}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All ViewerConfigurations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad42a5b7-2830-4d28-a056-a55e1a965b2c",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify category values are listed\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('Value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Key');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ViewerConfigurations",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ViewerConfigurations"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Delete ViewerConfigurations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b50f75b9-1961-46a4-83f0-350f22e83573",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ViewerConfigurations('{{ViewerConfigurationKey}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ViewerConfigurations('{{ViewerConfigurationKey}}')"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f99030fe-a794-4c94-910b-3a1a9a8b8e8d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "176a2f60-ed7c-4d5f-ad68-36fb371df172",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "03 FieldDefination",
			"item": [
				{
					"name": "FieldMasks",
					"item": [
						{
							"name": "Test-Happy path",
							"item": [
								{
									"name": "Create new FieldMasks",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Verify Id and Name field values in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('FieldMasks_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Expression');",
													"  pm.expect(jsonData).to.have.property('Replacement');",
													"  pm.expect(jsonData).to.have.property('CreatedById');",
													"});",
													"",
													"pm.test(\"Store Field Mask Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"FieldMasks_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"Field_Mask_\"+Date.now()",
													"    pm.globals.set(\"FieldMasks_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"Name\": \"{{FieldMasks_post_name}}\",\r\n \"Expression\": \"\\\\W\",\r\n \"Replacement\": \"M\",\r\n \"Enabled\": true\r\n}\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/FieldMasks",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"FieldMasks"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "Get FieldMasks(Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Verify Id and Name field values in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('FieldMasks_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Expression');",
													"  pm.expect(jsonData).to.have.property('Replacement');",
													"  pm.expect(jsonData).to.have.property('CreatedById');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/FieldMasks({{FieldMasks_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"FieldMasks({{FieldMasks_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch FieldMasks",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Replacement\": \"Postman patch test\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/FieldMasks({{FieldMasks_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"FieldMasks({{FieldMasks_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put FieldMasks",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Id\": {{FieldMasks_get_id}},\r\n\t\"Name\": \"{{FieldMasks_post_name}}\",\r\n\t\"Expression\": \"\\\\W\",\r\n\t\"Replacement\": \"Postman put test\",\r\n\t\"Enabled\": true\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/FieldMasks({{FieldMasks_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"FieldMasks({{FieldMasks_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All FieldMasks",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify all fields are present in response.\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('Expression');",
													"    pm.expect(jsonData.value[0]).to.have.property('Replacement');",
													"    pm.expect(jsonData.value[0]).to.have.property('CreatedById');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/FieldMasks",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"FieldMasks"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Fields",
					"item": [
						{
							"name": "Test-Happy path",
							"item": [
								{
									"name": "Create new Fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Verify Id and Name values in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('Fields_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('ForeignDataSourceId');",
													"  pm.expect(jsonData).to.have.property('ColumnName');",
													"  pm.expect(jsonData).to.have.property('FieldMask');",
													"  pm.expect(jsonData).to.have.property('MinFieldLength');",
													"  pm.expect(jsonData).to.have.property('FieldLength');",
													"  pm.expect(jsonData).to.have.property('CategoryType');",
													"  pm.expect(jsonData).to.have.property('FieldType');",
													"  pm.expect(jsonData).to.have.property('Description');",
													"});",
													"",
													"pm.test(\"Store Fields Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"Fields_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"FIELD_NAME_\"+Date.now()",
													"    pm.globals.set(\"Fields_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"FieldPrecision\": 0,\r\n    \"Name\": \"{{Fields_post_name}}\",\r\n\t\"Description\": \"Postman Test field\",\r\n    \"FieldType\": 2,\r\n    \"CategoryType\": 1,\r\n    \"FieldLength\": 2000,\r\n    \"MinFieldLength\": 0,\r\n    \"ColumnName\": \"{{Fields_post_name}}\",\r\n    \"FieldMask\": \"\",\r\n    \"ForeignDataSourceId\": 0\r\n}\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/Fields",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Fields"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "Get Fields(Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Verify Id and Name values in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('Fields_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('ForeignDataSourceId');",
													"  pm.expect(jsonData).to.have.property('ColumnName');",
													"  pm.expect(jsonData).to.have.property('FieldMask');",
													"  pm.expect(jsonData).to.have.property('MinFieldLength');",
													"  pm.expect(jsonData).to.have.property('FieldLength');",
													"  pm.expect(jsonData).to.have.property('CategoryType');",
													"  pm.expect(jsonData).to.have.property('FieldType');",
													"  pm.expect(jsonData).to.have.property('Description');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/Fields({{Fields_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Fields({{Fields_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Description\": \"Postman patch test - Fields\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Fields({{Fields_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Fields({{Fields_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Id\":{{Fields_get_id}},\r\n    \"FieldPrecision\": 0,\r\n    \"Name\": \"{{Fields_post_name}}\",\r\n\t\"Description\": \"Postman put test - Fields\",\r\n    \"FieldType\": 2,\r\n    \"CategoryType\": 1,\r\n    \"FieldLength\": 2000,\r\n    \"MinFieldLength\": 0,\r\n    \"ColumnName\": \"{{Fields_post_name}}\",\r\n    \"FieldMask\": \"\",\r\n    \"ForeignDataSourceId\": 0\r\n}\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/Fields({{Fields_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Fields({{Fields_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify all fields are present in response.\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('ForeignDataSourceId');",
													"    pm.expect(jsonData.value[0]).to.have.property('ColumnName');",
													"    pm.expect(jsonData.value[0]).to.have.property('FieldMask');",
													"    pm.expect(jsonData.value[0]).to.have.property('MinFieldLength');",
													"    pm.expect(jsonData.value[0]).to.have.property('FieldLength');",
													"    pm.expect(jsonData.value[0]).to.have.property('CategoryType');",
													"    pm.expect(jsonData.value[0]).to.have.property('FieldType');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/Fields",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Fields"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ForeignDataSources",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Lookup values",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Lookups",
					"item": [],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "04 DocumentClassification",
			"item": [
				{
					"name": "Action Audit Types",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Doc Classes",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Get All Doc Classes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9fdba49a-e304-436a-b538-469fb53e6ba2",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify Users values are listed\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsSearchEnabled');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsManaged');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/DocClasses",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocClasses"
											]
										},
										"description": "Retrieves all doc table records"
									},
									"response": []
								},
								{
									"name": "Post Doc Classes with Children",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"IsSearchEnabled\": true,\n  \"IsManaged\": true,\n  \"DocClassName\": \"PostmanDocClass33\",\n  \"DocClassDescription\": \"Postman Doc class desc33\",\n  \"CustomFlags\": null,\n  \"DocTableId\": 1134,\n  \"DocClassView\": null,\n  \"SearchInterfaceId\": 1,\n  \"DocumentInterfaceId\": 0,\n  \"RecordsManagementId\": 1,\n  \"StoragePathId\": 1,\n  \"StorageServerId\": 1,\n  \"InterfaceConfig\": null\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocClasses",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocClasses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Doc Classes with children",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/DocClasses(2)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocClasses(2)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Doc Classes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6616889d-bc72-4aec-ba6c-5ae57815fce9",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var DocClassDescription = \"PATCH_\"+Date.now()",
													"    pm.globals.set(\"DocClassDescription\", DocClassDescription);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "77bfc4c4-bac7-4e6d-a790-b045e624deb3",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"DocClassDescription\": \"{{DocClassDescription}}\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocClasses(2)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocClasses(2)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Doc Classes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "be0af77f-e1e6-418f-a93f-4e2a0dc6deb7",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PUT_\"+Date.now()",
													"    pm.globals.set(\"DocClasses_put_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a3ee1185-d38a-4056-8f73-6835b4233e0a",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"IsSearchEnabled\": true,\n  \"IsManaged\": true,\n  \"DocClassId\": 100,\n  \"DocClassName\": \"Test123\",\n  \"DocClassDescription\": \"{{DocClasses_put_name}}\",\n  \"CustomFlags\": null,\n  \"DocTableId\": 100,\n  \"DocClassView\": null,\n  \"SearchInterfaceId\": 1,\n  \"DocumentInterfaceId\": 0,\n  \"RecordsManagementId\": 1,\n  \"StoragePathId\": 1,\n  \"StorageServerId\": 1,\n  \"InterfaceConfig\": null\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocClasses(100)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocClasses(100)"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Doc Interfaces",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Doc Tables",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Doc Types",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Get All DocTypes",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/DocTypes",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTypes"
											]
										},
										"description": "Retrieves all DocType Property Interfaces records"
									},
									"response": []
								},
								{
									"name": "Get DocType with key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d47b0274-c3da-4497-8aba-6664cd09bfdf",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the Doc Type\", function () {",
													"    var jsonData = pm.response.json();",
													"  pm.expect(jsonData).to.have.property('AutoTitleFlag');",
													"  pm.expect(jsonData).to.have.property('UseDefaultWmiConfig');",
													"  pm.expect(jsonData).to.have.property('ContentMode');",
													"  pm.expect(jsonData).to.have.property('AllowDeleteAllPages');",
													"  pm.expect(jsonData).to.have.property('Disabled');",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData).to.have.property('CustomFlags');",
													"  pm.expect(jsonData).to.have.property('DocClassId');",
													"  pm.expect(jsonData).to.have.property('AutoTitle');",
													"  pm.expect(jsonData).to.have.property('AssemblyName');",
													"  pm.expect(jsonData).to.have.property('AssemblyClassName');",
													"  pm.expect(jsonData).to.have.property('AdminAssemblyName');",
													"  pm.expect(jsonData).to.have.property('AdminAssemblyClassName');",
													"  pm.expect(jsonData).to.have.property('Url');",
													"  pm.expect(jsonData).to.have.property('PropInterfaceId');",
													"  pm.expect(jsonData).to.have.property('WmConfigData');",
													"  pm.expect(jsonData).to.have.property('WmiInterfaceId');",
													"  pm.expect(jsonData).to.have.property('IndexContent');",
													"  pm.expect(jsonData).to.have.property('LibraryId');",
													"  pm.expect(jsonData).to.have.property('AuditControlType');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/DocTypes(500)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTypes(500)"
											]
										},
										"description": "Get DocType with key =500"
									},
									"response": []
								},
								{
									"name": "Get DocType  with children",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/DocTypes?key=500&$expand=WmInterface",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTypes"
											],
											"query": [
												{
													"key": "key",
													"value": "500"
												},
												{
													"key": "$expand",
													"value": "WmInterface"
												}
											]
										},
										"description": "Get doctype property interface (key =1) with doctypes using it."
									},
									"response": []
								},
								{
									"name": "Patch DocType",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b96cbcc9-c3b1-4e1e-813a-55e6fd60bf11",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PATCH_\"+Date.now()",
													"    pm.globals.set(\"DocType_patch_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a1d414a9-fc2a-45ea-9238-bcc7f851ad4f",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											},
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Name\": \"{{DocType_patch_name}}\"\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocTypes(501)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTypes(501)"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put DocTypes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1e85a5bf-40d8-4fdc-8ece-33f91981efba",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PUT_\"+Date.now()",
													"    pm.globals.set(\"DocTypes_put_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1d42369e-39ec-40e4-87c2-2a8db84de5b3",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"value": "{ \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\" }"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"AutoTitleFlag\": true,\n  \"UseDefaultWmiConfig\": false,\n  \"ContentMode\": 2,\n  \"AllowDeleteAllPages\": false,\n  \"Disabled\": false,\n  \"Id\": 501,\n  \"Name\": \"{{DocTypes_put_name}}\",\n  \"CustomFlags\": \"\",\n  \"DocClassId\": 101,\n  \"AutoTitle\": \"%DT% - %-1000% - %DCD%\",\n  \"AssemblyName\": \"\",\n  \"AssemblyClassName\": \"\",\n  \"AdminAssemblyName\": \"WMI/DefaultWMI/Admin/WMIAdminMenu.aspx\",\n  \"AdminAssemblyClassName\": \"\",\n  \"Url\": \"\",\n  \"PropInterfaceId\": 1,\n  \"WmConfigData\": \"\",\n  \"WmiInterfaceId\": 1000,\n  \"IndexContent\": 0,\n  \"LibraryId\": 0,\n  \"AuditControlType\": 0\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DocTypes(501)",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DocTypes(501)"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "DocClassFields",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "DocEvent Interfaces",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "DocEvents",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "DocTableFields",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "DocType Prop Interfaces",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "DocTypeFields",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "DocTypes ExternalData",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "External Data Interfaces",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "ExtFieldSetConfigs",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "ExtFieldSetItemDocFields",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "ExtFieldSetItems",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "ExtFieldSets",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Wm Interfaces",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Wmi Segments",
					"item": [],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "51490a9e-1e9a-4da0-9e6b-d75661644e2c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "174eccbd-b144-4e8d-a470-33152bad5d7f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "05 SearchManagement",
			"item": [
				{
					"name": "Edms",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Create new Edms",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Verify Id and Name field value in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('Edms_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Type');",
													"  pm.expect(jsonData).to.have.property('Description');",
													"  pm.expect(jsonData).to.have.property('Configuration');",
													"  pm.expect(jsonData).to.have.property('WebFormUrl');",
													"});",
													"",
													"pm.test(\"Store category Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"Edms_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"EDM_NAME_\"+Date.now()",
													"    pm.globals.set(\"Edms_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Name\": \"{{Edms_post_name}}\",\r\n\t\"Type\": 0,\r\n\t\"Description\": \"Create new EDM\",\r\n\t\"Configuration\": \"\",\r\n\t\"WebFormUrl\": \"\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Edms",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Edms"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "Get Edms(Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Verify Id and Name field value in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('Edms_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Type');",
													"  pm.expect(jsonData).to.have.property('Description');",
													"  pm.expect(jsonData).to.have.property('Configuration');",
													"  pm.expect(jsonData).to.have.property('WebFormUrl');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/Edms({{Edms_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Edms({{Edms_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Edms",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Description\": \"Postman patch - EDM\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Edms({{Edms_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Edms({{Edms_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Edms",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Id\":{{Edms_get_id}},\r\n\t\"Name\": \"{{Edms_post_name}}\",\r\n\t\"Type\": 0,\r\n\t\"Description\": \"Postman put - EDM\",\r\n\t\"Configuration\": \"\",\r\n\t\"WebFormUrl\": \"\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Edms({{Edms_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Edms({{Edms_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Edms",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify all fields are present in response.\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('Type');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('Configuration');",
													"    pm.expect(jsonData.value[0]).to.have.property('WebFormUrl');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/Edms",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Edms"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "EdmSearchClasses",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "EdmUserGroups",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "SearchClassDocClasses",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "SearchClasses",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "SearchClassFields",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "SearchClassFieldSorts",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "SearchClassForeignDataSources",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "SearchClassUserGroups",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "SearchInterfaces",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Create new Seach Interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Verify Id and Name values in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('SearchInterface_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('IsWorkflow');",
													"  pm.expect(jsonData).to.have.property('Description');",
													"  pm.expect(jsonData).to.have.property('ClassName');",
													"  pm.expect(jsonData).to.have.property('AssemblyName');",
													"  pm.expect(jsonData).to.have.property('Configuration');",
													"  pm.expect(jsonData).to.have.property('AdminUrl');",
													"});",
													"",
													"pm.test(\"Store Search Interface Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"SearchInterface_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"Search_Interface_Name_\"+Date.now()",
													"    pm.globals.set(\"SearchInterface_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"IsWorkflow\": false,\r\n\t\"Name\": \"{{SearchInterface_post_name}}\",\r\n\t\"Description\": \"Create new search interface\",\r\n\t\"ClassName\": \"{{SearchInterface_post_name}}\",\r\n\t\"AssemblyName\": \"{{SearchInterface_post_name}}\",\r\n\t\"Configuration\": null,\r\n\t\"AdminUrl\": null\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/SearchInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchInterfaces"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "Get Search Interface with Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Verify Id and Name values in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('SearchInterface_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('IsWorkflow');",
													"  pm.expect(jsonData).to.have.property('Description');",
													"  pm.expect(jsonData).to.have.property('ClassName');",
													"  pm.expect(jsonData).to.have.property('AssemblyName');",
													"  pm.expect(jsonData).to.have.property('Configuration');",
													"  pm.expect(jsonData).to.have.property('AdminUrl');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/SearchInterfaces({{SearchInterface_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchInterfaces({{SearchInterface_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Search Interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Description\": \"Postman Patch - Search Interface\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/SearchInterfaces({{SearchInterface_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchInterfaces({{SearchInterface_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Search Interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Id\":{{SearchInterface_get_id}},\r\n\t\"IsWorkflow\": false,\r\n\t\"Name\": \"{{SearchInterface_post_name}}\",\r\n\t\"Description\": \"Postman put - Search Interface\",\r\n\t\"ClassName\": \"{{SearchInterface_post_name}}\",\r\n\t\"AssemblyName\": \"{{SearchInterface_post_name}}\",\r\n\t\"Configuration\": null,\r\n\t\"AdminUrl\": null\r\n}\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/SearchInterfaces({{SearchInterface_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchInterfaces({{SearchInterface_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Search Interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify all fields are present in response.\", function () {",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('IsWorkflow');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('ClassName');",
													"    pm.expect(jsonData.value[0]).to.have.property('AssemblyName');",
													"    pm.expect(jsonData.value[0]).to.have.property('Configuration');",
													"    pm.expect(jsonData.value[0]).to.have.property('AdminUrl');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/SearchInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"SearchInterfaces"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "af7e1493-789d-4620-a65f-64354778a2ab",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b8a0df8c-e5e5-4f3c-b642-99c7447f5120",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "06 BPMConfiguration",
			"item": [
				{
					"name": "Action Rule Type Interfaces",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "1. Create new category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Response has Id and Name values', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_post_name'));",
													"});",
													"",
													"",
													"pm.test(\"Store category Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"categories_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"POST_\"+Date.now()",
													"    pm.globals.set(\"categories_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"Name\": \"{{categories_post_name}}\",\r\n  \"Description\": \"PostMan Post Action Rule.\",\r\n  \"Class\": \"{{categories_post_name}}\",\r\n  \"AdminClass\": \"PostManPostActionRulesAdmin\",\r\n  \"Assembly\": \"{{categories_post_name}}\",\r\n  \"InterfaceGroupBy\": \"Process Instance Related\",\r\n  \"ImageId\": 0\r\n }"
										},
										"url": {
											"raw": "{{SiteURL}}api/ActionRuleTypeInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ActionRuleTypeInterfaces"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "2. Get Category (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the category\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_post_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('categories_get_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ActionRuleTypeInterfaces({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ActionRuleTypeInterfaces({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Patch Category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PATCH_\"+Date.now()",
													"    pm.globals.set(\"categories_patch_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Name\": \"{{categories_patch_name}}\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ActionRuleTypeInterfaces({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ActionRuleTypeInterfaces({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Get Category (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the category after patch operation\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_patch_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('categories_get_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ActionRuleTypeInterfaces({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ActionRuleTypeInterfaces({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Put Category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PUT_\"+Date.now()",
													"    pm.globals.set(\"categories_put_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\t\"Id\": {{categories_get_id}},\r\n\t\"Name\": \"{{categories_put_name}}\",\r\n  \"Description\": \"PostMan Post Action Rule.\",\r\n  \"Class\": \"{{categories_post_name}}\",\r\n  \"AdminClass\": \"PostManPostActionRulesAdmin\",\r\n  \"Assembly\": \"{{categories_post_name}}\",\r\n  \"InterfaceGroupBy\": \"Process Instance Related\",\r\n  \"ImageId\": 0\r\n }"
										},
										"url": {
											"raw": "{{SiteURL}}api/ActionRuleTypeInterfaces({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ActionRuleTypeInterfaces({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Get Category (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the category after put operation\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_put_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('categories_get_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ActionRuleTypeInterfaces({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ActionRuleTypeInterfaces({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Get All Categories",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify category values are listed\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ActionRuleTypeInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ActionRuleTypeInterfaces"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Action Type Interfaces",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Create new Action Type Interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Verify Id and Name values are present in Response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('ActionTypeInterface_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Description');",
													"  pm.expect(jsonData).to.have.property('Class');",
													"  pm.expect(jsonData).to.have.property('AdminClass');",
													"  pm.expect(jsonData).to.have.property('Assembly');",
													"  pm.expect(jsonData).to.have.property('ImageId');",
													"});",
													"",
													"pm.test(\"Store Action Type Interface Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"ActionTypeInterface_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"Action_Type_Interface_Name_\"+Date.now()",
													"    pm.globals.set(\"ActionTypeInterface_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Name\": \"{{ActionTypeInterface_post_name}}\",\r\n\t\"Description\": \"Create new action type interface\",\r\n\t\"Class\": \"{{ActionTypeInterface_post_name}}\",\r\n\t\"AdminClass\": \"PostManRouteAdmin\",\r\n\t\"Assembly\": \"{{ActionTypeInterface_post_name}}\",\r\n\t\"ImageId\": 0\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ActionTypeInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ActionTypeInterfaces"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "Get Action Type Interface with Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Verify Id and Name values are present in Response.', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('ActionTypeInterface_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response.', function() {",
													"  pm.expect(jsonData).to.have.property('Description');",
													"  pm.expect(jsonData).to.have.property('Class');",
													"  pm.expect(jsonData).to.have.property('AdminClass');",
													"  pm.expect(jsonData).to.have.property('Assembly');",
													"  pm.expect(jsonData).to.have.property('ImageId');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ActionTypeInterfaces({{ActionTypeInterface_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ActionTypeInterfaces({{ActionTypeInterface_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Action Type Interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Description\": \"Postman pacth - Action Type Interface\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ActionTypeInterfaces({{ActionTypeInterface_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ActionTypeInterfaces({{ActionTypeInterface_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Action Type Interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Id\":{{ActionTypeInterface_get_id}},\r\n\t\"Name\": \"{{ActionTypeInterface_post_name}}\",\r\n\t\"Description\": \"Postman put - Action type interface\",\r\n\t\"Class\": \"{{ActionTypeInterface_post_name}}\",\r\n\t\"AdminClass\": \"PostManRouteAdmin\",\r\n\t\"Assembly\": \"{{ActionTypeInterface_post_name}}\",\r\n\t\"ImageId\": 0\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ActionTypeInterfaces({{ActionTypeInterface_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ActionTypeInterfaces({{ActionTypeInterface_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Action Type Interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify all fields are present in response.\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"    pm.expect(jsonData.value[0]).to.have.property('Class');",
													"    pm.expect(jsonData.value[0]).to.have.property('AdminClass');",
													"    pm.expect(jsonData.value[0]).to.have.property('Assembly');",
													"    pm.expect(jsonData.value[0]).to.have.property('ImageId');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ActionTypeInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ActionTypeInterfaces"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "BPM User Groups",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "Create new BPM User Groups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Verify Id and Name values in response.', function() {",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('BPMUserGroups_post_name'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response', function() {",
													"    pm.expect(jsonData).to.have.property('Description');",
													"});",
													"",
													"pm.test(\"Store BPM User Group Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"BPMUserGroups_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"BPM_User_Group_Name\"+Date.now()",
													"    pm.globals.set(\"BPMUserGroups_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Name\": \"{{BPMUserGroups_post_name}}\",\r\n  \"Description\": \"PostMan Test Post BPM User Groups\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/BPMUserGroups",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"BPMUserGroups"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "Get BPM User Groups (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Verify Id and Name values in response.', function() {",
													"    pm.expect(jsonData).to.have.property('Id');",
													"    pm.expect(jsonData).to.have.property('Name');",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('BPMUserGroups_post_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('BPMUserGroups_get_id'));",
													"});",
													"",
													"pm.test('Verify other fields are present in response', function() {",
													"    pm.expect(jsonData).to.have.property('Description');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/BPMUserGroups({{BPMUserGroups_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"BPMUserGroups({{BPMUserGroups_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch BPM User Groups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Description\": \"PostMan Patch - BPM User Groups\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/BPMUserGroups({{BPMUserGroups_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"BPMUserGroups({{BPMUserGroups_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put BPM User Groups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Id\":{{BPMUserGroups_get_id}},\r\n\t\"Name\": \"{{BPMUserGroups_post_name}}\",\r\n\t\"Description\": \"PostMan Put - BPM User Groups\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/BPMUserGroups({{BPMUserGroups_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"BPMUserGroups({{BPMUserGroups_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All BPM User Groups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify all fields are present in response.\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/BPMUserGroups",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"BPMUserGroups"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "BPM User User Groups",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Duration Type Interfaces",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "1. Create new category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Response has Id and Name values', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_post_name'));",
													"});",
													"",
													"",
													"pm.test(\"Store category Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"categories_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"POST_\"+Date.now()",
													"    pm.globals.set(\"categories_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n   \"Name\": \"{{categories_post_name}}\",\r\n   \"Description\": \"PostMan Duration Type Test Engine Calculation Object\",\r\n   \"InterfaceClass\":\"{{categories_post_name}}\",\r\n   \"InterfaceAdminClass\":\"{{categories_post_name}}\",\r\n   \"InterfaceAssembly\":\"{{categories_post_name}}\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DurationTypeInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DurationTypeInterfaces"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "2. Get Category (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the category\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_post_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('categories_get_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/DurationTypeInterfaces({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DurationTypeInterfaces({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Patch Category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PATCH_\"+Date.now()",
													"    pm.globals.set(\"categories_patch_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Name\": \"{{categories_patch_name}}\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DurationTypeInterfaces({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DurationTypeInterfaces({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Get Category (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the category after patch operation\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_patch_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('categories_get_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/DurationTypeInterfaces({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DurationTypeInterfaces({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Put Category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PUT_\"+Date.now()",
													"    pm.globals.set(\"categories_put_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n  \t\"Id\": {{categories_get_id}},\r\n\t\"Name\": \"{{categories_put_name}}\",\r\n   \"Description\": \"PostMan Duration Type Test Engine Calculation Object\",\r\n   \"InterfaceClass\":\"{{categories_post_name}}\",\r\n   \"InterfaceAdminClass\":\"{{categories_post_name}}\",\r\n   \"InterfaceAssembly\":\"{{categories_post_name}}\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/DurationTypeInterfaces({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DurationTypeInterfaces({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Get Category (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the category after put operation\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_put_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('categories_get_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/DurationTypeInterfaces({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DurationTypeInterfaces({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Get All Categories",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify category values are listed\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/DurationTypeInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"DurationTypeInterfaces"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "LoadBalanceInterfaces",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [
								{
									"name": "1. Create new category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Response has Id and Name values', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_post_name'));",
													"});",
													"",
													"",
													"pm.test(\"Store category Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"categories_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"POST_\"+Date.now()",
													"    pm.globals.set(\"categories_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n   \"Name\": \"{{categories_post_name}}\",\r\n   \"Description\": \"PostMan Duration Type Test Engine Calculation Object\",\r\n   \"InterfaceClass\":\"{{categories_post_name}}\",\r\n   \"InterfaceAdminClass\":\"{{categories_post_name}}\",\r\n   \"InterfaceAssembly\":\"{{categories_post_name}}\",\r\n    \"ImageId\": 0,\r\n  \"IsManual\": false\r\n}\r\n\r\n\r\n\r\n\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/LoadBalanceInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"LoadBalanceInterfaces"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "2. Get Category (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the category\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_post_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('categories_get_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/LoadBalanceInterfaces({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"LoadBalanceInterfaces({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Patch Category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PATCH_\"+Date.now()",
													"    pm.globals.set(\"categories_patch_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Name\": \"{{categories_patch_name}}\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/LoadBalanceInterfaces({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"LoadBalanceInterfaces({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Get Category (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the category after patch operation\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_patch_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('categories_get_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/LoadBalanceInterfaces({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"LoadBalanceInterfaces({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Put Category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PUT_\"+Date.now()",
													"    pm.globals.set(\"categories_put_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n  \t\"Id\": {{categories_get_id}},\r\n\t\"Name\": \"{{categories_put_name}}\",\r\n   \"Description\": \"PostMan Duration Type Test Engine Calculation Object\",\r\n   \"InterfaceClass\":\"{{categories_post_name}}\",\r\n   \"InterfaceAdminClass\":\"{{categories_post_name}}\",\r\n   \"InterfaceAssembly\":\"{{categories_post_name}}\",\r\n     \"ImageId\": 0,\r\n  \"IsManual\": false\r\n}\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/LoadBalanceInterfaces({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"LoadBalanceInterfaces({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Get Category (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the category after put operation\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_put_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('categories_get_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/LoadBalanceInterfaces({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"LoadBalanceInterfaces({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Get All Categories",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify category values are listed\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/LoadBalanceInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"LoadBalanceInterfaces"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfAction Rules",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfActionAcls",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfActions",
					"item": [
						{
							"name": "Test-Happy path",
							"item": [
								{
									"name": "1. Create new category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Response has Id and Name values', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_post_name'));",
													"});",
													"",
													"",
													"pm.test(\"Store category Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"categories_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"POST_\"+Date.now()",
													"    pm.globals.set(\"categories_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n   \"Name\": \"{{categories_post_name}}\",\r\n   \"Description\": \"PostMan Duration Type Test Engine Calculation Object\",\r\n   \"InterfaceClass\":\"{{categories_post_name}}\",\r\n   \"InterfaceAdminClass\":\"{{categories_post_name}}\",\r\n   \"InterfaceAssembly\":\"{{categories_post_name}}\",\r\n    \"ImageId\": 0,\r\n  \"IsManual\": false\r\n}\r\n\r\n\r\n\r\n\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/LoadBalanceInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"LoadBalanceInterfaces"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "2. Get Category (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the category\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_post_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('categories_get_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/LoadBalanceInterfaces({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"LoadBalanceInterfaces({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Patch Category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PATCH_\"+Date.now()",
													"    pm.globals.set(\"categories_patch_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Name\": \"{{categories_patch_name}}\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/LoadBalanceInterfaces({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"LoadBalanceInterfaces({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Get Category (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the category after patch operation\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_patch_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('categories_get_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/LoadBalanceInterfaces({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"LoadBalanceInterfaces({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Put Category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PUT_\"+Date.now()",
													"    pm.globals.set(\"categories_put_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n  \t\"Id\": {{categories_get_id}},\r\n\t\"Name\": \"{{categories_put_name}}\",\r\n   \"Description\": \"PostMan Duration Type Test Engine Calculation Object\",\r\n   \"InterfaceClass\":\"{{categories_post_name}}\",\r\n   \"InterfaceAdminClass\":\"{{categories_post_name}}\",\r\n   \"InterfaceAssembly\":\"{{categories_post_name}}\",\r\n     \"ImageId\": 0,\r\n  \"IsManual\": false\r\n}\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/LoadBalanceInterfaces({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"LoadBalanceInterfaces({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Get Category (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the category after put operation\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_put_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('categories_get_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/LoadBalanceInterfaces({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"LoadBalanceInterfaces({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Get All Categories",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify category values are listed\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/LoadBalanceInterfaces",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"LoadBalanceInterfaces"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfActivities",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfActivityAcls",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfActivityDocTypeWmi",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfActivityTypeInterfaces",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfDeletedWfActionAndRules",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfEngineProcesses",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfEngineRegistries",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfGlobalProcessVariables",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfObjectCheckouts",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfProcessAcls",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfProcessDesignerRoles",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfProcesses",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfProcessRegistries",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "WfProcessVariables",
					"item": [],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4da424ee-4cf2-4ad6-934c-6bed59f1787f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cb874d34-f3f1-49bd-a98f-004bbb705046",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "07 StorageManagement",
			"item": [
				{
					"name": "ObjectTypes",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "1. Create new ObjectTypes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Response has Id and Name values', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Description');",
													"  pm.expect(jsonData).to.have.property('MimeType');",
													"  pm.expect(jsonData).to.have.property('CreatedById');",
													"  ",
													"  parseInt(pm.expect(jsonData.Id), 10)==(parseInt(pm.variables.get('categories_post_name'), 10));",
													"});",
													"",
													"pm.test(\"Store category Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"categories_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = Math.floor(Math.random() * (+7 - +99))+99;",
													"    pm.globals.set(\"categories_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n   \"Id\": \"{{categories_post_name}}{{categories_post_name}}\",\r\n  \"Description\": \"Postman Test\",\r\n  \"MimeType\": \"application/msexcel\",\r\n  \"CreatedById\": 1,\r\n  \"CreatedDate\": \"2003-06-30T00:00:00-04:00\",\r\n  \"ModifiedById\": 1,\r\n  \"ModifiedDate\": \"2003-06-30T00:00:00-04:00\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ObjectTypes",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ObjectTypes"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "2. Get ObjectTypes(Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"verify ID of the category\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('categories_get_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ObjectTypes('{{categories_post_name}}{{categories_post_name}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ObjectTypes('{{categories_post_name}}{{categories_post_name}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Patch ObjectTypes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PATCH_\"+Date.now()",
													"    pm.globals.set(\"categories_patch_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Description\": \"{{categories_patch_name}}\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ObjectTypes('{{categories_get_id}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ObjectTypes('{{categories_get_id}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Put ObjectTypes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PUT_\"+Date.now()",
													"    pm.globals.set(\"categories_put_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Id\": \"{{categories_post_name}}{{categories_post_name}}\",\r\n    \"Description\": \"{{categories_put_name}}\",\r\n    \"MimeType\": \"application/msexcel\",\r\n    \"CreatedById\": 1,\r\n    \"CreatedDate\": \"2019-03-26T07:33:30.12-04:00\",\r\n    \"ModifiedById\": 1,\r\n    \"ModifiedDate\": \"2019-03-26T07:46:29.52-04:00\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ObjectTypes('{{categories_post_name}}{{categories_post_name}}')",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ObjectTypes('{{categories_post_name}}{{categories_post_name}}')"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Get All ObjectTypes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify category values are listed\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Description');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ObjectTypes",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ObjectTypes"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "StorageServers",
					"item": [
						{
							"name": "Test-Happt Path",
							"item": [
								{
									"name": "1. Create new StorageServers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Response has Id and Name values', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('ReplicationPollingInterval');",
													"  pm.expect(jsonData).to.have.property('ReplicationLastPurge');",
													"  pm.expect(jsonData).to.have.property('Status');",
													"  pm.expect(jsonData).to.have.property('Type');",
													"  pm.expect(jsonData).to.have.property('ServiceAddress');",
													"  pm.expect(jsonData).to.have.property('Protocol');",
													"  pm.expect(jsonData).to.have.property('Port');",
													"  pm.expect(jsonData).to.have.property('PhysicalServer');",
													"  pm.expect(jsonData).to.have.property('ServerName');",
													"  ",
													"  pm.expect(jsonData.ServerName).to.eql(pm.variables.get('categories_post_name'));",
													"});",
													"",
													"pm.test(\"Store category Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"categories_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"POST_\"+Date.now()",
													"    pm.globals.set(\"categories_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"ServerName\": \"{{categories_post_name}}\",\r\n    \"PhysicalServer\": \"101\",\r\n    \"Port\": null,\r\n    \"Protocol\": \"SMTP\",\r\n    \"ServiceAddress\": null,\r\n    \"Type\": 1,\r\n    \"Status\": null,\r\n    \"ReplicationLastPurge\": null,\r\n    \"ReplicationPollingInterval\": null,\r\n    \"LocalDBConn\": \"111\",\r\n    \"License\": null,\r\n    \"ActiveCachePathId\": null,\r\n    \"ActiveReplicationEngineId\": null,\r\n    \"ReplicationLastActivity\": null,\r\n    \"IsEncrypted\": true,\r\n    \"SecurityCertificateId\": 1000000,\r\n    \"ExtendedProperties\": null,\r\n    \"CreatedById\": 101,\r\n    \"CreatedDate\": \"2019-03-07T05:04:26.84-05:00\",\r\n    \"ModifiedById\": 11,\r\n    \"ModifiedDate\": \"2019-03-07T05:04:26.84-05:00\"\r\n    \r\n}\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/StorageServers",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"StorageServers"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "2. Get StorageServers(Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the category\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.ServerName).to.eql(pm.variables.get('categories_post_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('categories_get_id'));",
													"    ",
													"    ",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('ReplicationPollingInterval');",
													"  pm.expect(jsonData).to.have.property('ReplicationLastPurge');",
													"  pm.expect(jsonData).to.have.property('Status');",
													"  pm.expect(jsonData).to.have.property('Type');",
													"  pm.expect(jsonData).to.have.property('ServiceAddress');",
													"  pm.expect(jsonData).to.have.property('Protocol');",
													"  pm.expect(jsonData).to.have.property('Port');",
													"  pm.expect(jsonData).to.have.property('PhysicalServer');",
													"  pm.expect(jsonData).to.have.property('ServerName');",
													"  ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/StorageServers({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"StorageServers({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Patch StorageServers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PATCH_\"+Date.now()",
													"    pm.globals.set(\"categories_patch_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ServerName\": \"{{categories_patch_name}}\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/StorageServers({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"StorageServers({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Put StorageServers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PUT_\"+Date.now()",
													"    pm.globals.set(\"categories_put_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n\r\n\r\n{\r\n   \t\"Id\": {{categories_get_id}},\r\n\t\"ServerName\": \"{{categories_put_name}}\",\r\n    \"PhysicalServer\": \"101\",\r\n    \"Port\": null,\r\n    \"Protocol\": \"SMTP\",\r\n    \"ServiceAddress\": null,\r\n    \"Type\": 1,\r\n    \"Status\": null,\r\n    \"ReplicationLastPurge\": null,\r\n    \"ReplicationPollingInterval\": null,\r\n    \"LocalDBConn\": \"111\",\r\n    \"License\": null,\r\n    \"ActiveCachePathId\": null,\r\n    \"ActiveReplicationEngineId\": null,\r\n    \"ReplicationLastActivity\": null,\r\n    \"IsEncrypted\": true,\r\n    \"SecurityCertificateId\": 1000000,\r\n    \"ExtendedProperties\": null,\r\n    \"CreatedById\": 101,\r\n    \"CreatedDate\": \"2019-03-07T05:04:26.84-05:00\",\r\n    \"ModifiedById\": 11,\r\n    \"ModifiedDate\": \"2019-03-07T05:04:26.84-05:00\"\r\n    \r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/StorageServers({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"StorageServers({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Get All StorageServers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify category values are listed\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('ServerName');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/StorageServers",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"StorageServers"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						},
						{
							"name": "Test-AWS Happy path",
							"item": [
								{
									"name": "1. Create new category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Response has Id and Name values', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('ServerName');",
													"  pm.expect(jsonData.ServerName).to.eql(pm.variables.get('categories_post_name'));",
													"});",
													"",
													"pm.test(\"Store category Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"categories_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"POST_\"+Date.now()",
													"    pm.globals.set(\"categories_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n\r\n{\r\n          \"ServerName\": \"{{categories_post_name}}\",\r\n            \"PhysicalServer\": \"101\",\r\n            \"Port\": null,\r\n            \"Protocol\": \"SMTP\",\r\n            \"ServiceAddress\": null,\r\n            \"Type\": 1,\r\n            \"Status\": null,\r\n            \"ReplicationLastPurge\": null,\r\n            \"ReplicationPollingInterval\": null,\r\n            \"LocalDBConn\": \"111\",\r\n            \"License\": null,\r\n            \"ActiveCachePathId\": null,\r\n            \"ActiveReplicationEngineId\": null,\r\n            \"ReplicationLastActivity\": null,\r\n            \"IsEncrypted\": true,\r\n            \"SecurityCertificateId\": 1000000,\r\n   \"ExtendedProperties\": null,\r\n            \"CreatedById\": 101,\r\n            \"CreatedDate\": \"2019-03-07T05:04:26.84-05:00\",\r\n            \"ModifiedById\": 11,\r\n            \"ModifiedDate\": \"2019-03-07T05:04:26.84-05:00\"\r\n        }\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/StorageServers",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"StorageServers"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "2. Get Category (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the category\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.ServerName).to.eql(pm.variables.get('categories_post_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('categories_get_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/StorageServers({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"StorageServers({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Patch Category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PATCH_\"+Date.now()",
													"    pm.globals.set(\"categories_patch_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ServerName\": \"{{categories_patch_name}}\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/StorageServers({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"StorageServers({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Get Category (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the category after patch operation\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.ServerName).to.eql(pm.variables.get('categories_patch_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('categories_get_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/StorageServers({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"StorageServers({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Put Category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PUT_\"+Date.now()",
													"    pm.globals.set(\"categories_put_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n\r\n\r\n{\r\n   \t\"Id\": {{categories_get_id}},\r\n\t\"ServerName\": \"{{categories_put_name}}\",\r\n      \"PhysicalServer\": \"101\",\r\n            \"Port\": null,\r\n            \"Protocol\": \"SMTP\",\r\n            \"ServiceAddress\": null,\r\n            \"Type\": 1,\r\n            \"Status\": null,\r\n            \"ReplicationLastPurge\": null,\r\n            \"ReplicationPollingInterval\": null,\r\n            \"LocalDBConn\": \"111\",\r\n            \"License\": null,\r\n            \"ActiveCachePathId\": null,\r\n            \"ActiveReplicationEngineId\": null,\r\n            \"ReplicationLastActivity\": null,\r\n            \"IsEncrypted\": true,\r\n            \"SecurityCertificateId\": 1000000,\r\n   \"ExtendedProperties\": null,\r\n            \"CreatedById\": 101,\r\n            \"CreatedDate\": \"2019-03-07T05:04:26.84-05:00\",\r\n            \"ModifiedById\": 11,\r\n            \"ModifiedDate\": \"2019-03-07T05:04:26.84-05:00\"\r\n           \r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/StorageServers({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"StorageServers({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Get Category (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the category after put operation\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.ServerName).to.eql(pm.variables.get('categories_put_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('categories_get_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/StorageServers({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"StorageServers({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Get All Categories",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify category values are listed\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('ServerName');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/StorageServers",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"StorageServers"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "741b3aa7-b447-40b1-a6c8-64d4eea69ca2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a5b9dbc2-725a-41dd-a8e2-a7e146dac9b7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "08 EmailSynchronization",
			"item": [
				{
					"name": "EmailSynchCategorizations",
					"item": [
						{
							"name": "Test-Happy path",
							"item": [
								{
									"name": "1. Create new EmailSynchCategorizations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Response has Id and Name values', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData).to.have.property('Description');",
													"  pm.expect(jsonData).to.have.property('Configuration');",
													"  ",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_post_name'));",
													"});",
													"",
													"pm.test(\"Store Response Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"categories_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"POST_\"+Date.now()",
													"    pm.globals.set(\"categories_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"Name\": \"{{categories_post_name}}\",\r\n      \"Description\": \"Postman test Description\",\r\n      \"Configuration\": \"<Email_Synch_Config><DocClassID>100005</DocClassID><Classification Default=\\\"True\\\" EmailStorage=\\\"3\\\"><DocTypeID>100020</DocTypeID><Match_Requirements /><Field_Mappings><Field_Mapping Copy_All_Values=\\\"True\\\"><Field_Name>BM String</Field_Name><Field_Value>test</Field_Value><RegExp>@</RegExp></Field_Mapping></Field_Mappings><Email_Attachments Attach=\\\"True\\\"><AttachAsRelated>False</AttachAsRelated><Attachment_DocClassID>100005</Attachment_DocClassID><Attachment_DocTypeID>100020</Attachment_DocTypeID><Copy_Fields>False</Copy_Fields></Email_Attachments><ProcessedEmail><ProcessedEmailAction>0</ProcessedEmailAction></ProcessedEmail></Classification><Classification Default=\\\"False\\\" EmailStorage=\\\"4\\\"><DocTypeID>100018</DocTypeID><Match_Requirements><Match><Email_Field>@SUBJECT</Email_Field><RegExp>$</RegExp></Match></Match_Requirements><Field_Mappings><Field_Mapping Copy_All_Values=\\\"False\\\"><Field_Name>BM String</Field_Name><Field_Value>12</Field_Value><RegExp>@</RegExp></Field_Mapping></Field_Mappings><Email_Attachments Attach=\\\"True\\\"><AttachAsRelated>False</AttachAsRelated><Attachment_DocClassID>100</Attachment_DocClassID><Attachment_DocTypeID>100018</Attachment_DocTypeID><Copy_Fields>False</Copy_Fields></Email_Attachments><ProcessedEmail><ProcessedEmailAction>2</ProcessedEmailAction><ProcessedEmailMailBox></ProcessedEmailMailBox><ProcessedEmailFolder></ProcessedEmailFolder></ProcessedEmail></Classification></Email_Synch_Config>\",\r\n      \"CreatedById\": 100006,\r\n      \"CreatedDate\": \"2017-05-04T04:04:10.077-04:00\",\r\n      \"ModifiedById\": 100006,\r\n      \"ModifiedDate\": \"2017-05-04T07:21:16.52-04:00\"\r\n}\r\n\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/EmailSynchCategorizations",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailSynchCategorizations"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "2. Get EmailSynchCategorizations(Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the category\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_post_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('categories_get_id'));",
													"    ",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData).to.have.property('Description');",
													"  pm.expect(jsonData).to.have.property('Configuration');",
													"  ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/EmailSynchCategorizations({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailSynchCategorizations({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Patch EmailSynchCategorizations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PATCH_\"+Date.now()",
													"    pm.globals.set(\"categories_patch_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Name\": \"{{categories_patch_name}}\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/EmailSynchCategorizations({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailSynchCategorizations({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Put EmailSynchCategorizations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PUT_\"+Date.now()",
													"    pm.globals.set(\"categories_put_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Id\": {{categories_get_id}},\r\n\t\"Name\": \"{{categories_put_name}}\",\r\n\t    \"Description\": \"Postman test Description\",\r\n    \"Configuration\": \"<Email_Synch_Config><DocClassID>100005</DocClassID><Classification Default=\\\"True\\\" EmailStorage=\\\"3\\\"><DocTypeID>100020</DocTypeID><Match_Requirements /><Field_Mappings><Field_Mapping Copy_All_Values=\\\"True\\\"><Field_Name>BM String</Field_Name><Field_Value>test</Field_Value><RegExp>@</RegExp></Field_Mapping></Field_Mappings><Email_Attachments Attach=\\\"True\\\"><AttachAsRelated>False</AttachAsRelated><Attachment_DocClassID>100005</Attachment_DocClassID><Attachment_DocTypeID>100020</Attachment_DocTypeID><Copy_Fields>False</Copy_Fields></Email_Attachments><ProcessedEmail><ProcessedEmailAction>0</ProcessedEmailAction></ProcessedEmail></Classification><Classification Default=\\\"False\\\" EmailStorage=\\\"4\\\"><DocTypeID>100018</DocTypeID><Match_Requirements><Match><Email_Field>@SUBJECT</Email_Field><RegExp>$</RegExp></Match></Match_Requirements><Field_Mappings><Field_Mapping Copy_All_Values=\\\"False\\\"><Field_Name>BM String</Field_Name><Field_Value>12</Field_Value><RegExp>@</RegExp></Field_Mapping></Field_Mappings><Email_Attachments Attach=\\\"True\\\"><AttachAsRelated>False</AttachAsRelated><Attachment_DocClassID>100</Attachment_DocClassID><Attachment_DocTypeID>100018</Attachment_DocTypeID><Copy_Fields>False</Copy_Fields></Email_Attachments><ProcessedEmail><ProcessedEmailAction>2</ProcessedEmailAction><ProcessedEmailMailBox></ProcessedEmailMailBox><ProcessedEmailFolder></ProcessedEmailFolder></ProcessedEmail></Classification></Email_Synch_Config>\",\r\n    \"CreatedById\": 1,\r\n    \"CreatedDate\": \"2019-03-20T11:09:06.493-04:00\",\r\n    \"ModifiedById\": 1,\r\n    \"ModifiedDate\": \"2019-03-20T11:09:45.547-04:00\"\r\n}\r\n\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/EmailSynchCategorizations({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailSynchCategorizations({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Get All EmailSynchCategorizations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify category values are listed\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/EmailSynchCategorizations",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailSynchCategorizations"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "EmailSynchEngines",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "1. Create new EmailSynchEngines",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Response has Id and Name values', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData).to.have.property('Description');",
													"  pm.expect(jsonData).to.have.property('PhysicalServer');",
													"  pm.expect(jsonData).to.have.property('ThreadPool');",
													"  pm.expect(jsonData).to.have.property('CycleTime');",
													"  pm.expect(jsonData).to.have.property('TempFolderPath');",
													"  pm.expect(jsonData).to.have.property('Lastactivitydate');",
													"  pm.expect(jsonData).to.have.property('ServiceName');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_post_name'));",
													"});",
													"",
													"",
													"pm.test(\"Store response Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"categories_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"POST_\"+Date.now()",
													"    pm.globals.set(\"categories_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Name\": \"{{categories_post_name}}\",\r\n  \"Description\": \"Postman Test Engine\",\r\n  \"PhysicalServer\": \"sa-pravan-vm\",\r\n  \"ThreadPool\": 1,\r\n  \"CycleTime\": 30,\r\n  \"TempFolderPath\": \"C:\\\\\\\\Temp\",\r\n  \"IsOnline\": false,\r\n  \"IsDisabled\": true,\r\n  \"Lastactivitydate\": null,\r\n  \"ServiceName\": null,\r\n  \"CreatedById\": 100006,\r\n  \"CreatedDate\": \"2017-05-04T03:49:33.063-04:00\",\r\n  \"ModifiedById\": 100006,\r\n  \"ModifiedDate\": \"2017-05-04T03:49:33.063-04:00\"\r\n}\r\n\r\n\r\n\r\n\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/EmailSynchEngines",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailSynchEngines"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "2. Get EmailSynchEngines(Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the category\", function () {",
													"  var jsonData = pm.response.json();",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_post_name'));",
													"  pm.expect(jsonData.Id).to.eql(pm.variables.get('categories_get_id'));",
													"    ",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData).to.have.property('Description');",
													"  pm.expect(jsonData).to.have.property('PhysicalServer');",
													"  pm.expect(jsonData).to.have.property('ThreadPool');",
													"  pm.expect(jsonData).to.have.property('CycleTime');",
													"  pm.expect(jsonData).to.have.property('TempFolderPath');",
													"  pm.expect(jsonData).to.have.property('Lastactivitydate');",
													"  pm.expect(jsonData).to.have.property('ServiceName');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/EmailSynchEngines({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailSynchEngines({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Patch EmailSynchEngines",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PATCH_\"+Date.now()",
													"    pm.globals.set(\"categories_patch_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Name\": \"{{categories_patch_name}}\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/EmailSynchEngines({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailSynchEngines({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Put EmailSynchEngines",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PUT_\"+Date.now()",
													"    pm.globals.set(\"categories_put_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"Id\": {{categories_get_id}},\r\n\t\"Name\": \"{{categories_put_name}}\",\r\n\t  \"Description\": \"Postman Test Engine\",\r\n  \"PhysicalServer\": \"sa-pravan-vm\",\r\n  \"ThreadPool\": 1,\r\n  \"CycleTime\": 30,\r\n  \"TempFolderPath\": \"C:\\\\\\\\Temp\",\r\n  \"IsOnline\": false,\r\n  \"IsDisabled\": true,\r\n  \"Lastactivitydate\": null,\r\n  \"ServiceName\": null,\r\n  \"CreatedById\": 100006,\r\n  \"CreatedDate\": \"2017-05-04T03:49:33.063-04:00\",\r\n  \"ModifiedById\": 100006,\r\n  \"ModifiedDate\": \"2017-05-04T03:49:33.063-04:00\"\r\n  \r\n}\r\n\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/EmailSynchEngines({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailSynchEngines({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Get All EmailSynchEngines",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify category values are listed\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/EmailSynchEngines",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"EmailSynchEngines"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "EngineMailboxes",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Mailboxes",
					"item": [],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a44ea42c-1330-410b-a153-dcec8f40c37d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0c13f513-8b05-4999-8f68-2b9b6bacf447",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "09 Reports",
			"item": [
				{
					"name": "ReportCategories",
					"item": [
						{
							"name": "Happy Path Testing",
							"item": [
								{
									"name": "1. Create new ReportCategories",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Response has Id and Name values', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData).to.have.property('GroupId');",
													"  pm.expect(jsonData).to.have.property('ReportView');",
													"  pm.expect(jsonData).to.have.property('GroupId');",
													"  pm.expect(jsonData).to.have.property('Sequence');",
													"  pm.expect(jsonData).to.have.property('Status');",
													"  pm.expect(jsonData).to.have.property('Description');",
													"  ",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_post_name'));",
													"});",
													"",
													"pm.test(\"Store category Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"categories_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"POST_\"+Date.now()",
													"    pm.globals.set(\"categories_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n  \"Name\": \"{{categories_post_name}}\",\r\n  \"Description\": \"{{categories_post_name}}\",\r\n  \"Status\": 1,\r\n  \"Sequence\": 1,\r\n  \"GroupId\": 1,\r\n  \"ReportView\": 0,\r\n  \"CreatedById\": 1,\r\n  \"CreatedDate\": \"2008-02-05T15:00:34.857-05:00\",\r\n  \"ModifiedById\": 125,\r\n  \"ModifiedDate\": \"2008-04-01T13:40:03.703-04:00\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportCategories",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportCategories"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "2. Get ReportCategories(Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the Reportcategory\", function () {",
													"    var jsonData = pm.response.json();",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_post_name'));",
													"  pm.expect(jsonData.Id).to.eql(pm.variables.get('categories_get_id'));",
													"  pm.expect(jsonData).to.have.property('GroupId');",
													"  pm.expect(jsonData).to.have.property('ReportView');",
													"  pm.expect(jsonData).to.have.property('GroupId');",
													"  pm.expect(jsonData).to.have.property('Sequence');",
													"  pm.expect(jsonData).to.have.property('Status');",
													"  pm.expect(jsonData).to.have.property('Description');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportCategories({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportCategories({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Patch ReportCategories",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PATCH_\"+Date.now()",
													"    pm.globals.set(\"categories_patch_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Name\": \"{{categories_patch_name}}\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportCategories({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportCategories({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Put ReportCategories",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PUT_\"+Date.now()",
													"    pm.globals.set(\"categories_put_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n \"Id\": {{categories_get_id}},\r\n\t\"Name\": \"{{categories_put_name}}\",\r\n  \"Description\": \"Postman Test\",\r\n  \"Status\": 1,\r\n  \"Sequence\": 1,\r\n  \"GroupId\": 1,\r\n  \"ReportView\": 0,\r\n  \"CreatedById\": 1,\r\n  \"CreatedDate\": \"2008-02-05T15:00:34.857-05:00\",\r\n  \"ModifiedById\": 125,\r\n  \"ModifiedDate\": \"2008-04-01T13:40:03.703-04:00\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportCategories({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportCategories({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Get All ReportCategories",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify category values are listed\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportCategories",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportCategories"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ReportCategoryAcls",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "ReportCategoryDataSources",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "ReportDataSources",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "ReportEngines",
					"item": [
						{
							"name": "Test-Happy Path",
							"item": [
								{
									"name": "1. Create new category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Response has Id and Name values', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_post_name'));",
													"});",
													"",
													"",
													"pm.test(\"Store category Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"categories_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"POST_\"+Date.now()",
													"    pm.globals.set(\"categories_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n\r\n\r\n{\r\n  \"IsOnline\": false,\r\n  \"IsDisabled\": true,\r\n   \"Name\": \"{{categories_post_name}}\",\r\n  \"Description\": \"{{categories_post_name}}\",\r\n  \"PhysicalServer\": \"savphlpetest64\",\r\n  \"ThreadPool\": 1,\r\n  \"CycleTime\": 5,\r\n  \"ExpirationCycle\": 10,\r\n  \"LastActivityDate\": \"2016-08-30T00:00:30.533-04:00\",\r\n  \"ServiceName\": \"Savana RPT Engine IPM_EPM50MASTER_502_QA\",\r\n  \"WorkerCycles\": 100,\r\n  \"CurrentWorkerCycle\": 3,\r\n  \"WorkerProcessId\": 166664,\r\n  \"CreatedById\": 1,\r\n  \"CreatedDate\": \"2016-08-02T16:41:16.4-04:00\",\r\n  \"ModifiedById\": 1,\r\n  \"ModifiedDate\": \"2016-08-02T16:42:52.52-04:00\" \r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportEngines",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportEngines"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "2. Get Category (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the category\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_post_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('categories_get_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportEngines({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportEngines({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Patch Category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PATCH_\"+Date.now()",
													"    pm.globals.set(\"categories_patch_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Name\": \"{{categories_patch_name}}\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportEngines({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportEngines({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Get Category (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the category after patch operation\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_patch_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('categories_get_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportEngines({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportEngines({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Put Category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PUT_\"+Date.now()",
													"    pm.globals.set(\"categories_put_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n\r\n{\r\n  \"IsOnline\": false,\r\n  \"IsDisabled\": true,\r\n  \"Id\": {{categories_get_id}},\r\n\t\"Name\": \"{{categories_put_name}}\",\r\n  \"Description\": \"Postman test Post\",\r\n  \"PhysicalServer\": \"savphlpetest64\",\r\n  \"ThreadPool\": 1,\r\n  \"CycleTime\": 5,\r\n  \"ExpirationCycle\": 10,\r\n  \"LastActivityDate\": \"2016-08-30T00:00:30.533-04:00\",\r\n  \"ServiceName\": \"Savana RPT Engine IPM_EPM50MASTER_502_QA\",\r\n  \"WorkerCycles\": 100,\r\n  \"CurrentWorkerCycle\": 3,\r\n  \"WorkerProcessId\": 166664,\r\n  \"CreatedById\": 1,\r\n  \"CreatedDate\": \"2016-08-02T16:41:16.4-04:00\",\r\n  \"ModifiedById\": 1,\r\n  \"ModifiedDate\": \"2016-08-02T16:42:52.52-04:00\" \r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportEngines({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportEngines({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Get Category (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the category after put operation\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_put_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('categories_get_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportEngines({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportEngines({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Get All Categories",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify category values are listed\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportEngines",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportEngines"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ReportGroups",
					"item": [
						{
							"name": "Testing-Happy Path",
							"item": [
								{
									"name": "1. Create new category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Response has Id and Name values', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_post_name'));",
													"});",
													"",
													"",
													"pm.test(\"Store category Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"categories_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"POST_\"+Date.now()",
													"    pm.globals.set(\"categories_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"Name\": \"{{categories_post_name}}\",\r\n  \"Description\": \"{{categories_post_name}}\",\r\n   \"CreatedById\": 1,\r\n   \"CreatedDate\": \"2016-08-15T08:55:37.813-04:00\",\r\n   \"ModifiedById\": 1,\r\n   \"ModifiedDate\": \"2016-08-15T08:55:37.813-04:00\"\r\n}\r\n\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportGroups",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportGroups"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "2. Get Category (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the category\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_post_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('categories_get_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportGroups({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportGroups({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Patch Category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PATCH_\"+Date.now()",
													"    pm.globals.set(\"categories_patch_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Name\": \"{{categories_patch_name}}\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportGroups({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportGroups({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Get Category (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the category after patch operation\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_patch_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('categories_get_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportGroups({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportGroups({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Put Category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PUT_\"+Date.now()",
													"    pm.globals.set(\"categories_put_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"Id\": {{categories_get_id}},\r\n\t\"Name\": \"{{categories_put_name}}\",\r\n  \"Description\": \"Postman test Post\",\r\n   \"CreatedById\": 1,\r\n   \"CreatedDate\": \"2016-08-15T08:55:37.813-04:00\",\r\n   \"ModifiedById\": 1,\r\n   \"ModifiedDate\": \"2016-08-15T08:55:37.813-04:00\"\r\n}\r\n\r\n\r\n\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportGroups({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportGroups({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Get Category (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the category after put operation\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_put_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('categories_get_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportGroups({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportGroups({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Get All Categories",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify category values are listed\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/ReportGroups",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"ReportGroups"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ReportGroupsAcls",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Reports",
					"item": [
						{
							"name": "Testing-Happy Path",
							"item": [
								{
									"name": "1. Create new category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5afbdc04-199e-4580-a104-d5a227375144",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('Response has Id and Name values', function() {",
													"  pm.expect(jsonData).to.have.property('Id');",
													"  pm.expect(jsonData).to.have.property('Name');",
													"  pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_post_name'));",
													"});",
													"",
													"",
													"pm.test(\"Store category Id\", function () {",
													"    var id = jsonData.Id;",
													"    pm.globals.set(\"categories_get_id\", id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2550643-333d-465a-bec2-9c7e68f819dd",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"POST_\"+Date.now()",
													"    pm.globals.set(\"categories_post_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n\"IsDisabled\": false,\r\n   \"Name\": \"{{categories_post_name}}\",\r\n  \"Description\": \"{{categories_post_name}}\",\r\n  \"Report\": \"<ReportSet Title=\\\"User Listing\\\" Description=\\\"User Listing Details\\\" Header=\\\"\\\" ReadOnly=\\\"False\\\" LandscapePrinting=\\\"False\\\" FieldValueColumnPairs=\\\"2\\\" ItemsPerPage=\\\"10000\\\" AddBookmarkForVisualGroup=\\\"False\\\" Footer=\\\"\\\" ShowVisualGroupLabels=\\\"False\\\" Schedule=\\\"1/1/0001 12:00:00 AM\\\" Recipients=\\\"\\\" RepeatType=\\\"None\\\" SendEmailAs=\\\"\\\" UserName=\\\"DefaultAdministrator\\\" Public=\\\"True\\\" Designer=\\\"AdHocReportDesigner\\\">\\r\\n\\t<JoinedTables>\\r\\n\\t\\t<JoinedTable Name=\\\"[eidmadm].[V_ADM_USERS_DETAILS]\\\" Alias=\\\"\\\" RightAlias=\\\"\\\" JoinType=\\\"INNER\\\" LeftConditionColumn=\\\"\\\" RightConditionTable=\\\"\\\" RightConditionColumn=\\\"\\\" />\\r\\n\\t</JoinedTables>\\r\\n\\t<Criterias>\\r\\n\\t\\t<Criteria Column=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[User Name]\\\" Not=\\\"False\\\" FieldFilter=\\\"False\\\" Operator=\\\"Equals\\\" OrIsBlank=\\\"False\\\" Description=\\\"\\\" AliasTable=\\\"\\\" Parameter=\\\"True\\\" Value=\\\"\\\" />\\r\\n\\t\\t<Criteria Column=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Account Disabled]\\\" Not=\\\"False\\\" FieldFilter=\\\"False\\\" Operator=\\\"Equals_Select\\\" OrIsBlank=\\\"False\\\" Description=\\\"\\\" AliasTable=\\\"\\\" Parameter=\\\"True\\\" Value=\\\"...\\\" />\\r\\n\\t</Criterias>\\r\\n\\t<Report Title=\\\"\\\" Code=\\\"\\\" Name=\\\"Detail\\\">\\r\\n\\t\\t<Options Top=\\\"-2147483648\\\" Distinct=\\\"True\\\" StoreResults=\\\"False\\\" SelectVisibleColumns=\\\"True\\\" ChartTypeName=\\\"\\\" AddGrandTotals=\\\"False\\\" TotalsFunction=\\\"None\\\" Invert=\\\"False\\\" FieldValue=\\\"False\\\" AddDeltas=\\\"False\\\" LinesPerItem=\\\"1\\\" ColumnsLimit=\\\"-1\\\" ReportType=\\\"Detail\\\" />\\r\\n\\t\\t<Position X=\\\"0\\\" Y=\\\"3\\\" ColSpan=\\\"1\\\" RowSpan=\\\"1\\\" />\\r\\n\\t\\t<Selections>\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[User ID]\\\" ColumnSql=\\\"\\\" Description=\\\"User ID\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[User Name]\\\" ColumnSql=\\\"\\\" Description=\\\"User Name\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"ASC\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[User Full Name]\\\" ColumnSql=\\\"\\\" Description=\\\"User Full Name\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Email Address]\\\" ColumnSql=\\\"\\\" Description=\\\"Email Address\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Domain]\\\" ColumnSql=\\\"\\\" Description=\\\"Domain\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Organization]\\\" ColumnSql=\\\"\\\" Description=\\\"Organization\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Category]\\\" ColumnSql=\\\"\\\" Description=\\\"Category\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Start Date]\\\" ColumnSql=\\\"\\\" Description=\\\"Start Date\\\" Definition=\\\"\\\" FormatString=\\\"{0:d}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Term Date]\\\" ColumnSql=\\\"\\\" Description=\\\"Term Date\\\" Definition=\\\"\\\" FormatString=\\\"{0:d}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[User ACL]\\\" ColumnSql=\\\"\\\" Description=\\\"User ACL\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[PNE]\\\" ColumnSql=\\\"\\\" Description=\\\"Password Never Expires\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Account Disabled]\\\" ColumnSql=\\\"\\\" Description=\\\"Account Disabled\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Enable System Administration]\\\" ColumnSql=\\\"\\\" Description=\\\"Enable System Administration\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[External User]\\\" ColumnSql=\\\"\\\" Description=\\\"External User\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Created By]\\\" ColumnSql=\\\"\\\" Description=\\\"Created By\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Created Date]\\\" ColumnSql=\\\"\\\" Description=\\\"Created Date\\\" Definition=\\\"\\\" FormatString=\\\"{0:d}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Last Modified By]\\\" ColumnSql=\\\"\\\" Description=\\\"Last Modified By\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Last Modified Date]\\\" ColumnSql=\\\"\\\" Description=\\\"Last Modified Date\\\" Definition=\\\"\\\" FormatString=\\\"{0:d}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t</Selections>\\r\\n\\t</Report>\\r\\n\\t<Report Title=\\\"\\\" Code=\\\"\\\" Name=\\\"Summary\\\">\\r\\n\\t\\t<Options Top=\\\"-2147483648\\\" Distinct=\\\"True\\\" StoreResults=\\\"False\\\" SelectVisibleColumns=\\\"True\\\" ChartTypeName=\\\"\\\" AddGrandTotals=\\\"False\\\" TotalsFunction=\\\"None\\\" Invert=\\\"False\\\" FieldValue=\\\"False\\\" AddDeltas=\\\"False\\\" LinesPerItem=\\\"1\\\" ColumnsLimit=\\\"-1\\\" ReportType=\\\"Summary\\\" />\\r\\n\\t\\t<Position X=\\\"0\\\" Y=\\\"2\\\" ColSpan=\\\"1\\\" RowSpan=\\\"1\\\" />\\r\\n\\t\\t<Selections />\\r\\n\\t</Report>\\r\\n\\t<Report Title=\\\"\\\" Code=\\\"\\\" Name=\\\"Chart\\\">\\r\\n\\t\\t<Options Top=\\\"-2147483648\\\" Distinct=\\\"True\\\" StoreResults=\\\"False\\\" SelectVisibleColumns=\\\"True\\\" ChartTypeName=\\\"\\\" AddGrandTotals=\\\"False\\\" TotalsFunction=\\\"None\\\" Invert=\\\"False\\\" FieldValue=\\\"False\\\" AddDeltas=\\\"False\\\" LinesPerItem=\\\"1\\\" ColumnsLimit=\\\"-1\\\" ReportType=\\\"Chart\\\" />\\r\\n\\t\\t<Position X=\\\"0\\\" Y=\\\"0\\\" ColSpan=\\\"1\\\" RowSpan=\\\"1\\\" />\\r\\n\\t\\t<Selections />\\r\\n\\t</Report>\\r\\n\\t<Report Title=\\\"\\\" Code=\\\"\\\" Name=\\\"Gauges\\\" BorderColor=\\\"-1\\\" HeaderColor=\\\"16777215\\\" ItemColor=\\\"16777215\\\" AlternatingItemColor=\\\"16777215\\\" HeaderForegroundColor=\\\"-16777216\\\" ItemForegroundColor=\\\"-16777216\\\">\\r\\n\\t\\t<Options Top=\\\"4\\\" Distinct=\\\"True\\\" StoreResults=\\\"False\\\" SelectVisibleColumns=\\\"True\\\" ChartTypeName=\\\"\\\" AddGrandTotals=\\\"False\\\" TotalsFunction=\\\"None\\\" Invert=\\\"True\\\" FieldValue=\\\"False\\\" AddDeltas=\\\"False\\\" LinesPerItem=\\\"1\\\" ColumnsLimit=\\\"4\\\" ReportType=\\\"Gauge\\\" />\\r\\n\\t\\t<Position X=\\\"0\\\" Y=\\\"1\\\" ColSpan=\\\"1\\\" RowSpan=\\\"1\\\" />\\r\\n\\t\\t<Selections />\\r\\n\\t</Report>\\r\\n</ReportSet>\",\r\n  \"CategoryId\": 1,\r\n  \"Sequence\": 1,\r\n  \"Type\": 0,\r\n  \"ReportOwner\": 0,\r\n  \"Xml\": null,\r\n  \"ReportModifiedDate\": null,\r\n  \"TenantId\": null,\r\n  \"IzendaadhocReportsId\": null,\r\n  \"Form\": null,\r\n  \"ReportSourceId\": null,\r\n  \"Thumbnail\": null,\r\n  \"CreatedById\": 1,\r\n  \"CreatedDate\": \"2008-02-14T11:35:04.073-05:00\",\r\n  \"ModifiedById\": 1,\r\n  \"ModifiedDate\": \"2008-02-20T15:06:43.417-05:00\"\r\n}\r\n\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/Reports",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Reports"
											]
										},
										"description": "Verify POST Request for categories work with status code 201"
									},
									"response": []
								},
								{
									"name": "2. Get Category (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the category\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_post_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('categories_get_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/Reports({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Reports({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Patch Category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PATCH_\"+Date.now()",
													"    pm.globals.set(\"categories_patch_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Name\": \"{{categories_patch_name}}\"\r\n}"
										},
										"url": {
											"raw": "{{SiteURL}}api/Reports({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Reports({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Get Category (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the category after patch operation\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_patch_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('categories_get_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/Reports({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Reports({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Put Category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa86f5f-87de-4186-b047-0bc4e162a445",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23066b1a-1d3c-433c-b214-36722c297f57",
												"exec": [
													"pm.test(\"Set dynamic value for Name\", function () {",
													"    var Name = \"PUT_\"+Date.now()",
													"    pm.globals.set(\"categories_put_name\", Name);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n\"IsDisabled\": false,\r\n \"Id\": {{categories_get_id}},\r\n\t\"Name\": \"{{categories_put_name}}\",\r\n  \"Description\": \"Postman test Post\",\r\n  \"Report\": \"<ReportSet Title=\\\"User Listing\\\" Description=\\\"User Listing Details\\\" Header=\\\"\\\" ReadOnly=\\\"False\\\" LandscapePrinting=\\\"False\\\" FieldValueColumnPairs=\\\"2\\\" ItemsPerPage=\\\"10000\\\" AddBookmarkForVisualGroup=\\\"False\\\" Footer=\\\"\\\" ShowVisualGroupLabels=\\\"False\\\" Schedule=\\\"1/1/0001 12:00:00 AM\\\" Recipients=\\\"\\\" RepeatType=\\\"None\\\" SendEmailAs=\\\"\\\" UserName=\\\"DefaultAdministrator\\\" Public=\\\"True\\\" Designer=\\\"AdHocReportDesigner\\\">\\r\\n\\t<JoinedTables>\\r\\n\\t\\t<JoinedTable Name=\\\"[eidmadm].[V_ADM_USERS_DETAILS]\\\" Alias=\\\"\\\" RightAlias=\\\"\\\" JoinType=\\\"INNER\\\" LeftConditionColumn=\\\"\\\" RightConditionTable=\\\"\\\" RightConditionColumn=\\\"\\\" />\\r\\n\\t</JoinedTables>\\r\\n\\t<Criterias>\\r\\n\\t\\t<Criteria Column=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[User Name]\\\" Not=\\\"False\\\" FieldFilter=\\\"False\\\" Operator=\\\"Equals\\\" OrIsBlank=\\\"False\\\" Description=\\\"\\\" AliasTable=\\\"\\\" Parameter=\\\"True\\\" Value=\\\"\\\" />\\r\\n\\t\\t<Criteria Column=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Account Disabled]\\\" Not=\\\"False\\\" FieldFilter=\\\"False\\\" Operator=\\\"Equals_Select\\\" OrIsBlank=\\\"False\\\" Description=\\\"\\\" AliasTable=\\\"\\\" Parameter=\\\"True\\\" Value=\\\"...\\\" />\\r\\n\\t</Criterias>\\r\\n\\t<Report Title=\\\"\\\" Code=\\\"\\\" Name=\\\"Detail\\\">\\r\\n\\t\\t<Options Top=\\\"-2147483648\\\" Distinct=\\\"True\\\" StoreResults=\\\"False\\\" SelectVisibleColumns=\\\"True\\\" ChartTypeName=\\\"\\\" AddGrandTotals=\\\"False\\\" TotalsFunction=\\\"None\\\" Invert=\\\"False\\\" FieldValue=\\\"False\\\" AddDeltas=\\\"False\\\" LinesPerItem=\\\"1\\\" ColumnsLimit=\\\"-1\\\" ReportType=\\\"Detail\\\" />\\r\\n\\t\\t<Position X=\\\"0\\\" Y=\\\"3\\\" ColSpan=\\\"1\\\" RowSpan=\\\"1\\\" />\\r\\n\\t\\t<Selections>\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[User ID]\\\" ColumnSql=\\\"\\\" Description=\\\"User ID\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[User Name]\\\" ColumnSql=\\\"\\\" Description=\\\"User Name\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"ASC\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[User Full Name]\\\" ColumnSql=\\\"\\\" Description=\\\"User Full Name\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Email Address]\\\" ColumnSql=\\\"\\\" Description=\\\"Email Address\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Domain]\\\" ColumnSql=\\\"\\\" Description=\\\"Domain\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Organization]\\\" ColumnSql=\\\"\\\" Description=\\\"Organization\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Category]\\\" ColumnSql=\\\"\\\" Description=\\\"Category\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Start Date]\\\" ColumnSql=\\\"\\\" Description=\\\"Start Date\\\" Definition=\\\"\\\" FormatString=\\\"{0:d}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Term Date]\\\" ColumnSql=\\\"\\\" Description=\\\"Term Date\\\" Definition=\\\"\\\" FormatString=\\\"{0:d}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[User ACL]\\\" ColumnSql=\\\"\\\" Description=\\\"User ACL\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[PNE]\\\" ColumnSql=\\\"\\\" Description=\\\"Password Never Expires\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Account Disabled]\\\" ColumnSql=\\\"\\\" Description=\\\"Account Disabled\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Enable System Administration]\\\" ColumnSql=\\\"\\\" Description=\\\"Enable System Administration\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[External User]\\\" ColumnSql=\\\"\\\" Description=\\\"External User\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Created By]\\\" ColumnSql=\\\"\\\" Description=\\\"Created By\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Created Date]\\\" ColumnSql=\\\"\\\" Description=\\\"Created Date\\\" Definition=\\\"\\\" FormatString=\\\"{0:d}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Last Modified By]\\\" ColumnSql=\\\"\\\" Description=\\\"Last Modified By\\\" Definition=\\\"\\\" FormatString=\\\"{0}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t\\t<Selection ColumnName=\\\"[eidmadm].[V_ADM_USERS_DETAILS].[Last Modified Date]\\\" ColumnSql=\\\"\\\" Description=\\\"Last Modified Date\\\" Definition=\\\"\\\" FormatString=\\\"{0:d}\\\" GroupBy=\\\"False\\\" OrderType=\\\"NONE\\\" WidthSettedManually=\\\"True\\\" Width=\\\"\\\" Visible=\\\"True\\\" AggregateFunction=\\\"None\\\" Justification=\\\"NotSet\\\" Master=\\\"False\\\" Operator=\\\"None\\\" AliasTable=\\\"\\\" SubtotalTitle=\\\"\\\" />\\r\\n\\t\\t</Selections>\\r\\n\\t</Report>\\r\\n\\t<Report Title=\\\"\\\" Code=\\\"\\\" Name=\\\"Summary\\\">\\r\\n\\t\\t<Options Top=\\\"-2147483648\\\" Distinct=\\\"True\\\" StoreResults=\\\"False\\\" SelectVisibleColumns=\\\"True\\\" ChartTypeName=\\\"\\\" AddGrandTotals=\\\"False\\\" TotalsFunction=\\\"None\\\" Invert=\\\"False\\\" FieldValue=\\\"False\\\" AddDeltas=\\\"False\\\" LinesPerItem=\\\"1\\\" ColumnsLimit=\\\"-1\\\" ReportType=\\\"Summary\\\" />\\r\\n\\t\\t<Position X=\\\"0\\\" Y=\\\"2\\\" ColSpan=\\\"1\\\" RowSpan=\\\"1\\\" />\\r\\n\\t\\t<Selections />\\r\\n\\t</Report>\\r\\n\\t<Report Title=\\\"\\\" Code=\\\"\\\" Name=\\\"Chart\\\">\\r\\n\\t\\t<Options Top=\\\"-2147483648\\\" Distinct=\\\"True\\\" StoreResults=\\\"False\\\" SelectVisibleColumns=\\\"True\\\" ChartTypeName=\\\"\\\" AddGrandTotals=\\\"False\\\" TotalsFunction=\\\"None\\\" Invert=\\\"False\\\" FieldValue=\\\"False\\\" AddDeltas=\\\"False\\\" LinesPerItem=\\\"1\\\" ColumnsLimit=\\\"-1\\\" ReportType=\\\"Chart\\\" />\\r\\n\\t\\t<Position X=\\\"0\\\" Y=\\\"0\\\" ColSpan=\\\"1\\\" RowSpan=\\\"1\\\" />\\r\\n\\t\\t<Selections />\\r\\n\\t</Report>\\r\\n\\t<Report Title=\\\"\\\" Code=\\\"\\\" Name=\\\"Gauges\\\" BorderColor=\\\"-1\\\" HeaderColor=\\\"16777215\\\" ItemColor=\\\"16777215\\\" AlternatingItemColor=\\\"16777215\\\" HeaderForegroundColor=\\\"-16777216\\\" ItemForegroundColor=\\\"-16777216\\\">\\r\\n\\t\\t<Options Top=\\\"4\\\" Distinct=\\\"True\\\" StoreResults=\\\"False\\\" SelectVisibleColumns=\\\"True\\\" ChartTypeName=\\\"\\\" AddGrandTotals=\\\"False\\\" TotalsFunction=\\\"None\\\" Invert=\\\"True\\\" FieldValue=\\\"False\\\" AddDeltas=\\\"False\\\" LinesPerItem=\\\"1\\\" ColumnsLimit=\\\"4\\\" ReportType=\\\"Gauge\\\" />\\r\\n\\t\\t<Position X=\\\"0\\\" Y=\\\"1\\\" ColSpan=\\\"1\\\" RowSpan=\\\"1\\\" />\\r\\n\\t\\t<Selections />\\r\\n\\t</Report>\\r\\n</ReportSet>\",\r\n  \"CategoryId\": 1,\r\n  \"Sequence\": 1,\r\n  \"Type\": 0,\r\n  \"ReportOwner\": 0,\r\n  \"Xml\": null,\r\n  \"ReportModifiedDate\": null,\r\n  \"TenantId\": null,\r\n  \"IzendaadhocReportsId\": null,\r\n  \"Form\": null,\r\n  \"ReportSourceId\": null,\r\n  \"Thumbnail\": null,\r\n  \"CreatedById\": 1,\r\n  \"CreatedDate\": \"2008-02-14T11:35:04.073-05:00\",\r\n  \"ModifiedById\": 1,\r\n  \"ModifiedDate\": \"2008-02-20T15:06:43.417-05:00\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{SiteURL}}api/Reports({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Reports({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Get Category (Key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adca3f1-8578-4212-87ea-9ddf344a099c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Name and ID of the category after put operation\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.Name).to.eql(pm.variables.get('categories_put_name'));",
													"    pm.expect(jsonData.Id).to.eql(pm.variables.get('categories_get_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "OData-MaxVersion",
												"type": "text",
												"value": "4.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization-Token",
												"type": "text",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/Reports({{categories_get_id}})",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Reports({{categories_get_id}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Get All Categories",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d7768c6-93ed-454c-a8e4-bae0bcff7baf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Verify category values are listed\", function () {",
													"    ",
													"    pm.expect(jsonData).to.have.property('value');",
													"    pm.expect(jsonData.value[0]).to.have.property('Id');",
													"    pm.expect(jsonData.value[0]).to.have.property('Name');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "OData-Version",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "OData-MaxVersion",
												"value": "4.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Token",
												"value": "{     \"userName\": \"{{user}}\", \"password\": \"{{password}}\", \"schema\": \"{{schema}}\"}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{SiteURL}}api/Reports",
											"host": [
												"{{SiteURL}}api"
											],
											"path": [
												"Reports"
											]
										},
										"description": "Verify Get All Categories API works with statuc code 200"
									},
									"response": []
								}
							],
							"description": "Happy Path",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ReportSchedulers",
					"item": [],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d6265a36-8528-4553-b358-0792875055f7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7fe788b0-f18b-46d4-bd54-03729b5913ea",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "10 DesktopIntegrator",
			"item": [
				{
					"name": "DiDefaultFieldMaps",
					"item": [],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7a6f7c04-764a-4003-870a-373471eeccd7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3e0eadeb-1a08-413d-b65c-cbc99b4e8be9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "11 EntityRelationRule",
			"item": [
				{
					"name": "Entity Relation Rule Mappings",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Entity Relation Rule XDocEvent ",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Entity Relation Rule",
					"item": [],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3b422b57-e672-4014-a3c4-22384b906e76",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b71538c2-746d-401e-96c2-05711aa82958",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "12 Others",
			"item": [
				{
					"name": "Error",
					"item": [
						{
							"name": "Test - Happy path",
							"item": [],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6fa55bf0-80d1-4ced-8408-8309500c6e23",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0827dd62-f7c8-4d67-a3cb-f555581255d5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}